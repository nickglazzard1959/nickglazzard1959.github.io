{"version":3,"file":"babylon.gui.min.js","mappings":"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","sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/webpack/runtime/define property getters","webpack://BABYLON.GUI/webpack/runtime/global","webpack://BABYLON.GUI/webpack/runtime/hasOwnProperty shorthand","webpack://BABYLON.GUI/webpack/runtime/make namespace object","webpack://BABYLON.GUI/../../../../node_modules/tslib/tslib.es6.mjs","webpack://BABYLON.GUI/../../../dev/gui/src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/measure.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/math2D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/control.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/container.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/image.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/button.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/textWrapper.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/inputText.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/grid.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/focusableButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/inputTextArea.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/line.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/selector.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/toggleButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/statics.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/gradient/LinearGradient.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/controls/gradient/RadialGradient.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/style.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/adtInstrumentation.ts","webpack://BABYLON.GUI/../../../dev/gui/src/2D/xmlLoader.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/control3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/contentDisplay3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/button3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/container3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluent/shaders/fluent.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/touchHolographicMenu.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/handMenu.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/holographicBackplate.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/touchButton3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/touchHolographicButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/behaviors/defaultBehavior.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/gizmos/gizmoHandle.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/handle/handleMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/gizmos/slateGizmo.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/holographicSlate.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/nearMenu.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/slider3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/touchMeshButton3D.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/materials/mrdl/mrdlInnerquadMaterial.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts","webpack://BABYLON.GUI/../../../dev/gui/src/3D/gui3DManager.ts","webpack://BABYLON.GUI/../../../lts/gui/src/legacy/legacy.ts","webpack://BABYLON.GUI/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n","import type { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpV1 = new Vector2(0, 0);\r\nconst tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        const left = Math.min(a.left, b.left);\r\n        const top = Math.min(a.top, b.top);\r\n        const right = Math.max(a.left + a.width, b.left + b.width);\r\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (let i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @internal */\r\n    protected _urlRewriter?: (url: string) => string;\r\n\r\n    /**\r\n     * Observable that fires when the control's enabled state changes\r\n     */\r\n    public onEnabledStateChangedObservable = new Observable<boolean>();\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    protected _clipChildren = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipChildren() {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    protected _clipContent = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent() {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    /**\r\n     * Observable that fires whenever the accessibility event of the control has changed\r\n     */\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Indicates if the control should be serialized. Defaults to true.\r\n     */\r\n    @serialize()\r\n    public isSerializable: boolean = true;\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _fixedRatio = 0;\r\n    public set fixedRatio(value: number) {\r\n        if (this._fixedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._fixedRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public get fixedRatio(): number {\r\n        return this._fixedRatio;\r\n    }\r\n\r\n    private _fixedRatioMasterIsWidth = true;\r\n    set fixedRatioMasterIsWidth(value: boolean) {\r\n        if (this._fixedRatioMasterIsWidth === value) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\r\n     * When the height of a control is set, this property is changed to false.\r\n     */\r\n    @serialize()\r\n    get fixedRatioMasterIsWidth(): boolean {\r\n        return this._fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n        this.onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results: Control[] = [];\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\r\n        if (leftAndTopIgnoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionalOffsetX();\r\n            const offsetY = this._computeAdditionalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n\r\n        // Let children take some post-measurement actions\r\n        this._postMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        // Since transformMatrix is used here, we need to have it freshly computed\r\n        this._transform();\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this._fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _postMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _getStyleProperty(propName: \"fontStyle\" | \"fontWeight\" | \"fontFamily\", defaultValue: string): string {\r\n        const prop = (this._style && this._style[propName]) ?? this[propName];\r\n        if (!prop && this.parent) {\r\n            return this.parent._getStyleProperty(propName, defaultValue);\r\n        } else if (!this.parent) {\r\n            return defaultValue;\r\n        } else {\r\n            return prop;\r\n        }\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        this._font =\r\n            this._getStyleProperty(\"fontStyle\", \"\") +\r\n            \" \" +\r\n            this._getStyleProperty(\"fontWeight\", \"\") +\r\n            \" \" +\r\n            this.fontSizeInPixels +\r\n            \"px \" +\r\n            this._getStyleProperty(\"fontFamily\", \"Arial\");\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font, this._host?.getScene()?.getEngine());\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * A control has a dimension fully defined if that dimension doesn't depend on the parent's dimension.\r\n     * As an example, a control that has dimensions in pixels is fully defined, while in percentage is not fully defined.\r\n     * @param dim the dimension to check (width or height)\r\n     * @returns if the dimension is fully defined\r\n     */\r\n    public isDimensionFullyDefined(dim: \"width\" | \"height\"): boolean {\r\n        return this.getDimension(dim).isPixel;\r\n    }\r\n\r\n    /**\r\n     * Gets the dimension of the control along a specified axis\r\n     * @param dim the dimension to retrieve (width or height)\r\n     * @returns the dimension value along the specified axis\r\n     */\r\n    public getDimension(dim: \"width\" | \"height\"): ValueAndUnit {\r\n        if (dim === \"width\") {\r\n            return this._width;\r\n        } else {\r\n            return this._height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization, true);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture, urlRewriter?: (url: string) => string): Control {\r\n        this._urlRewriter = urlRewriter;\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     * @param force if the control should be serialized even if the isSerializable flag is set to false (default false)\r\n     * @param allowCanvas defines if the control is allowed to use a Canvas2D object to serialize (true by default)\r\n     */\r\n    public serialize(serializationObject: any, force: boolean = false, allowCanvas: boolean = true) {\r\n        if (!this.isSerializable && !force) {\r\n            return;\r\n        }\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        // Call prepareFont to guarantee the font is properly set before serializing\r\n        if (allowCanvas) {\r\n            this._prepareFont();\r\n        }\r\n        if (this._fontFamily) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n        }\r\n        if (this.fontSize) {\r\n            serializationObject.fontSize = this.fontSize;\r\n        }\r\n        if (this.fontWeight) {\r\n            serializationObject.fontWeight = this.fontWeight;\r\n        }\r\n        if (this.fontStyle) {\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture, urlRewriter?: (url: string) => string) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.fixedRatioMasterIsWidth = serializedObject.fixedRatioMasterIsWidth ?? this.fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string, engineToUse?: AbstractEngine): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = engineToUse || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture, urlRewriter?: (url: string) => string): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(\r\n            () => {\r\n                const newControl = new controlType() as Control;\r\n                newControl._urlRewriter = urlRewriter;\r\n                return newControl;\r\n            },\r\n            serializedObject,\r\n            null\r\n        );\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host, urlRewriter);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Matrix2D } from \"../math2D\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @internal */\r\n    public _children = new Array<Control>();\r\n    /** @internal */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @internal */\r\n    protected _background = \"\";\r\n    /** @internal */\r\n    protected _backgroundGradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @internal */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @internal */\r\n    protected _renderToIntermediateTexture: boolean = false;\r\n    /** @internal */\r\n    protected _intermediateTexture: Nullable<DynamicTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the container will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    @serialize()\r\n    public delegatePickingToChildren = false;\r\n\r\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\r\n    @serialize()\r\n    public get renderToIntermediateTexture(): boolean {\r\n        return this._renderToIntermediateTexture;\r\n    }\r\n    public set renderToIntermediateTexture(value: boolean) {\r\n        if (this._renderToIntermediateTexture === value) {\r\n            return;\r\n        }\r\n        this._renderToIntermediateTexture = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    @serialize()\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    @serialize()\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    @serialize()\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient color. Takes precedence over background */\r\n    @serialize()\r\n    public get backgroundGradient() {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    public override get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public override set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n\r\n        for (const child of this._children) {\r\n            child.isReadOnly = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public override _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this.children) {\r\n            child._isClipped = false;\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlAddedObservable.notifyObservers(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        const children = this.children.slice();\r\n\r\n        for (const child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlRemovedObservable.notifyObservers(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when any control is added to this container.\r\n     */\r\n    public onControlAddedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * An event triggered when any control is removed from this container.\r\n     */\r\n    public onControlRemovedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reOrderControl(control: Control): void {\r\n        const linkedMesh = control.linkedMesh;\r\n\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        if (linkedMesh) {\r\n            control.linkWithMesh(linkedMesh);\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        if (this._background || this._backgroundGradient) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (const child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n            if (this._renderToIntermediateTexture) {\r\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\r\n                    this._intermediateTexture.dispose();\r\n                    this._intermediateTexture = null;\r\n                }\r\n                if (!this._intermediateTexture) {\r\n                    this._intermediateTexture = new DynamicTexture(\r\n                        \"\",\r\n                        { width: this._currentMeasure.width, height: this._currentMeasure.height },\r\n                        this._host.getScene(),\r\n                        false,\r\n                        Texture.NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTUREFORMAT_RGBA,\r\n                        false\r\n                    );\r\n                    this._intermediateTexture.hasAlpha = true;\r\n                } else {\r\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (const child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n                        if (child.isVisible && !child.notRenderable) {\r\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\r\n                            }\r\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.width = computedWidth + \"px\";\r\n                        this._width.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.height = computedHeight + \"px\";\r\n                        this._height.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected override _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    private _inverseTransformMatrix = Matrix2D.Identity();\r\n    private _inverseMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\r\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? (<DynamicTexture>this._intermediateTexture).getContext() : context;\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.save();\r\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\r\n            if (invalidatedRectangle) {\r\n                this._transformMatrix.invertToRef(this._inverseTransformMatrix);\r\n                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);\r\n                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);\r\n            } else {\r\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        this._localDraw(contextToDrawTo);\r\n\r\n        context.save();\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(contextToDrawTo);\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(contextToDrawTo, invalidatedRectangle);\r\n        }\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.restore();\r\n            context.save();\r\n            context.globalAlpha = this.alpha;\r\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\r\n            context.restore();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public override getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _processPicking(\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        type: number,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        // checks if the picking position is within the container\r\n        const contains = super.contains(x, y);\r\n\r\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\r\n        if (!contains && this.clipChildren) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (let index = this._children.length - 1; index >= 0; index--) {\r\n            const child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!contains) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    protected _getAdaptDimTo(dim: \"width\" | \"height\"): boolean {\r\n        if (dim === \"width\") {\r\n            return this.adaptWidthToChildren;\r\n        } else {\r\n            return this.adaptHeightToChildren;\r\n        }\r\n    }\r\n\r\n    public override isDimensionFullyDefined(dim: \"width\" | \"height\"): boolean {\r\n        if (this._getAdaptDimTo(dim)) {\r\n            for (const child of this.children) {\r\n                if (!child.isDimensionFullyDefined(dim)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return super.isDimensionFullyDefined(dim);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     * @param force force serialization even if isSerializable === false\r\n     * @param allowCanvas defines if the control is allowed to use a Canvas2D object to serialize (true by default)\r\n     */\r\n    public override serialize(serializationObject: any, force: boolean = false, allowCanvas: boolean = true) {\r\n        super.serialize(serializationObject, force, allowCanvas);\r\n        if (!this.isSerializable && !force) {\r\n            return;\r\n        }\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n\r\n        if (!this.children.length) {\r\n            return;\r\n        }\r\n\r\n        serializationObject.children = [];\r\n\r\n        for (const child of this.children) {\r\n            if (child.isSerializable || force) {\r\n                const childSerializationObject = {};\r\n                child.serialize(childSerializationObject, force, allowCanvas);\r\n                serializationObject.children.push(childSerializationObject);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        for (let index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n        this._intermediateTexture?.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture, urlRewriter?: (url: string) => string) {\r\n        super._parseFromContent(serializedObject, host, urlRewriter);\r\n        this._link(host);\r\n\r\n        // Gradient\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this._backgroundGradient = new className();\r\n            this._backgroundGradient?.parse(serializedObject.backgroundGradient);\r\n        }\r\n\r\n        if (!serializedObject.children) {\r\n            return;\r\n        }\r\n\r\n        for (const childData of serializedObject.children) {\r\n            this.addControl(Control.Parse(childData, host, urlRewriter));\r\n        }\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        for (const child of this.children) {\r\n            if (!child.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Container\", Container);\r\n","import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = [0, 0, 0, 0];\r\n    private _cachedRadius = [0, 0, 0, 0];\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius of all angles */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius top left angle */\r\n    @serialize()\r\n    public get cornerRadiusX(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadiusX(value: number) {\r\n        if (this._cornerRadius[0] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[0] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius top right angle */\r\n    @serialize()\r\n    public get cornerRadiusY(): number {\r\n        return this._cornerRadius[1];\r\n    }\r\n\r\n    public set cornerRadiusY(value: number) {\r\n        if (this._cornerRadius[1] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[1] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom left angle */\r\n    @serialize()\r\n    public get cornerRadiusZ(): number {\r\n        return this._cornerRadius[2];\r\n    }\r\n\r\n    public set cornerRadiusZ(value: number) {\r\n        if (this._cornerRadius[2] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[2] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom right angle */\r\n    @serialize()\r\n    public get cornerRadiusW(): number {\r\n        return this._cornerRadius[3];\r\n    }\r\n\r\n    public set cornerRadiusW(value: number) {\r\n        if (this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[3] = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _computeAdditionalOffsetX() {\r\n        let additionalWidth = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalWidth += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalWidth += this.thickness / 2;\r\n        }\r\n        return additionalWidth;\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _computeAdditionalOffsetY() {\r\n        let additionalHeight = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalHeight += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalHeight += this.thickness / 2;\r\n        }\r\n        return additionalHeight;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected override _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        for (let index = 0; index < this._cornerRadius.length; index++) {\r\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\r\n        }\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + this._cachedRadius[0], y);\r\n        context.lineTo(x + width - this._cachedRadius[1], y);\r\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\r\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\r\n        context.lineTo(x + this._cachedRadius[3], y + height);\r\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + this._cachedRadius[0]);\r\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected override _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext, ITextMetrics } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis = 2,\r\n\r\n    /**\r\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\r\n     */\r\n    WordWrapEllipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    private _wordDivider: string = \" \";\r\n    private _forceResizeWidth: boolean = false;\r\n    private _applyOutlineToUnderline: boolean = false;\r\n\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the TextBlock will be resized to fit its content\r\n\r\n     */\r\n    @serialize()\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the TextBlock will be resized to fit its content\r\n\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    @serialize()\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value + \"\"; // Making sure it is a text\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    @serialize()\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    @serialize()\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    @serialize()\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.\r\n     */\r\n    @serialize()\r\n    public get applyOutlineToUnderline(): boolean {\r\n        return this._applyOutlineToUnderline;\r\n    }\r\n\r\n    public set applyOutlineToUnderline(value: boolean) {\r\n        if (this._applyOutlineToUnderline === value) {\r\n            return;\r\n        }\r\n        this._applyOutlineToUnderline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    @serialize()\r\n    public get wordDivider(): string {\r\n        return this._wordDivider;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    public set wordDivider(value: string) {\r\n        if (this._wordDivider === value) {\r\n            return;\r\n        }\r\n        this._wordDivider = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * By default, if a text block has text wrapping other than Clip, its width\r\n     * is not resized even if resizeToFit = true. This parameter forces the width\r\n     * to be resized.\r\n     */\r\n    @serialize()\r\n    public get forceResizeWidth(): boolean {\r\n        return this._forceResizeWidth;\r\n    }\r\n\r\n    public set forceResizeWidth(value: boolean) {\r\n        if (this._forceResizeWidth === value) {\r\n            return;\r\n        }\r\n        this._forceResizeWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (empty string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public override name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected override _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this.isDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font, this._host.getScene()?.getEngine());\r\n        }\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\r\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\r\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);\r\n        }\r\n    }\r\n\r\n    private _drawLine(xFrom: number, yFrom: number, xTo: number, yTo: number, context: ICanvasRenderingContext): void {\r\n        context.beginPath();\r\n        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n        context.moveTo(xFrom, yFrom);\r\n        context.lineTo(xTo, yTo);\r\n        if (this.outlineWidth && this.applyOutlineToUnderline) {\r\n            context.stroke();\r\n            context.fill();\r\n        } else {\r\n            const currentStroke = context.strokeStyle;\r\n            context.strokeStyle = context.fillStyle;\r\n            context.stroke();\r\n            context.strokeStyle = currentStroke;\r\n        }\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected override _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = \"miter\";\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    private _linesTemp: object[] = [];\r\n\r\n    protected _breakLines(refWidth: number, refHeight: number, context: ICanvasRenderingContext): object[] {\r\n        this._linesTemp.length = 0;\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight!, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return this._linesTemp;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): object {\r\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\r\n    }\r\n\r\n    //Calculate how many characters approximately we need to remove\r\n    private _getCharsToRemove(lineWidth: number, width: number, lineLength: number) {\r\n        const diff = lineWidth > width ? lineWidth - width : 0;\r\n        // This isn't exact unless the font is monospaced\r\n        const charWidth = lineWidth / lineLength;\r\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\r\n        return removeChars;\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: ICanvasRenderingContext): object {\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -removeChars);\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n            // Add on the end\r\n            line += \"…\";\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.splice(characters.length - removeChars, removeChars);\r\n                line = `${characters.join(\"\")}…`;\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    private _getTextMetricsWidth(textMetrics: ITextMetrics) {\r\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\r\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\r\n        }\r\n        return textMetrics.width;\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = [];\r\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\r\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLineWordWrapEllipsis(line: string = \"\", width: number, height: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = this._parseLineWordWrap(line, width, context);\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            const currentHeight = this._computeHeightForLinesOf(n);\r\n            if (currentHeight > height && n > 1) {\r\n                const lastLine = lines[n - 2] as { text: string; width: number };\r\n                const currentLine = lines[n - 1] as { text: string; width: number };\r\n                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);\r\n                const linesToRemove = lines.length - n + 1;\r\n                for (let i = 0; i < linesToRemove; i++) {\r\n                    lines.pop();\r\n                }\r\n                return lines;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || !this._lines) {\r\n            return;\r\n        }\r\n        const height = this._currentMeasure.height;\r\n        let rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    private _computeHeightForLinesOf(lineCount: number): number {\r\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\r\n\r\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\r\n            let lineSpacing = 0;\r\n            if (this._lineSpacing.isPixel) {\r\n                lineSpacing = this._lineSpacing.getValue(this._host);\r\n            } else {\r\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n            }\r\n\r\n            newHeight += (lineCount - 1) * lineSpacing;\r\n        }\r\n\r\n        return newHeight;\r\n    }\r\n\r\n    public override isDimensionFullyDefined(dim: \"width\" | \"height\"): boolean {\r\n        if (this.resizeToFit) {\r\n            return true;\r\n        }\r\n        return super.isDimensionFullyDefined(dim);\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            // Should abstract platform instead of using LastCreatedEngine\r\n            const context = EngineStore.LastCreatedEngine?.createCanvas(0, 0).getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font, this._host.getScene()?.getEngine());\r\n                }\r\n                const lines = this._lines\r\n                    ? this._lines\r\n                    : this._breakLines(\r\n                          this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels,\r\n                          this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels,\r\n                          context\r\n                      );\r\n                return this._computeHeightForLinesOf(lines.length);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    override dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext, IImage } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    /**\r\n     *  Specifies an alternate text for the image, if the image for some reason cannot be displayed.\r\n     */\r\n    public alt?: string;\r\n\r\n    private _workingCanvas: Nullable<ICanvas> = null;\r\n\r\n    private _domImage: IImage;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n        data: Uint8ClampedArray | null;\r\n        key: string;\r\n    } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Cache of images to avoid loading the same image multiple times\r\n     */\r\n    public static SourceImgCache = new Map<string, { img: IImage; timesUsed: number; loaded: boolean; waitingForLoadCallback: Array<() => void> }>();\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets or sets the referrer policy to apply on the img element load request.\r\n     * You should set referrerPolicy before set the source of the image if you want to ensure the header will be present on the xhr loading request\r\n     */\r\n    public referrerPolicy: Nullable<ReferrerPolicy>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        return this.isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will consume more memory as the image has to be stored twice\r\n     */\r\n    @serialize()\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image width\r\n     */\r\n    public get imageWidth(): number {\r\n        return this._imageWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets the image height\r\n     */\r\n    public get imageHeight(): number {\r\n        return this._imageHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    @serialize()\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the stretching mode used by the image */\r\n    @serialize()\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(height, width);\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate((n * Math.PI) / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            const mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (let x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (let y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: IImage) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): IImage {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image source url\r\n     */\r\n    @serialize()\r\n    public get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal Image Element cache. Can reduce memory usage.\r\n     */\r\n    public static ResetImageCache() {\r\n        Image.SourceImgCache.clear();\r\n    }\r\n\r\n    private _removeCacheUsage(source: Nullable<string>) {\r\n        const value = source && Image.SourceImgCache.get(source);\r\n        if (value) {\r\n            value.timesUsed -= 1;\r\n            // Since the image isn't being used anymore, we can clean it from the cache\r\n            if (value.timesUsed === 0) {\r\n                Image.SourceImgCache.delete(source);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._urlRewriter && value) {\r\n            value = this._urlRewriter(value);\r\n        }\r\n\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._removeCacheUsage(this._source);\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        if (value && Image.SourceImgCache.has(value)) {\r\n            const cachedData = Image.SourceImgCache.get(value)!;\r\n            this._domImage = cachedData.img;\r\n            cachedData.timesUsed += 1;\r\n            if (cachedData.loaded) {\r\n                this._onImageLoaded();\r\n            } else {\r\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\r\n            }\r\n            return;\r\n        }\r\n        this._domImage = engine.createCanvasImage();\r\n        if (value) {\r\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\r\n        }\r\n\r\n        this._domImage.onload = () => {\r\n            if (value) {\r\n                const cachedData = Image.SourceImgCache.get(value);\r\n                if (cachedData) {\r\n                    cachedData.loaded = true;\r\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\r\n                        waitingCallback();\r\n                    }\r\n                    cachedData.waitingForLoadCallback.length = 0;\r\n                    return;\r\n                }\r\n            }\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     * @param value the source svg\r\n     * @returns the svg\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\r\n            this._isSVG = true;\r\n            const svgsrc = value.split(\"#\")[0];\r\n            const elemid = value.split(\"#\")[1];\r\n            // check if object alr exist in document\r\n            const svgExist = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                const svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    const elem = <SVGGraphicsElement>(<unknown>svgDoc.getElementById(elemid));\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                const svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    const svgobj = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n     * given external svg file and icon id\r\n     * @param svgsrc\r\n     * @param elemid\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        const svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            const elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                const vb_width = Number(vb.split(\" \")[2]);\r\n                const vb_height = Number(vb.split(\" \")[3]);\r\n                const elem_bbox = elem.getBBox();\r\n                let elem_matrix_a = 1;\r\n                let elem_matrix_d = 1;\r\n                let elem_matrix_e = 0;\r\n                let elem_matrix_f = 0;\r\n                const mainMatrix = elem.transform.baseVal.consolidate()!.matrix;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = mainMatrix.a;\r\n                    elem_matrix_d = mainMatrix.d;\r\n                    elem_matrix_e = mainMatrix.e;\r\n                    elem_matrix_f = mainMatrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\r\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(\r\n        public override name?: string,\r\n        url: Nullable<string> = null\r\n    ) {\r\n        super(name);\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public override contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected override _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) {\r\n                        // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const transform = context.getTransform();\r\n\r\n        const canvas = this._workingCanvas!;\r\n        const workingCanvasContext = canvas.getContext(\"2d\")!;\r\n        workingCanvasContext.save();\r\n        const ttx = tx - this._currentMeasure.left;\r\n        const tty = ty - this._currentMeasure.top;\r\n        workingCanvasContext.setTransform(transform.a, transform.b, transform.c, transform.d, (ttx + tw) / 2, (tty + th) / 2);\r\n        workingCanvasContext.translate(-(ttx + tw) / 2, -(tty + th) / 2);\r\n\r\n        workingCanvasContext.drawImage(this._domImage, sx, sy, sw, sh, ttx, tty, tw, th);\r\n        workingCanvasContext.restore();\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        } else {\r\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            const column = (this.cellId / rowCount) >> 0;\r\n            const row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM: {\r\n                    const hRatio = this._currentMeasure.width / width;\r\n                    const vRatio = this._currentMeasure.height / height;\r\n                    const ratio = Math.min(hRatio, vRatio);\r\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                }\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context, x, y, width, height);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderNinePatch(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number): void {\r\n        const idealRatio = this.host.idealWidth\r\n            ? this._width.getValue(this.host) / this.host.idealWidth\r\n            : this.host.idealHeight\r\n              ? this._height.getValue(this.host) / this.host.idealHeight\r\n              : 1;\r\n        const leftWidth = this._sliceLeft;\r\n        const topHeight = this._sliceTop;\r\n        const bottomHeight = sh - this._sliceBottom;\r\n        const rightWidth = sw - this._sliceRight;\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const centerHeight = this._sliceBottom - this._sliceTop;\r\n        const leftWidthAdjusted = Math.round(leftWidth * idealRatio);\r\n        const topHeightAdjusted = Math.round(topHeight * idealRatio);\r\n        const bottomHeightAdjusted = Math.round(bottomHeight * idealRatio);\r\n        const rightWidthAdjusted = Math.round(rightWidth * idealRatio);\r\n        const targetCenterWidth = Math.round(this._currentMeasure.width) - rightWidthAdjusted - leftWidthAdjusted + 2;\r\n        const targetCenterHeight = Math.round(this._currentMeasure.height) - bottomHeightAdjusted - topHeightAdjusted + 2;\r\n        const centerLeftOffset = Math.round(this._currentMeasure.left) + leftWidthAdjusted - 1;\r\n        const centerTopOffset = Math.round(this._currentMeasure.top) + topHeightAdjusted - 1;\r\n        const rightOffset = Math.round(this._currentMeasure.left + this._currentMeasure.width) - rightWidthAdjusted;\r\n        const bottomOffset = Math.round(this._currentMeasure.top + this._currentMeasure.height) - bottomHeightAdjusted;\r\n\r\n        //Top Left\r\n        this._drawImage(context, sx, sy, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidthAdjusted, topHeightAdjusted);\r\n        //Top\r\n        this._drawImage(context, sx + this._sliceLeft, sy, centerWidth, topHeight, centerLeftOffset + 1, this._currentMeasure.top, targetCenterWidth - 2, topHeightAdjusted);\r\n        //Top Right\r\n        this._drawImage(context, sx + this._sliceRight, sy, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidthAdjusted, topHeightAdjusted);\r\n        //Left\r\n        this._drawImage(context, sx, sy + this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset + 1, leftWidthAdjusted, targetCenterHeight - 2);\r\n        // Center\r\n        this._drawImage(\r\n            context,\r\n            sx + this._sliceLeft,\r\n            sy + this._sliceTop,\r\n            centerWidth,\r\n            centerHeight,\r\n            centerLeftOffset + 1,\r\n            centerTopOffset + 1,\r\n            targetCenterWidth - 2,\r\n            targetCenterHeight - 2\r\n        );\r\n        //Right\r\n        this._drawImage(\r\n            context,\r\n            sx + this._sliceRight,\r\n            sy + this._sliceTop,\r\n            rightWidth,\r\n            centerHeight,\r\n            rightOffset,\r\n            centerTopOffset + 1,\r\n            rightWidthAdjusted,\r\n            targetCenterHeight - 2\r\n        );\r\n        //Bottom Left\r\n        this._drawImage(context, sx, sy + this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidthAdjusted, bottomHeightAdjusted);\r\n        //Bottom\r\n        this._drawImage(\r\n            context,\r\n            sx + this.sliceLeft,\r\n            sy + this._sliceBottom,\r\n            centerWidth,\r\n            bottomHeight,\r\n            centerLeftOffset + 1,\r\n            bottomOffset,\r\n            targetCenterWidth - 2,\r\n            bottomHeightAdjusted\r\n        );\r\n        //Bottom Right\r\n        this._drawImage(context, sx + this._sliceRight, sy + this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidthAdjusted, bottomHeightAdjusted);\r\n    }\r\n\r\n    public override dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n        this._removeCacheUsage(this._source);\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\nRegisterClass(\"BABYLON.GUI.Image\", Image);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected override _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     * @param force force serialization even if isSerializable === false\r\n     */\r\n    public override serialize(serializationObject: any, force: boolean) {\r\n        super.serialize(serializationObject, force);\r\n        if (!this.isSerializable && !force) {\r\n            return;\r\n        }\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n","import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public override set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public override get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public override set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public override get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected override _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (!this.ignoreLayoutWarnings && !child.isDimensionFullyDefined(\"height\")) {\r\n                    Logger.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`, 1);\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (!this.ignoreLayoutWarnings && !child.isDimensionFullyDefined(\"width\")) {\r\n                    Logger.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`, 1);\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    private _getManualDim(dim: \"width\" | \"height\") {\r\n        if (dim === \"width\") {\r\n            return this._manualWidth;\r\n        } else {\r\n            return this._manualHeight;\r\n        }\r\n    }\r\n\r\n    public override isDimensionFullyDefined(dim: \"width\" | \"height\"): boolean {\r\n        if (dim === \"height\" ? this.isVertical : !this.isVertical && !this._getManualDim(dim)) {\r\n            for (const child of this._children) {\r\n                if (!child.isDimensionFullyDefined(dim)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return this.getDimension(dim).isPixel || this._getAdaptDimTo(dim);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     * @param force force serialization even if isSerializable === false\r\n     */\r\n    public override serialize(serializationObject: any, force: boolean) {\r\n        super.serialize(serializationObject, force);\r\n        if (!this.isSerializable && !force) {\r\n            return;\r\n        }\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            // Color is white if not set\r\n            context.fillStyle = this._isEnabled ? (this.color ? this.color : \"#ffffff\") : this._disabledColorItem;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offsetHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(\r\n                this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2,\r\n                this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2,\r\n                offsetWidth,\r\n                offsetHeight\r\n            );\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            this.isChecked = !this.isChecked;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\r\n","/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    protected _textWrapper: TextWrapper;\r\n    protected _placeholderText = \"\";\r\n    protected _background = \"#222222\";\r\n    protected _focusedBackground = \"#000000\";\r\n    protected _focusedColor = \"white\";\r\n    protected _placeholderColor = \"gray\";\r\n    protected _thickness = 1;\r\n    protected _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    protected _autoStretchWidth = true;\r\n    protected _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    protected _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    protected _focusedBy: string;\r\n    protected _blinkTimeout: number;\r\n    protected _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    protected _scrollLeft: Nullable<number>;\r\n    protected _textWidth: number;\r\n    protected _clickedCoordinate: Nullable<number>;\r\n    protected _deadKey = false;\r\n    protected _addKey = true;\r\n    protected _currentKey = \"\";\r\n    protected _isTextHighlightOn = false;\r\n    protected _textHighlightColor = \"#d5e0ff\";\r\n    protected _highligherOpacity = 0.4;\r\n    protected _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    protected _onFocusSelectAll = false;\r\n    protected _isPointerDown = false;\r\n    protected _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    protected _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /** Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /** Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key. 0 to disable. */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    protected _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected override _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public override get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public override set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(\r\n        public override name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this.isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this.isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this.isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this.isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n        if (keyCode === 32) {\r\n            key = evt?.key ?? \" \";\r\n        }\r\n        this._deadKey = key === \"Dead\";\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey && !this._deadKey) {\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this.isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += this._deadKey && evt?.key ? evt.key : key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this.isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n\r\n        this.isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this.isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this.isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this.isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font, this._host.getScene()?.getEngine());\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this.isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this.isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this.isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public override _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public override _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private set isTextHighlightOn(value: boolean) {\r\n        if (this._isTextHighlightOn === value) {\r\n            return;\r\n        }\r\n        if (value) {\r\n            this.onTextHighlightObservable.notifyObservers(this);\r\n        }\r\n        this._isTextHighlightOn = value;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private get isTextHighlightOn(): boolean {\r\n        return this._isTextHighlightOn;\r\n    }\r\n\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n","import type { Nullable } from \"core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _rowDefinitionObservers: Observer<void>[] = [];\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitionObservers: Observer<void>[] = [];\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public override set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipContent = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public override get clipContent(): boolean {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public override set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipChildren = value;\r\n        }\r\n    }\r\n\r\n    public override get clipChildren(): boolean {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public override get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (const control of cell.children) {\r\n            const childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (const control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            const key = `${x}:${index}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                const previousKey = `${x}:${y - 1}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions.splice(index, 1);\r\n        this._columnDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            const key = `${index}:${y}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                const previousKey = `${x - 1}:${y}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions.splice(index, 1);\r\n        this._rowDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public override addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        const x = Math.min(row, this._rowDefinitions.length - 1);\r\n        const y = Math.min(column, this._columnDefinitions.length - 1);\r\n        const key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            goodContainer.clipContent = this.clipContent;\r\n            goodContainer.clipChildren = this.clipChildren;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public override removeControl(control: Control): Container {\r\n        const index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        const cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        const widths = [];\r\n        const heights = [];\r\n        const lefts = [];\r\n        const tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            if (rowDefinition.isPixel) {\r\n                const height = rowDefinition.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += rowDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!rowDefinition.isPixel) {\r\n                const height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += rowDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            if (columnDefinition.isPixel) {\r\n                const width = columnDefinition.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += columnDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!columnDefinition.isPixel) {\r\n                const width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += columnDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (const key in this._cells) {\r\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                    continue;\r\n                }\r\n                const split = key.split(\":\");\r\n                const x = parseInt(split[0]);\r\n                const y = parseInt(split[1]);\r\n                const cell = this._cells[key];\r\n\r\n                cell.leftInPixels = lefts[y];\r\n                cell.topInPixels = tops[x];\r\n                cell.widthInPixels = widths[y];\r\n                cell.heightInPixels = heights[x];\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public override _flagDescendantsAsMatrixDirty(): void {\r\n        for (const key in this._cells) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                continue;\r\n            }\r\n\r\n            const child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public override _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Columns\r\n            for (let index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (let index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        for (const control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\r\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        }\r\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\r\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        }\r\n        this._rowDefinitionObservers.length = 0;\r\n        this._rowDefinitions.length = 0;\r\n        this._columnDefinitionObservers.length = 0;\r\n        this._columnDefinitions.length = 0;\r\n        this._cells = {};\r\n        this._childControls.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     * @param force force serialization even if isSerializable === false\r\n     */\r\n    public override serialize(serializationObject: any, force: boolean) {\r\n        super.serialize(serializationObject, force);\r\n        if (!this.isSerializable && !force) {\r\n            return;\r\n        }\r\n        serializationObject.columnCount = this.columnCount;\r\n        serializationObject.rowCount = this.rowCount;\r\n        serializationObject.columns = [];\r\n        serializationObject.rows = [];\r\n        serializationObject.tags = [];\r\n        for (let i = 0; i < this.columnCount; ++i) {\r\n            const cd = this.getColumnDefinition(i);\r\n            const childSerializationObject = { value: cd?.getValue(this.host), unit: cd?.unit };\r\n            serializationObject.columns.push(childSerializationObject);\r\n        }\r\n        for (let i = 0; i < this.rowCount; ++i) {\r\n            const rd = this.getRowDefinition(i);\r\n            const childSerializationObject = { value: rd?.getValue(this.host), unit: rd?.unit };\r\n            serializationObject.rows.push(childSerializationObject);\r\n        }\r\n        this.children.forEach((child) => {\r\n            serializationObject.tags.push(child._tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        const children: Control[] = [];\r\n        this.children.forEach((child) => {\r\n            children.push(child);\r\n        });\r\n        this.removeRowDefinition(0);\r\n        this.removeColumnDefinition(0);\r\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\r\n            const columnValue = serializedObject.columns[i].value;\r\n            const unit = serializedObject.columns[i].unit;\r\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\r\n        }\r\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\r\n            const rowValue = serializedObject.rows[i].value;\r\n            const unit = serializedObject.rows[i].unit;\r\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\r\n        }\r\n\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const cellInfo = serializedObject.tags[i];\r\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\r\n            if (isNaN(rowNumber)) {\r\n                rowNumber = 0;\r\n            }\r\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\r\n            if (isNaN(columnNumber)) {\r\n                columnNumber = 0;\r\n            }\r\n            this.addControl(children[i], rowNumber, columnNumber);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \"../controls/textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: ICanvas;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    @serialize()\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._value.toHSVToRef(this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public override get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public override set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            if (this._width.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._width.fromString(value);\r\n            }\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public override get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public override set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            if (this._height.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._height.fromString(value);\r\n            }\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    @serialize()\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n        this.value = new Color3(0.88, 0.1, 0.1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _preMeasure(parentMeasure: Measure): void {\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerDiameter = (radius - wheelThickness) * 2;\r\n        const squareSize = innerDiameter / Math.sqrt(2);\r\n        const offset = radius - squareSize * 0.5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: ICanvasRenderingContext) {\r\n        const lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, \"#fff\");\r\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        const lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        lgv.addColorStop(1, \"#000\");\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: ICanvasRenderingContext) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#333333\";\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#ffffff\";\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): ICanvas {\r\n        // Shoudl abstract platform instead of using LastCreatedEngine\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\r\n        const context = canvas.getContext(\"2d\");\r\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        const data = image.data;\r\n\r\n        const color = this._tmpColor;\r\n        const maxDistSq = radius * radius;\r\n        const innerRadius = radius - thickness;\r\n        const minDistSq = innerRadius * innerRadius;\r\n\r\n        for (let x = -radius; x < radius; x++) {\r\n            for (let y = -radius; y < radius; y++) {\r\n                const distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                const dist = Math.sqrt(distSq);\r\n                const ang = Math.atan2(y, x);\r\n\r\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                let alphaAmount = 0.2;\r\n                const maxAlpha = 0.2;\r\n                const minAlpha = 0.04;\r\n                const lowerRadius = 50;\r\n                const upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const left = this._currentMeasure.left;\r\n        const top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\r\n\r\n        let cx = this._squareLeft + this._squareSize * this._s;\r\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * 0.04, context);\r\n\r\n        const dist = radius - wheelThickness * 0.5;\r\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\r\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n            const centerX = radius + this._currentMeasure.left;\r\n            const centerY = radius + this._currentMeasure.top;\r\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\r\n        } else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        const left = this._squareLeft;\r\n        const top = this._squareTop;\r\n        const size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const centerX = radius + this._currentMeasure.left;\r\n        const centerY = radius + this._currentMeasure.top;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerRadius = radius - wheelThickness;\r\n        const radiusSq = radius * radius;\r\n        const innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n\r\n        const distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        const x = this._transformedPosition.x;\r\n        const y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public override _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            // Invert transform\r\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n            const x = this._transformedPosition.x;\r\n            const y = this._transformedPosition.y;\r\n\r\n            if (this._pointerIsDown) {\r\n                this._updateValueFromPointer(x, y);\r\n            }\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public override _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    public override _onCanvasBlur() {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n    /**\r\n     * This function expands the color picker by creating a color picker dialog with manual\r\n     * color value input and the ability to save colors into an array to be used later in\r\n     * subsequent launches of the dialogue.\r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\r\n     * @param options.pickerWidth\r\n     * @param options.pickerHeight\r\n     * @param options.headerHeight\r\n     * @param options.lastColor\r\n     * @param options.swatchLimit\r\n     * @param options.numSwatchesPerLine\r\n     * @param options.savedColors\r\n     * @returns picked color as a hex string and the saved colors array as hex strings.\r\n     */\r\n    public static ShowPickerDialogAsync(\r\n        advancedTexture: AdvancedDynamicTexture,\r\n        options: {\r\n            pickerWidth?: string;\r\n            pickerHeight?: string;\r\n            headerHeight?: string;\r\n            lastColor?: string;\r\n            swatchLimit?: number;\r\n            numSwatchesPerLine?: number;\r\n            savedColors?: Array<string>;\r\n        }\r\n    ): Promise<{\r\n        savedColors?: string[];\r\n        pickedColor: string;\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            // Default options\r\n            options.pickerWidth = options.pickerWidth || \"640px\";\r\n            options.pickerHeight = options.pickerHeight || \"400px\";\r\n            options.headerHeight = options.headerHeight || \"35px\";\r\n            options.lastColor = options.lastColor || \"#000000\";\r\n            options.swatchLimit = options.swatchLimit || 20;\r\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\r\n\r\n            // Window size settings\r\n            const drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\r\n            const rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\r\n            const gutterSize: number = Math.floor(rawSwatchSize * 0.25);\r\n            const colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\r\n            const swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\r\n            const drawerMaxSize: number = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\r\n            const containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\r\n\r\n            // Button Colors\r\n            const buttonColor: string = \"#c0c0c0\";\r\n            const buttonBackgroundColor: string = \"#535353\";\r\n            const buttonBackgroundHoverColor: string = \"#414141\";\r\n            const buttonBackgroundClickColor: string = \"515151\";\r\n            const buttonDisabledColor: string = \"#555555\";\r\n            const buttonDisabledBackgroundColor: string = \"#454545\";\r\n            const currentSwatchesOutlineColor: string = \"#404040\";\r\n            const luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\r\n            const luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\r\n            const iconColorDark: string = \"#aaaaaa\";\r\n            const iconColorLight: string = \"#ffffff\";\r\n\r\n            // Button settings\r\n            let buttonFontSize: number;\r\n            let butEdit: Button;\r\n\r\n            // Input Text Colors\r\n            const inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\r\n            const inputTextBackgroundColor: string = \"#454545\";\r\n            const inputTextColor: string = \"#f0f0f0\";\r\n\r\n            // This int is used for naming swatches and serves as the index for calling them from the list\r\n            let swatchNumber: number;\r\n\r\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\r\n            let swatchDrawer: Grid;\r\n            let editSwatchMode: boolean = false;\r\n\r\n            // Color InputText fields that will be updated upon value change\r\n            let butSave: Button;\r\n            let lastVal: string;\r\n            let activeField: string;\r\n\r\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n            const dialogContainer: Grid = new Grid();\r\n            dialogContainer.name = \"Dialog Container\";\r\n            dialogContainer.width = options.pickerWidth;\r\n            if (options.savedColors) {\r\n                dialogContainer.height = containerSize;\r\n                const topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\r\n                dialogContainer.addRowDefinition(topRow, false);\r\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\r\n            } else {\r\n                dialogContainer.height = options.pickerHeight;\r\n                dialogContainer.addRowDefinition(1.0, false);\r\n            }\r\n            advancedTexture.addControl(dialogContainer);\r\n\r\n            // Swatch drawer which contains all saved color buttons\r\n            if (options.savedColors) {\r\n                swatchDrawer = new Grid();\r\n                swatchDrawer.name = \"Swatch Drawer\";\r\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                swatchDrawer.background = buttonBackgroundColor;\r\n                swatchDrawer.width = options.pickerWidth!;\r\n                const initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\r\n                let gutterCount: number;\r\n                if (initialRows == 0) {\r\n                    gutterCount = 0;\r\n                } else {\r\n                    gutterCount = initialRows + 1;\r\n                }\r\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\r\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\r\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addRowDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addRowDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                for (let i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                dialogContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n            // Picker container\r\n            const pickerPanel: Grid = new Grid();\r\n            pickerPanel.name = \"Picker Panel\";\r\n            pickerPanel.height = options.pickerHeight;\r\n            const panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\r\n            const pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\r\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\r\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\r\n            dialogContainer.addControl(pickerPanel, 0, 0);\r\n\r\n            // Picker container header\r\n            const header: Rectangle = new Rectangle();\r\n            header.name = \"Dialogue Header Bar\";\r\n            header.background = \"#cccccc\";\r\n            header.thickness = 0;\r\n            pickerPanel.addControl(header, 0, 0);\r\n\r\n            // Header close button\r\n            const closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\r\n            closeButton.fontFamily = \"coreglyphs\";\r\n            const headerColor3: Color3 = Color3.FromHexString(header.background);\r\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\r\n            closeButton.color = closeIconColor.toHexString();\r\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\r\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n            closeButton.height = closeButton.width = options.headerHeight;\r\n            closeButton.background = header.background;\r\n            closeButton.thickness = 0;\r\n            closeButton.pointerDownAnimation = () => {};\r\n            closeButton.pointerUpAnimation = () => {\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.pointerEnterAnimation = () => {\r\n                closeButton.color = header.background;\r\n                closeButton.background = \"red\";\r\n            };\r\n            closeButton.pointerOutAnimation = () => {\r\n                closeButton.color = closeIconColor.toHexString();\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.onPointerClickObservable.add(() => {\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            pickerPanel.addControl(closeButton, 0, 0);\r\n\r\n            // Dialog container body\r\n            const dialogBody: Grid = new Grid();\r\n            dialogBody.name = \"Dialogue Body\";\r\n            dialogBody.background = buttonBackgroundColor;\r\n            const dialogBodyCols: number[] = [0.4375, 0.5625];\r\n            dialogBody.addRowDefinition(1.0, false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\r\n            pickerPanel.addControl(dialogBody, 1, 0);\r\n\r\n            // Picker grid\r\n            const pickerGrid: Grid = new Grid();\r\n            pickerGrid.name = \"Picker Grid\";\r\n            pickerGrid.addRowDefinition(0.85, false);\r\n            pickerGrid.addRowDefinition(0.15, false);\r\n            dialogBody.addControl(pickerGrid, 0, 0);\r\n\r\n            //  Picker control\r\n            const picker = new ColorPicker();\r\n            picker.name = \"GUI Color Picker\";\r\n            if (options.pickerHeight < options.pickerWidth) {\r\n                picker.width = 0.89;\r\n            } else {\r\n                picker.height = 0.89;\r\n            }\r\n            picker.value = Color3.FromHexString(options.lastColor);\r\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            picker.onPointerDownObservable.add(() => {\r\n                activeField = picker.name!;\r\n                lastVal = \"\";\r\n                editSwatches(false);\r\n            });\r\n            picker.onValueChangedObservable.add(function (value) {\r\n                // value is a color3\r\n                if (activeField == picker.name) {\r\n                    updateValues(value, picker.name);\r\n                }\r\n            });\r\n            pickerGrid.addControl(picker, 0, 0);\r\n\r\n            // Picker body right quarant\r\n            const pickerBodyRight: Grid = new Grid();\r\n            pickerBodyRight.name = \"Dialogue Right Half\";\r\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            const pickerBodyRightRows: number[] = [0.514, 0.486];\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\r\n            dialogBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n            // Picker container swatches and buttons\r\n            const pickerSwatchesButtons: Grid = new Grid();\r\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n            const pickerButtonsCol: number[] = [0.417, 0.583];\r\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\r\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n            // Picker Swatches quadrant\r\n            const pickerSwatches: Grid = new Grid();\r\n            pickerSwatches.name = \"New and Current Swatches\";\r\n            const pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\r\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n            // Active swatches\r\n            const activeSwatches: Grid = new Grid();\r\n            activeSwatches.name = \"Active Swatches\";\r\n            activeSwatches.width = 0.67;\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            pickerSwatches.addControl(activeSwatches, 2, 0);\r\n\r\n            const labelWidth: number = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\r\n            const labelHeight: number = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\r\n\r\n            let labelTextSize: number;\r\n            if (options.pickerWidth > options.pickerHeight) {\r\n                labelTextSize = labelHeight;\r\n            } else {\r\n                labelTextSize = labelWidth;\r\n            }\r\n            // New color swatch and previous color button\r\n            const newText: TextBlock = new TextBlock();\r\n            newText.text = \"new\";\r\n            newText.name = \"New Color Label\";\r\n            newText.color = buttonColor;\r\n            newText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(newText, 1, 0);\r\n\r\n            const newSwatch = new Rectangle();\r\n            newSwatch.name = \"New Color Swatch\";\r\n            newSwatch.background = options.lastColor;\r\n            newSwatch.thickness = 0;\r\n            activeSwatches.addControl(newSwatch, 0, 0);\r\n\r\n            const currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n            currentSwatch.background = options.lastColor;\r\n            currentSwatch.thickness = 0;\r\n            currentSwatch.onPointerClickObservable.add(() => {\r\n                const revertColor = Color3.FromHexString(currentSwatch.background);\r\n                updateValues(revertColor, currentSwatch.name!);\r\n                editSwatches(false);\r\n            });\r\n            currentSwatch.pointerDownAnimation = () => {};\r\n            currentSwatch.pointerUpAnimation = () => {};\r\n            currentSwatch.pointerEnterAnimation = () => {};\r\n            currentSwatch.pointerOutAnimation = () => {};\r\n            activeSwatches.addControl(currentSwatch, 1, 0);\r\n\r\n            const swatchOutline: Rectangle = new Rectangle();\r\n            swatchOutline.name = \"Swatch Outline\";\r\n            swatchOutline.width = 0.67;\r\n            swatchOutline.thickness = 2;\r\n            swatchOutline.color = currentSwatchesOutlineColor;\r\n            swatchOutline.isHitTestVisible = false;\r\n            pickerSwatches.addControl(swatchOutline, 2, 0);\r\n\r\n            const currentText: TextBlock = new TextBlock();\r\n            currentText.name = \"Current Color Label\";\r\n            currentText.text = \"current\";\r\n            currentText.color = buttonColor;\r\n            currentText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(currentText, 3, 0);\r\n\r\n            // Buttons grid\r\n            const buttonGrid: Grid = new Grid();\r\n            buttonGrid.name = \"Button Grid\";\r\n            buttonGrid.height = 0.8;\r\n            const buttonGridRows: number = 1 / 3;\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\r\n\r\n            // Determine pixel width and height for all buttons from overall panel dimensions\r\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\r\n            const buttonHeight =\r\n                Math.floor(\r\n                    parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7\r\n                ).toString() + \"px\";\r\n\r\n            // Determine button type size\r\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\r\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\r\n            } else {\r\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\r\n            }\r\n\r\n            // Panel Buttons\r\n            const butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n            butOK.width = buttonWidth;\r\n            butOK.height = buttonHeight;\r\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butOK.thickness = 2;\r\n            butOK.color = buttonColor;\r\n            butOK.fontSize = buttonFontSize;\r\n            butOK.background = buttonBackgroundColor;\r\n            butOK.onPointerEnterObservable.add(() => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            });\r\n            butOK.onPointerOutObservable.add(() => {\r\n                butOK.background = buttonBackgroundColor;\r\n            });\r\n            butOK.pointerDownAnimation = () => {\r\n                butOK.background = buttonBackgroundClickColor;\r\n            };\r\n            butOK.pointerUpAnimation = () => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            };\r\n            butOK.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(newSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butOK, 0, 0);\r\n\r\n            const butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n            butCancel.width = buttonWidth;\r\n            butCancel.height = buttonHeight;\r\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butCancel.thickness = 2;\r\n            butCancel.color = buttonColor;\r\n            butCancel.fontSize = buttonFontSize;\r\n            butCancel.background = buttonBackgroundColor;\r\n            butCancel.onPointerEnterObservable.add(() => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            });\r\n            butCancel.onPointerOutObservable.add(() => {\r\n                butCancel.background = buttonBackgroundColor;\r\n            });\r\n            butCancel.pointerDownAnimation = () => {\r\n                butCancel.background = buttonBackgroundClickColor;\r\n            };\r\n            butCancel.pointerUpAnimation = () => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            };\r\n            butCancel.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butCancel, 1, 0);\r\n\r\n            if (options.savedColors) {\r\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\r\n                butSave.width = buttonWidth;\r\n                butSave.height = buttonHeight;\r\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                butSave.thickness = 2;\r\n                butSave.fontSize = buttonFontSize;\r\n                if (options.savedColors.length < options.swatchLimit!) {\r\n                    butSave.color = buttonColor;\r\n                    butSave.background = buttonBackgroundColor;\r\n                } else {\r\n                    disableButton(butSave, true);\r\n                }\r\n                butSave.onPointerEnterObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.onPointerOutObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.pointerDownAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundClickColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.pointerUpAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.onPointerClickObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length == 0) {\r\n                            setEditButtonVisibility(true);\r\n                        }\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            updateSwatches(newSwatch.background, butSave);\r\n                        }\r\n                        editSwatches(false);\r\n                    }\r\n                });\r\n                if (options.savedColors.length > 0) {\r\n                    setEditButtonVisibility(true);\r\n                }\r\n                buttonGrid.addControl(butSave, 2, 0);\r\n            }\r\n\r\n            // Picker color values input\r\n            const pickerColorValues: Grid = new Grid();\r\n            pickerColorValues.name = \"Dialog Lower Right\";\r\n            pickerColorValues.addRowDefinition(0.02, false);\r\n            pickerColorValues.addRowDefinition(0.63, false);\r\n            pickerColorValues.addRowDefinition(0.21, false);\r\n            pickerColorValues.addRowDefinition(0.14, false);\r\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n            // RGB values text boxes\r\n            const currentColor = Color3.FromHexString(options.lastColor);\r\n            const rgbValuesQuadrant: Grid = new Grid();\r\n            rgbValuesQuadrant.name = \"RGB Values\";\r\n            rgbValuesQuadrant.width = 0.82;\r\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n            for (let i = 0; i < inputFieldLabels.length; i++) {\r\n                const labelText: TextBlock = new TextBlock();\r\n                labelText.text = inputFieldLabels[i];\r\n                labelText.color = buttonColor;\r\n                labelText.fontSize = buttonFontSize;\r\n                rgbValuesQuadrant.addControl(labelText, i, 0);\r\n            }\r\n\r\n            // Input fields for RGB values\r\n            const rValInt = new InputText();\r\n            rValInt.width = 0.83;\r\n            rValInt.height = 0.72;\r\n            rValInt.name = \"rIntField\";\r\n            rValInt.fontSize = buttonFontSize;\r\n            rValInt.text = (currentColor.r * 255).toString();\r\n            rValInt.color = inputTextColor;\r\n            rValInt.background = inputTextBackgroundColor;\r\n            rValInt.onFocusObservable.add(() => {\r\n                activeField = rValInt.name!;\r\n                lastVal = rValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            rValInt.onBlurObservable.add(() => {\r\n                if (rValInt.text == \"\") {\r\n                    rValInt.text = \"0\";\r\n                }\r\n                updateInt(rValInt, \"r\");\r\n                if (activeField == rValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == rValInt.name) {\r\n                    updateInt(rValInt, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n            const gValInt = new InputText();\r\n            gValInt.width = 0.83;\r\n            gValInt.height = 0.72;\r\n            gValInt.name = \"gIntField\";\r\n            gValInt.fontSize = buttonFontSize;\r\n            gValInt.text = (currentColor.g * 255).toString();\r\n            gValInt.color = inputTextColor;\r\n            gValInt.background = inputTextBackgroundColor;\r\n            gValInt.onFocusObservable.add(() => {\r\n                activeField = gValInt.name!;\r\n                lastVal = gValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            gValInt.onBlurObservable.add(() => {\r\n                if (gValInt.text == \"\") {\r\n                    gValInt.text = \"0\";\r\n                }\r\n                updateInt(gValInt, \"g\");\r\n                if (activeField == gValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == gValInt.name) {\r\n                    updateInt(gValInt, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n            const bValInt = new InputText();\r\n            bValInt.width = 0.83;\r\n            bValInt.height = 0.72;\r\n            bValInt.name = \"bIntField\";\r\n            bValInt.fontSize = buttonFontSize;\r\n            bValInt.text = (currentColor.b * 255).toString();\r\n            bValInt.color = inputTextColor;\r\n            bValInt.background = inputTextBackgroundColor;\r\n            bValInt.onFocusObservable.add(() => {\r\n                activeField = bValInt.name!;\r\n                lastVal = bValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            bValInt.onBlurObservable.add(() => {\r\n                if (bValInt.text == \"\") {\r\n                    bValInt.text = \"0\";\r\n                }\r\n                updateInt(bValInt, \"b\");\r\n                if (activeField == bValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == bValInt.name) {\r\n                    updateInt(bValInt, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n            const rValDec = new InputText();\r\n            rValDec.width = 0.95;\r\n            rValDec.height = 0.72;\r\n            rValDec.name = \"rDecField\";\r\n            rValDec.fontSize = buttonFontSize;\r\n            rValDec.text = currentColor.r.toString();\r\n            rValDec.color = inputTextColor;\r\n            rValDec.background = inputTextBackgroundColor;\r\n            rValDec.onFocusObservable.add(() => {\r\n                activeField = rValDec.name!;\r\n                lastVal = rValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            rValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\r\n                    rValDec.text = \"0\";\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n                if (activeField == rValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == rValDec.name) {\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n            const gValDec = new InputText();\r\n            gValDec.width = 0.95;\r\n            gValDec.height = 0.72;\r\n            gValDec.name = \"gDecField\";\r\n            gValDec.fontSize = buttonFontSize;\r\n            gValDec.text = currentColor.g.toString();\r\n            gValDec.color = inputTextColor;\r\n            gValDec.background = inputTextBackgroundColor;\r\n            gValDec.onFocusObservable.add(() => {\r\n                activeField = gValDec.name!;\r\n                lastVal = gValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            gValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\r\n                    gValDec.text = \"0\";\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n                if (activeField == gValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == gValDec.name) {\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n            const bValDec = new InputText();\r\n            bValDec.width = 0.95;\r\n            bValDec.height = 0.72;\r\n            bValDec.name = \"bDecField\";\r\n            bValDec.fontSize = buttonFontSize;\r\n            bValDec.text = currentColor.b.toString();\r\n            bValDec.color = inputTextColor;\r\n            bValDec.background = inputTextBackgroundColor;\r\n            bValDec.onFocusObservable.add(() => {\r\n                activeField = bValDec.name!;\r\n                lastVal = bValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            bValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\r\n                    bValDec.text = \"0\";\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n                if (activeField == bValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == bValDec.name) {\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n            // Hex value input\r\n            const hexValueQuadrant: Grid = new Grid();\r\n            hexValueQuadrant.name = \"Hex Value\";\r\n            hexValueQuadrant.width = 0.82;\r\n            hexValueQuadrant.addRowDefinition(1.0, false);\r\n            hexValueQuadrant.addColumnDefinition(0.1, false);\r\n            hexValueQuadrant.addColumnDefinition(0.9, false);\r\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n            const labelText: TextBlock = new TextBlock();\r\n            labelText.text = \"#\";\r\n            labelText.color = buttonColor;\r\n            labelText.fontSize = buttonFontSize;\r\n            hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n            const hexVal = new InputText();\r\n            hexVal.width = 0.96;\r\n            hexVal.height = 0.72;\r\n            hexVal.name = \"hexField\";\r\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            hexVal.fontSize = buttonFontSize;\r\n            const minusPound = options.lastColor.split(\"#\");\r\n            hexVal.text = minusPound[1];\r\n            hexVal.color = inputTextColor;\r\n            hexVal.background = inputTextBackgroundColor;\r\n            hexVal.onFocusObservable.add(() => {\r\n                activeField = hexVal.name!;\r\n                lastVal = hexVal.text;\r\n                editSwatches(false);\r\n            });\r\n            hexVal.onBlurObservable.add(() => {\r\n                if (hexVal.text.length == 3) {\r\n                    const val = hexVal.text.split(\"\");\r\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                if (hexVal.text == \"\") {\r\n                    hexVal.text = \"000000\";\r\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\r\n                }\r\n                if (activeField == hexVal.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            hexVal.onTextChangedObservable.add(() => {\r\n                let newHexValue: string = hexVal.text;\r\n                const checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\r\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                    hexVal.text = lastVal;\r\n                } else {\r\n                    if (hexVal.text.length < 6) {\r\n                        const leadingZero: number = 6 - hexVal.text.length;\r\n                        for (let i = 0; i < leadingZero; i++) {\r\n                            newHexValue = \"0\" + newHexValue;\r\n                        }\r\n                    }\r\n                    if (hexVal.text.length == 3) {\r\n                        const val: string[] = hexVal.text.split(\"\");\r\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                    }\r\n                    newHexValue = \"#\" + newHexValue;\r\n                    if (activeField == hexVal.name) {\r\n                        lastVal = hexVal.text;\r\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\r\n                    }\r\n                }\r\n            });\r\n            hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n            if (options.savedColors && options.savedColors.length > 0) {\r\n                updateSwatches(\"\", butSave!);\r\n            }\r\n\r\n            /**\r\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n             * are will receive no update. This is to prevent the input from the user being overwritten.\r\n             * @param value\r\n             * @param inputField\r\n             */\r\n            function updateValues(value: Color3, inputField: string) {\r\n                activeField = inputField;\r\n                const pickedColor: string = value.toHexString();\r\n                newSwatch.background = pickedColor;\r\n                if (rValInt.name != activeField) {\r\n                    rValInt.text = Math.floor(value.r * 255).toString();\r\n                }\r\n                if (gValInt.name != activeField) {\r\n                    gValInt.text = Math.floor(value.g * 255).toString();\r\n                }\r\n                if (bValInt.name != activeField) {\r\n                    bValInt.text = Math.floor(value.b * 255).toString();\r\n                }\r\n                if (rValDec.name != activeField) {\r\n                    rValDec.text = value.r.toString();\r\n                }\r\n                if (gValDec.name != activeField) {\r\n                    gValDec.text = value.g.toString();\r\n                }\r\n                if (bValDec.name != activeField) {\r\n                    bValDec.text = value.b.toString();\r\n                }\r\n                if (hexVal.name != activeField) {\r\n                    const minusPound: string[] = pickedColor.split(\"#\");\r\n                    hexVal.text = minusPound[1];\r\n                }\r\n                if (picker.name != activeField) {\r\n                    picker.value = value;\r\n                }\r\n            }\r\n\r\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateInt(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\") {\r\n                        if (Math.floor(parseInt(newValue)) < 0) {\r\n                            newValue = \"0\";\r\n                        } else if (Math.floor(parseInt(newValue)) > 255) {\r\n                            newValue = \"255\";\r\n                        } else if (isNaN(parseInt(newValue))) {\r\n                            newValue = \"0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\") {\r\n                    newValue = parseInt(newValue).toString();\r\n                    field.text = newValue;\r\n                    const newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\r\n                    if (activeField == field.name) {\r\n                        if (channel == \"r\") {\r\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                        } else if (channel == \"g\") {\r\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\r\n                        } else {\r\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateFloat(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9.]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                        if (parseFloat(newValue) < 0.0) {\r\n                            newValue = \"0.0\";\r\n                        } else if (parseFloat(newValue) > 1.0) {\r\n                            newValue = \"1.0\";\r\n                        } else if (isNaN(parseFloat(newValue))) {\r\n                            newValue = \"0.0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    newValue = parseFloat(newValue).toString();\r\n                    field.text = newValue;\r\n                } else {\r\n                    newValue = \"0.0\";\r\n                }\r\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\") {\r\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                    } else if (channel == \"g\") {\r\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\r\n                    } else {\r\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\r\n            function deleteSwatch(index: number) {\r\n                if (options.savedColors) {\r\n                    options.savedColors.splice(index, 1);\r\n                }\r\n                if (options.savedColors && options.savedColors.length == 0) {\r\n                    setEditButtonVisibility(false);\r\n                    editSwatchMode = false;\r\n                }\r\n            }\r\n\r\n            // Creates and styles an individual swatch when updateSwatches is called.\r\n            function createSwatch() {\r\n                if (options.savedColors && options.savedColors[swatchNumber]) {\r\n                    let icon: string;\r\n                    if (editSwatchMode) {\r\n                        icon = \"b\";\r\n                    } else {\r\n                        icon = \"\";\r\n                    }\r\n                    const swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                    swatch.fontFamily = \"coreglyphs\";\r\n                    const swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\r\n                    const swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\r\n\r\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\r\n                    if (swatchLuminence > luminanceLimit) {\r\n                        swatch.color = iconColorDark;\r\n                    } else {\r\n                        swatch.color = iconColorLight;\r\n                    }\r\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\r\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\r\n                    swatch.background = options.savedColors[swatchNumber];\r\n                    swatch.thickness = 2;\r\n                    const metadata = swatchNumber;\r\n                    swatch.pointerDownAnimation = () => {\r\n                        swatch.thickness = 4;\r\n                    };\r\n                    swatch.pointerUpAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerEnterAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerOutAnimation = () => {\r\n                        swatch.thickness = 2;\r\n                    };\r\n                    swatch.onPointerClickObservable.add(() => {\r\n                        if (!editSwatchMode) {\r\n                            if (options.savedColors) {\r\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\r\n                            }\r\n                        } else {\r\n                            deleteSwatch(metadata);\r\n                            updateSwatches(\"\", butSave);\r\n                        }\r\n                    });\r\n                    return swatch;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Mode switch to render button text and close symbols on swatch controls\r\n            function editSwatches(mode?: boolean) {\r\n                if (mode !== undefined) {\r\n                    editSwatchMode = mode;\r\n                }\r\n                let thisButton: Button;\r\n                if (editSwatchMode) {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"b\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Done\";\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Edit\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\r\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\r\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\r\n             * saved colors there are and how many can be stored per row.\r\n             * @param color\r\n             * @param button\r\n             */\r\n            function updateSwatches(color: string, button: Button) {\r\n                if (options.savedColors) {\r\n                    if (color != \"\") {\r\n                        options.savedColors.push(color);\r\n                    }\r\n                    swatchNumber = 0;\r\n                    swatchDrawer.clearControls();\r\n                    const rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\r\n                    let gutterCount: number;\r\n                    if (rowCount == 0) {\r\n                        gutterCount = 0;\r\n                    } else {\r\n                        gutterCount = rowCount + 1;\r\n                    }\r\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\r\n                        const currentRows: number = swatchDrawer.rowCount;\r\n                        for (let i = 0; i < currentRows; i++) {\r\n                            swatchDrawer.removeRowDefinition(0);\r\n                        }\r\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\r\n                            if (i % 2) {\r\n                                swatchDrawer.addRowDefinition(swatchSize, true);\r\n                            } else {\r\n                                swatchDrawer.addRowDefinition(gutterSize, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\r\n\r\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\r\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                        let totalButtonsThisRow: number;\r\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\r\n                            totalButtonsThisRow = options.numSwatchesPerLine!;\r\n                        } else {\r\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine!;\r\n                        }\r\n                        const buttonIterations: number = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!);\r\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\r\n                            if (x > options.numSwatchesPerLine!) {\r\n                                continue;\r\n                            }\r\n                            const swatch: Button | null = createSwatch();\r\n                            if (swatch != null) {\r\n                                swatchDrawer.addControl(swatch, y, w);\r\n                                w += 2;\r\n                                swatchNumber++;\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (options.savedColors.length >= options.swatchLimit!) {\r\n                        disableButton(button, true);\r\n                    } else {\r\n                        disableButton(button, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Shows or hides edit swatches button depending on if there are saved swatches\r\n            function setEditButtonVisibility(enableButton: boolean) {\r\n                if (enableButton) {\r\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\r\n                    butEdit.width = buttonWidth;\r\n                    butEdit.height = buttonHeight;\r\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\r\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\r\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    butEdit.thickness = 2;\r\n                    butEdit.color = buttonColor;\r\n                    butEdit.fontSize = buttonFontSize;\r\n                    butEdit.background = buttonBackgroundColor;\r\n                    butEdit.onPointerEnterObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    });\r\n                    butEdit.onPointerOutObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundColor;\r\n                    });\r\n                    butEdit.pointerDownAnimation = () => {\r\n                        butEdit.background = buttonBackgroundClickColor;\r\n                    };\r\n                    butEdit.pointerUpAnimation = () => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    };\r\n                    butEdit.onPointerClickObservable.add(() => {\r\n                        if (editSwatchMode) {\r\n                            editSwatchMode = false;\r\n                        } else {\r\n                            editSwatchMode = true;\r\n                        }\r\n                        editSwatches();\r\n                    });\r\n                    pickerGrid.addControl(butEdit, 1, 0);\r\n                } else {\r\n                    pickerGrid.removeControl(butEdit);\r\n                }\r\n            }\r\n\r\n            // Called when the user hits the limit of saved colors in the drawer.\r\n            function disableButton(button: Button, disabled: boolean) {\r\n                if (disabled) {\r\n                    button.color = buttonDisabledColor;\r\n                    button.background = buttonDisabledBackgroundColor;\r\n                } else {\r\n                    button.color = buttonColor;\r\n                    button.background = buttonBackgroundColor;\r\n                }\r\n            }\r\n\r\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n            function closePicker(color: string) {\r\n                if (options.savedColors && options.savedColors.length > 0) {\r\n                    resolve({\r\n                        savedColors: options.savedColors,\r\n                        pickedColor: color,\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        pickedColor: color,\r\n                    });\r\n                }\r\n                advancedTexture.removeControl(dialogContainer);\r\n            }\r\n        });\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\r\n","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected override _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected override _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public override _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputTextArea extends InputText {\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    private _prevText: string = this.text;\r\n\r\n    private _lines: any[];\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n\r\n    private _clipTextTop: number;\r\n    private _clipTextLeft: number;\r\n\r\n    private _cursorInfo: { globalStartIndex: number; globalEndIndex: number; relativeStartIndex: number; relativeEndIndex: number; currentLineIndex: number };\r\n    private _highlightCursorInfo: { initialStartIndex: number; initialRelativeStartIndex: number; initialLineIndex: number };\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<InputTextArea>();\r\n\r\n    /** @internal */\r\n    public override _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n    private _contextForBreakLines: ICanvasRenderingContext;\r\n    private _clickedCoordinateX: Nullable<number>;\r\n    private _clickedCoordinateY: Nullable<number>;\r\n\r\n    private _availableWidth: number;\r\n    private _availableHeight: number;\r\n\r\n    private _scrollTop: Nullable<number>;\r\n\r\n    private _autoStretchHeight: boolean;\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchHeight(): boolean {\r\n        return this._autoStretchHeight;\r\n    }\r\n\r\n    public set autoStretchHeight(value: boolean) {\r\n        if (this._autoStretchHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public override set height(value: string | number) {\r\n        this.fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this._autoStretchHeight = false;\r\n    }\r\n\r\n    @serialize()\r\n    public get maxHeight(): string | number {\r\n        return this._maxHeight.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxHeightInPixels(): number {\r\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set maxHeight(value: string | number) {\r\n        if (this._maxHeight.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxHeight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputTextArea\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(\r\n        public override name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n\r\n        this.isPointerBlocker = true;\r\n\r\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: -1,\r\n            initialRelativeStartIndex: -1,\r\n            initialLineIndex: -1,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: 0,\r\n            relativeEndIndex: 0,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: 0,\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"InputTextArea\";\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public override processKeyboard(evt: IKeyboardEvent): void {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        // process pressed key\r\n        this.alternativeProcessKey(evt.code, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * Process the last keyboard input\r\n     *\r\n     * @param code The ascii input number\r\n     * @param key The key string representation\r\n     * @param evt The keyboard event emits with input\r\n     * @internal\r\n     */\r\n    public alternativeProcessKey(code: string, key?: string, evt?: IKeyboardEvent) {\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\r\n            return;\r\n        }\r\n\r\n        // Specific cases\r\n        switch (code) {\r\n            case \"KeyA\": // A - select all\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._selectAllText();\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                break;\r\n            case \"Period\": //SLASH\r\n                if (evt && evt.shiftKey) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case \"Backspace\": // BACKSPACE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n                this._prevText = this._textWrapper.text;\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Delete\": // DELETE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\r\n                }\r\n                this._prevText = this._textWrapper.text;\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Enter\": // RETURN\r\n                this._prevText = this._textWrapper.text;\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\r\n                this._cursorInfo.globalStartIndex++;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                return;\r\n            case \"End\": // END\r\n                this._cursorInfo.globalStartIndex = this.text.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"Home\": // HOME\r\n                this._cursorInfo.globalStartIndex = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowLeft\": // LEFT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\r\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalStartIndex--;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalEndIndex--;\r\n                        } else {\r\n                            this._cursorInfo.globalStartIndex--;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    // ctr + <-\r\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                    evt.preventDefault();\r\n                } else if (this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowRight\": // RIGHT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\r\n                        this._cursorInfo.globalEndIndex += rightDelta;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalEndIndex++;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalStartIndex++;\r\n                        } else {\r\n                            this._cursorInfo.globalEndIndex++;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    //ctr + ->\r\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\r\n                    this._cursorInfo.globalStartIndex += rightDelta;\r\n                } else if (this._cursorInfo.globalStartIndex < this.text.length) {\r\n                    this._cursorInfo.globalStartIndex++;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowUp\": // UP\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === 0) {\r\n                    // First line\r\n                    this._cursorInfo.globalStartIndex = 0;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let upperWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex -= relativeIndex; // Start of current line\r\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\r\n                    let upperLineRelativeIndex = 0;\r\n\r\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\r\n                        tmpIndex++;\r\n                        upperLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - upperWidth);\r\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowDown\": // DOWN\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\r\n                    // Last line\r\n                    this._cursorInfo.globalStartIndex = this.text.length;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let underWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\r\n                    let underLineRelativeIndex = 0;\r\n\r\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\r\n                        tmpIndex++;\r\n                        underLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - underWidth);\r\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\r\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\r\n                        }\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key?.length === 1) {\r\n            evt?.preventDefault();\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                this._isTextHighlightOn = false;\r\n                this._blinkIsEven = false;\r\n                this._prevText = this._textWrapper.text;\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\r\n                this._cursorInfo.globalStartIndex += key.length;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._textHasChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string }[] {\r\n        const lines = [];\r\n        const words = line.split(\" \");\r\n        let lineWidth = 0;\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            const metrics = context.measureText(testLine);\r\n            const testWidth = metrics.width;\r\n            if (testWidth > width) {\r\n                if (n > 0) {\r\n                    // Avoid first word duplication if of too long\r\n                    lineWidth = context.measureText(line).width;\r\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n                }\r\n\r\n                line = words[n];\r\n\r\n                let flushedLine = \"\";\r\n\r\n                line.split(\"\").map((char) => {\r\n                    if (context.measureText(flushedLine + char).width > width) {\r\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\" });\r\n                        flushedLine = \"\";\r\n                    }\r\n                    flushedLine += char;\r\n                });\r\n\r\n                line = flushedLine;\r\n                // Measure remaining characters\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: ICanvasRenderingContext): object[] {\r\n        const lines: { text: string; width: number; lineEnding: string }[] = [];\r\n        const _lines = (this.text || this.placeholderText).split(\"\\n\");\r\n\r\n        if (this.clipContent) {\r\n            for (const _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        lines[lines.length - 1].lineEnding = \"\\n\";\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string } {\r\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\r\n    }\r\n\r\n    /**\r\n     * Processing of child right before the parent measurement update\r\n     *\r\n     * @param parentMeasure The parent measure\r\n     * @param context The rendering canvas\r\n     * @internal\r\n     */\r\n    protected override _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font, this._host.getScene()?.getEngine());\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper).text;\r\n\r\n        // placeholder conditions and color setting\r\n        if (!this.text && this._placeholderText) {\r\n            text = this._placeholderText;\r\n        }\r\n\r\n        // measures the textlength -> this.measure.width\r\n        this._textWidth = context.measureText(text).width;\r\n        // we double up the margin width\r\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n\r\n        if (this._autoStretchWidth) {\r\n            const tmpLines = text.split(\"\\n\");\r\n            const longerString = tmpLines.reduce((acc: string, val: string) => {\r\n                const valueLength = context.measureText(val).width;\r\n                const accLength = context.measureText(acc).width;\r\n                return valueLength > accLength ? val : acc;\r\n            }, \"\");\r\n\r\n            const longerStringWidth = context.measureText(longerString).width;\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\r\n\r\n            this.autoStretchWidth = true;\r\n        }\r\n\r\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._availableWidth, context);\r\n        // can we find a cleaner implementation here?\r\n        this._contextForBreakLines = context;\r\n\r\n        if (this._autoStretchHeight) {\r\n            const textHeight = this._lines.length * this._fontOffset.height;\r\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\r\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\r\n\r\n            this._autoStretchHeight = true;\r\n        }\r\n\r\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\r\n\r\n        if (this._isFocused) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected override _textHasChanged() {\r\n        if (!this._prevText && this._textWrapper.text && this.placeholderText) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n            this._cursorInfo.globalStartIndex = 1;\r\n            this._cursorInfo.globalEndIndex = 1;\r\n            this._cursorInfo.relativeStartIndex = 1;\r\n            this._cursorInfo.relativeEndIndex = 1;\r\n        }\r\n        super._textHasChanged();\r\n    }\r\n\r\n    private _computeScroll() {\r\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n\r\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\r\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\r\n\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = this._clipTextLeft;\r\n        }\r\n\r\n        if (this._isFocused && !this._autoStretchHeight) {\r\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\r\n            const textTop = this._clipTextTop - selectedHeight;\r\n\r\n            if (!this._scrollTop) {\r\n                this._scrollTop = textTop;\r\n            }\r\n        } else {\r\n            this._scrollTop = this._clipTextTop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processing of child after the parent measurement update\r\n     *\r\n     * @internal\r\n     */\r\n    protected override _additionalProcessing(): void {\r\n        // Flush the highlighted text each frame\r\n        this.highlightedText = \"\";\r\n\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = this._scrollLeft as number;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x += 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x += width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x += (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Copy the text in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected override _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n\r\n    /**\r\n     * Cut the text and copy it in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected override _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._prevText = this._textWrapper.text;\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    /**\r\n     * Paste the copied text from the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected override _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._prevText = this._textWrapper.text;\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\r\n\r\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\r\n\r\n        this._cursorInfo.globalStartIndex += deltaIndex;\r\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        this._computeScroll();\r\n\r\n        this._scrollLeft = this._scrollLeft ?? 0;\r\n        this._scrollTop = this._scrollTop ?? 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // sets the color of the rectangle (border if background available)\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        const height = this._currentMeasure.height;\r\n        const width = this._currentMeasure.width;\r\n        let rootY = 0;\r\n\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this.fontStyle;\r\n        if (!this._textWrapper.text && this.placeholderText) {\r\n            context.fillStyle = this._placeholderColor;\r\n        }\r\n        // here we define the visible reactangle to clip it in next line\r\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\r\n        context.clip();\r\n\r\n        // Text\r\n        rootY += this._scrollTop;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Render cursor\r\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\r\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\r\n\r\n                if (cursorLeft < this._clipTextLeft) {\r\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\r\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\r\n\r\n                if (cursorTop < this._clipTextTop) {\r\n                    this._scrollTop += this._clipTextTop - cursorTop;\r\n                    cursorTop = this._clipTextTop;\r\n                    this._markAsDirty();\r\n                } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\r\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\r\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            this._resetBlinking();\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n\r\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n\r\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n\r\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\r\n\r\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\r\n                    const line = this._lines[i];\r\n\r\n                    let highlightRootX = this._scrollLeft as number;\r\n                    switch (this._textHorizontalAlignment) {\r\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                            highlightRootX += 0;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                            highlightRootX += width - line.width;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                            highlightRootX += (width - line.width) / 2;\r\n                            break;\r\n                    }\r\n\r\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\r\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\r\n\r\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\r\n                    const selectedText = line.text.substring(begin, end);\r\n                    const hightlightWidth = context.measureText(selectedText).width;\r\n\r\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\r\n\r\n                    highlightRootY += this._fontOffset.height;\r\n                }\r\n\r\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\r\n                    this._resetBlinking();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n    }\r\n\r\n    private _resetBlinking() {\r\n        clearTimeout(this._blinkTimeout);\r\n        this._blinkTimeout = <any>setTimeout(() => {\r\n            this._blinkIsEven = !this._blinkIsEven;\r\n            this._markAsDirty();\r\n        }, 500);\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinateX = coordinates.x;\r\n        this._clickedCoordinateY = coordinates.y;\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    // for textselection\r\n    public override _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\r\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinateX = coordinates.x;\r\n            this._clickedCoordinateY = coordinates.y;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                this._isTextHighlightOn = true;\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    /**\r\n     * Apply the correct position of cursor according to current modification\r\n     */\r\n    private _updateCursorPosition() {\r\n        if (!this._isFocused) {\r\n            return;\r\n        }\r\n\r\n        if (!this._textWrapper.text && this.placeholderText) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n            this._cursorInfo.globalStartIndex = 0;\r\n            this._cursorInfo.globalEndIndex = 0;\r\n            this._cursorInfo.relativeStartIndex = 0;\r\n            this._cursorInfo.relativeEndIndex = 0;\r\n        } else {\r\n            if (this._clickedCoordinateX && this._clickedCoordinateY) {\r\n                if (!this._isTextHighlightOn) {\r\n                    this._cursorInfo = {\r\n                        globalStartIndex: 0,\r\n                        globalEndIndex: 0,\r\n                        relativeStartIndex: 0,\r\n                        relativeEndIndex: 0,\r\n                        currentLineIndex: 0,\r\n                    };\r\n                }\r\n\r\n                let globalIndex = 0;\r\n                let relativeIndex = 0;\r\n\r\n                const lastClickedCoordinateY = this._clickedCoordinateY - (this._scrollTop as number);\r\n\r\n                const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\r\n                this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\r\n\r\n                let currentSize = 0;\r\n\r\n                const relativeXPosition = this._clickedCoordinateX - (this._scrollLeft ?? 0);\r\n\r\n                let previousDist = 0;\r\n\r\n                for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\r\n                    const line = this._lines[index];\r\n                    globalIndex += line.text.length + line.lineEnding.length;\r\n                }\r\n\r\n                while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\r\n                    relativeIndex++;\r\n                    previousDist = Math.abs(relativeXPosition - currentSize);\r\n                    currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\r\n                }\r\n\r\n                // Find closest move\r\n                if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\r\n                    relativeIndex--;\r\n                }\r\n\r\n                globalIndex += relativeIndex;\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = globalIndex;\r\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                } else {\r\n                    if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                        this._cursorInfo.globalStartIndex = globalIndex;\r\n                        this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = globalIndex;\r\n                        this._cursorInfo.relativeEndIndex = relativeIndex;\r\n                    }\r\n                }\r\n\r\n                // Avoid the caret during highlighting\r\n                this._blinkIsEven = this._isTextHighlightOn;\r\n                this._clickedCoordinateX = null;\r\n                this._clickedCoordinateY = null;\r\n            } else {\r\n                // Standard behavior same as Current line is at least above the initial highlight index\r\n                this._cursorInfo.relativeStartIndex = 0;\r\n                this._cursorInfo.currentLineIndex = 0;\r\n\r\n                let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                let tmpLength = 0;\r\n\r\n                while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                    tmpLength += lineLength;\r\n\r\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                        this._cursorInfo.currentLineIndex++;\r\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                    }\r\n                }\r\n\r\n                this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\r\n\r\n                if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\r\n                    // Current line is at least below the initial highlight index\r\n                    while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\r\n                        tmpLength += lineLength;\r\n\r\n                        if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                            this._cursorInfo.currentLineIndex++;\r\n                            lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                        }\r\n                    }\r\n\r\n                    this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\r\n                } else if (!this._isTextHighlightOn) {\r\n                    this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update all values of cursor information based on cursorIndex value\r\n     *\r\n     * @param offset The index to take care of\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected override _updateValueFromCursorIndex(offset: number) {\r\n        // Override to avoid parent behavior during _onPointerMove\r\n    }\r\n\r\n    /**\r\n     * Select the word immediatly under the cursor on double click\r\n     *\r\n     * @param _evt Pointer informations of double click\r\n     * @internal\r\n     */\r\n    protected override _processDblClick(_evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\r\n            moveRight =\r\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _selectAllText() {\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: 0,\r\n            initialRelativeStartIndex: 0,\r\n            initialLineIndex: 0,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: this._textWrapper.length,\r\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: this._lines.length - 1,\r\n        };\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this.onLinesReadyObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\r\n","import { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected override _getTypeName(): string {\r\n        return \"InputPassword\";\r\n    }\r\n\r\n    protected override _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public override set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public override set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public override _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected override _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public override moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public override _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    };\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number; y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordinates) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: AbstractMesh | Control | { x: string | number; y: string | number }): MultiLinePoint {\r\n        const point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) {\r\n            return point;\r\n        }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        } else if (item instanceof Control) {\r\n            point.control = item;\r\n        } else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        let index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        const point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) {\r\n                point.resetLinks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public override set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public override set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        let first: boolean = true; //first index is not necessarily 0\r\n        let previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            } else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected override _additionalProcessing(): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) {\r\n                this._minX = point._point.x;\r\n            }\r\n            if (this._minY == null || point._point.y < this._minY) {\r\n                this._minY = point._point.y;\r\n            }\r\n            if (this._maxX == null || point._point.x > this._maxX) {\r\n                this._maxX = point._point.x;\r\n            }\r\n            if (this._maxY == null || point._point.y > this._maxY) {\r\n                this._maxY = point._point.y;\r\n            }\r\n        });\r\n\r\n        if (this._minX == null) {\r\n            this._minX = 0;\r\n        }\r\n        if (this._minY == null) {\r\n            this._minY = 0;\r\n        }\r\n        if (this._maxX == null) {\r\n            this._maxX = 0;\r\n        }\r\n        if (this._maxY == null) {\r\n            this._maxY = 0;\r\n        }\r\n    }\r\n\r\n    public override _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected override _computeAlignment(): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    @serialize()\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                const childRadio = <RadioButton>control;\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(\r\n                this._currentMeasure.left + this._currentMeasure.width / 2,\r\n                this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2,\r\n                offseHeight / 2 - this._thickness / 2,\r\n                context\r\n            );\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the slider value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    @serialize()\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    @serialize()\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    @serialize()\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    @serialize()\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    @serialize()\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    @serialize()\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    @serialize()\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        let thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\r\n            Logger.Error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        } else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n        } else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += this._effectiveThumbThickness / 2;\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\r\n        } else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public override _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown && !this.isReadOnly) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public override _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public override _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public override serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public override name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @internal\r\n */\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        const textureSize = this.host.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.host.getContext();\r\n\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    const bucket = bStartY * this._bucketLen + x;\r\n                    let lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewerWindow\r\n     * @param name of ScrollViewerWindow\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                const bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        const child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (const child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected override _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        let maxWidth = this.parentClientWidth;\r\n        let maxHeight = this.parentClientHeight;\r\n        for (const child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected override _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public override serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public override _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected override _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public override addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public override removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public override get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public override _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        this._grid.clipChildren = false;\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected override _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected override _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public override _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public override _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public override dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public override delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(\r\n        public override name?: string,\r\n        group?: string\r\n    ) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public override dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n","import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public override get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public override set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public override name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public override _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public override serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @internal\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @param options.isHorizontal\r\n * @param options.controlFirst\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }): StackPanel {\r\n    const panel = new StackPanel(\"panel\");\r\n    const isHorizontal = options ? options.isHorizontal : true;\r\n    const controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    const header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};\r\n","/*\r\n * Base Gradient class. Should not be used directly.\r\n */\r\n\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Type that represents a single stop on the gradient.\r\n */\r\nexport type GradientColorStop = {\r\n    /**\r\n     * Offset from the start where the color will be applied.\r\n     */\r\n    offset: number;\r\n    /**\r\n     * Color to be applied.\r\n     */\r\n    color: string;\r\n};\r\n\r\n/**\r\n * Class that serves as a base for all the gradients created from context.\r\n */\r\nexport abstract class BaseGradient {\r\n    private _colorStops: GradientColorStop[] = [];\r\n\r\n    private _canvasGradient: CanvasGradient;\r\n    private _context: ICanvasRenderingContext;\r\n    private _gradientDirty: boolean = true;\r\n\r\n    /**\r\n     * Overwritten by child classes to create the canvas gradient.\r\n     * @param context\r\n     */\r\n    protected abstract _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient;\r\n\r\n    private _addColorStopsToCanvasGradient() {\r\n        for (const stop of this._colorStops) {\r\n            this._canvasGradient.addColorStop(stop.offset, stop.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,\r\n     * reuse the existing gradient.\r\n     * @param context the context to create the gradient from\r\n     * @returns the canvas gradient\r\n     */\r\n    public getCanvasGradient(context: ICanvasRenderingContext) {\r\n        if (this._gradientDirty || this._context !== context) {\r\n            this._context = context;\r\n            this._canvasGradient = this._createCanvasGradient(context);\r\n            this._addColorStopsToCanvasGradient();\r\n            this._gradientDirty = false;\r\n        }\r\n        return this._canvasGradient;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color stop to the gradient.\r\n     * @param offset the offset of the stop on the gradient. Should be between 0 and 1\r\n     * @param color the color of the stop\r\n     */\r\n    public addColorStop(offset: number, color: string) {\r\n        this._colorStops.push({ offset, color });\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing color stop with the specified offset from the gradient\r\n     * @param offset the offset of the stop to be removed\r\n     */\r\n    public removeColorStop(offset: number) {\r\n        this._colorStops = this._colorStops.filter((colorStop) => colorStop.offset !== offset);\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes all color stops from the gradient\r\n     */\r\n    public clearColorStops() {\r\n        this._colorStops = [];\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Color stops of the gradient\r\n     */\r\n    public get colorStops() {\r\n        return this._colorStops;\r\n    }\r\n\r\n    /**\r\n     * @returns Type of the gradient\r\n     */\r\n    public getClassName() {\r\n        return \"BaseGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serialize into a json object\r\n     * @param serializationObject object to serialize into\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        serializationObject.colorStops = this._colorStops;\r\n        serializationObject.className = this.getClassName();\r\n    }\r\n\r\n    /**\r\n     * Parse from json object\r\n     * @param serializationObject object to parse from\r\n     */\r\n    public parse(serializationObject: any) {\r\n        this._colorStops = serializationObject.colorStops;\r\n    }\r\n}\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient along a line that connects two coordinates.\r\n * These coordinates are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n */\r\nexport class LinearGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n\r\n    /**\r\n     * Creates a new linear gradient\r\n     * @param x0\r\n     * @param y0\r\n     * @param x1\r\n     * @param y1\r\n     */\r\n    constructor(x0?: number, y0?: number, x1?: number, y1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);\r\n    }\r\n\r\n    /** X axis coordinate of the starting point in the line */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** X axis coordinate of the ending point in the line */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** Y axis coordinate of the starting point in the line */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** Y axis coordinate of the ending point in the line */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public override getClassName(): string {\r\n        return \"LinearGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public override parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.LinearGradient\", LinearGradient);\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient formed from two circles with their own centers and radius.\r\n * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n */\r\nexport class RadialGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _r0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n    private _r1: number;\r\n\r\n    /**\r\n     * Creates a new radial gradient\r\n     * @param x0 x coordinate of the first circle's center\r\n     * @param y0 y coordinate of the first circle's center\r\n     * @param r0 radius of the first circle\r\n     * @param x1 x coordinate of the second circle's center\r\n     * @param y1 y coordinate of the second circle's center\r\n     * @param r1 radius of the second circle\r\n     */\r\n    constructor(x0?: number, y0?: number, r0?: number, x1?: number, y1?: number, r1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._r0 = r0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n        this._r1 = r1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);\r\n    }\r\n\r\n    /** x coordinate of the first circle's center */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** x coordinate of the second circle's center */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** y coordinate of the first circle's center */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** y coordinate of the second circle's center */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /** radius of the first circle */\r\n    public get r0() {\r\n        return this._r0;\r\n    }\r\n\r\n    /** radius of the second circle */\r\n    public get r1() {\r\n        return this._r1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public override getClassName() {\r\n        return \"RadialGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.r0 = this._r0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n        serializationObject.r1 = this._r1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public override parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._r0 = serializationObject.r0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n        this._r1 = serializationObject.r1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadialGradient\", RadialGradient);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { PointerInfoPre, PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { ClipboardEventTypes, ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport type { KeyboardInfoPre } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport type { IFocusableControl } from \"./controls/focusableControl\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IPointerEvent, IWheelEvent } from \"core/Events/deviceInputEvents\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { GetClass } from \"core/Misc/typeStore\";\r\nimport { DecodeBase64ToBinary } from \"core/Misc/stringTools\";\r\n\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    /** Define the url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\r\n    public static AllowGPUOptimizations = true;\r\n\r\n    /** Snippet ID if the content was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /** Observable that fires when the GUI is ready */\r\n    public onGuiReadyObservable = new Observable<AdvancedDynamicTexture>();\r\n\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<AbstractEngine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _prePointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _canvasBlurObserver: Nullable<Observer<AbstractEngine>>;\r\n    private _controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _background: string;\r\n    /** @internal */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @internal */\r\n    public _lastPickedControl: Control;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @internal */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @internal */\r\n    public _linkedControls = new Array<Control>();\r\n    /** @internal */\r\n    public _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootElement: Nullable<HTMLElement>;\r\n    private _cursorChanged = false;\r\n    private _defaultMousePointerId = 0;\r\n    private _rootChildrenHaveChanged: boolean = false;\r\n\r\n    /** @internal */\r\n    public _capturedPointerIds = new Set<number>();\r\n\r\n    /** @internal */\r\n    public _numLayoutCalls = 0;\r\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\r\n    public get numLayoutCalls(): number {\r\n        return this._numLayoutCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    public _numRenderCalls = 0;\r\n    /** Gets the number of render calls made the last time the ADT has been rendered */\r\n    public get numRenderCalls(): number {\r\n        return this._numRenderCalls;\r\n    }\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n    /**\r\n     * Observable event triggered before layout is evaluated\r\n     */\r\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the layout was evaluated\r\n     */\r\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered before the texture is rendered\r\n     */\r\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the texture was rendered\r\n     */\r\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\r\n     */\r\n    public applyYInversionOnUpdate = true;\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n        this._renderScale = value;\r\n        this._onResize();\r\n    }\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used when in \"ideal mode\"\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     * */\r\n    public get idealRatio(): number {\r\n        let rwidth: number = 0;\r\n        let rheight: number = 0;\r\n\r\n        if (this._idealWidth) {\r\n            rwidth = this.getSize().width / this._idealWidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            rheight = this.getSize().height / this._idealHeight;\r\n        }\r\n\r\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\r\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\r\n        }\r\n\r\n        if (this._idealWidth) {\r\n            // horizontal\r\n            return rwidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            // vertical\r\n            return rheight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Will return all controls with the given type name\r\n     * @param typeName defines the type name to search for\r\n     * @returns an array of all controls found\r\n     */\r\n    public getControlsByType(typeName: string): Control[] {\r\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\r\n    }\r\n\r\n    /**\r\n     * Will return the first control with the given name\r\n     * @param name defines the name to search for\r\n     * @returns the first control found or null\r\n     */\r\n    public getControlByName(name: string): Nullable<Control> {\r\n        return this._getControlByKey(\"name\", name);\r\n    }\r\n\r\n    private _getControlByKey(key: string, value: any): Nullable<Control> {\r\n        return this._rootContainer.getDescendants().find((control) => control[key as keyof Control] === value) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n        this._focusedControl = control;\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return !this.layer.isBackground;\r\n    }\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n     * If this is set, even when a control is pointer blocker, some events can still be passed through to the scene.\r\n     * Options from values are PointerEventTypes\r\n     * POINTERDOWN, POINTERUP, POINTERMOVE, POINTERWHEEL, POINTERPICK, POINTERTAP, POINTERDOUBLETAP\r\n     */\r\n    public skipBlockEvents = 0;\r\n\r\n    /**\r\n     * If set to true, every scene render will trigger a pointer event for the GUI\r\n     * if it is linked to a mesh or has controls linked to a mesh. This will allow\r\n     * you to catch the pointer moving around the GUI due to camera or mesh movements,\r\n     * but it has a performance cost.\r\n     */\r\n    public checkPointerEveryFrame = false;\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene?: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\r\n        scene = this.getScene();\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n        this.applyYInversionOnUpdate = invertY;\r\n        this._rootElement = scene.getEngine().getInputElement();\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n\r\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\r\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n        this._rootContainer._link(this);\r\n        this.hasAlpha = true;\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n        this._texture.isReady = true;\r\n    }\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n        func(container);\r\n        for (const child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, <Container>child);\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    private _useInvalidateRectOptimization = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\r\n     */\r\n    public get useInvalidateRectOptimization(): boolean {\r\n        return this._useInvalidateRectOptimization;\r\n    }\r\n\r\n    public set useInvalidateRectOptimization(value: boolean) {\r\n        this._useInvalidateRectOptimization = value;\r\n    }\r\n\r\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\r\n    private _invalidatedRectangle: Nullable<Measure> = null;\r\n    /**\r\n     * Invalidates a rectangle area on the gui texture\r\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\r\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\r\n     */\r\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\r\n        if (!this._useInvalidateRectOptimization) {\r\n            return;\r\n        }\r\n        if (!this._invalidatedRectangle) {\r\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\r\n        } else {\r\n            // Compute intersection\r\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\r\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\r\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\r\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\r\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\r\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\r\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\r\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\r\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\r\n     * @param repelFactor how much is the control repelled by other controls\r\n     */\r\n    public moveToNonOverlappedPosition(overlapGroup?: number | Control[], deltaStep = 1, repelFactor = 1) {\r\n        let controlsForGroup: Control[];\r\n        if (Array.isArray(overlapGroup)) {\r\n            controlsForGroup = overlapGroup;\r\n        } else {\r\n            const descendants = this.getDescendants(true);\r\n            // get only the controls with an overlapGroup property set\r\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\r\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\r\n        }\r\n\r\n        controlsForGroup.forEach((control1) => {\r\n            let velocity = Vector2.Zero();\r\n            const center = new Vector2(control1.centerX, control1.centerY);\r\n\r\n            controlsForGroup.forEach((control2) => {\r\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\r\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\r\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\r\n                    const diffLength = diff.length();\r\n\r\n                    if (diffLength > 0) {\r\n                        // calculate the velocity\r\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (velocity.length() > 0) {\r\n                // move the control along the direction vector away from the overlapping control\r\n                velocity = velocity.normalize().scale(deltaStep * (control1.overlapDeltaMultiplier ?? 1));\r\n                control1.linkOffsetXInPixels += velocity.x;\r\n                control1.linkOffsetYInPixels += velocity.y;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public override dispose(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._rootElement = null;\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n        if (this._prePointerObserver) {\r\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\r\n        }\r\n        if (this._sceneRenderObserver) {\r\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n        if (this._canvasBlurObserver) {\r\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\r\n        }\r\n        if (this._controlAddedObserver) {\r\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\r\n        }\r\n        if (this._controlRemovedObserver) {\r\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\r\n        }\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n        this.onBeginRenderObservable.clear();\r\n        this.onEndRenderObservable.clear();\r\n        this.onBeginLayoutObservable.clear();\r\n        this.onEndLayoutObservable.clear();\r\n        this.onGuiReadyObservable.clear();\r\n        super.dispose();\r\n    }\r\n    private _onResize(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        // Check size\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n            this.markAsDirty();\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\r\n    }\r\n    /** @internal */\r\n    public _getGlobalViewport(): Viewport {\r\n        const size = this.getSize();\r\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\r\n\r\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\r\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\r\n\r\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\r\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\r\n\r\n        globalViewPort.width = targetX;\r\n        globalViewPort.height = targetY;\r\n\r\n        return globalViewPort;\r\n    }\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\r\n        return new Vector2(result.x, result.y);\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position with Z\r\n     */\r\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return Vector3.Zero();\r\n        }\r\n        const globalViewport = this._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera, skipUpdate?: boolean): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            const scene = this.getScene();\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            const globalViewport = this._getGlobalViewport();\r\n            for (const control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n                const mesh = control._linkedMesh as AbstractMesh;\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n                    continue;\r\n                }\r\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\r\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                if (this.useInvalidateRectOptimization) {\r\n                    control.invalidateRect();\r\n                }\r\n\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n        this._render(skipUpdate);\r\n        if (!skipUpdate) {\r\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\r\n        }\r\n    }\r\n\r\n    private _clearMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    private _render(skipRender?: boolean): void {\r\n        const textureSize = this.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.getContext();\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n\r\n        if (this.onGuiReadyObservable.hasObservers()) {\r\n            this._checkGuiIsReady();\r\n        }\r\n\r\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\r\n        if (this._rootChildrenHaveChanged) {\r\n            const camera = this.getScene()?.activeCamera;\r\n            if (camera) {\r\n                this._rootChildrenHaveChanged = false;\r\n                this._checkUpdate(camera, true);\r\n            }\r\n        }\r\n\r\n        // Layout\r\n        this.onBeginLayoutObservable.notifyObservers(this);\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._numLayoutCalls = 0;\r\n        this._rootContainer._layout(measure, context);\r\n        this.onEndLayoutObservable.notifyObservers(this);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        if (skipRender) {\r\n            return;\r\n        }\r\n\r\n        // Clear\r\n        if (this._invalidatedRectangle) {\r\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\r\n        } else {\r\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\r\n        }\r\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        this.onBeginRenderObservable.notifyObservers(this);\r\n        this._numRenderCalls = 0;\r\n        this._rootContainer._render(context, this._invalidatedRectangle);\r\n        this.onEndRenderObservable.notifyObservers(this);\r\n        this._invalidatedRectangle = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootElement) {\r\n            this._rootElement.style.cursor = cursor;\r\n            this._cursorChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n    private _doPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        if (this._isFullscreen) {\r\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            const viewport = camera.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n        if (this._capturingControl[pointerId]) {\r\n            if (this._capturingControl[pointerId].isPointerBlocker) {\r\n                this._shouldBlockPointer = true;\r\n            }\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        this._cursorChanged = false;\r\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n            if (!scene.doNotHandleCursors) {\r\n                this._changeCursor(\"\");\r\n            }\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\r\n            this._changeCursor(\"\");\r\n        }\r\n        this._manageFocus();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (const pointerId in list) {\r\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\r\n                continue;\r\n            }\r\n            const lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /**\r\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\r\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\r\n     * @param x pointer X on the canvas for the picking\r\n     * @param y pointer Y on the canvas for the picking\r\n     * @param pi optional pointer information\r\n     */\r\n    public pick(x: number, y: number, pi: Nullable<PointerInfoPre> = null) {\r\n        if (this._isFullscreen && this._scene) {\r\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\r\n        }\r\n    }\r\n\r\n    private _translateToPicking(scene: Scene, tempViewport: Viewport, pi: Nullable<PointerInfoPre>, x: number = scene.pointerX, y: number = scene.pointerY) {\r\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n        const engine = scene.getEngine();\r\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\r\n\r\n        if (!camera) {\r\n            tempViewport.x = 0;\r\n            tempViewport.y = 0;\r\n            tempViewport.width = engine.getRenderWidth();\r\n            tempViewport.height = engine.getRenderHeight();\r\n        } else {\r\n            if (camera.rigCameras.length) {\r\n                // rig camera - we need to find the camera to use for this event\r\n                const rigViewport = new Viewport(0, 0, 1, 1);\r\n                camera.rigCameras.forEach((rigCamera) => {\r\n                    // generate the viewport of this camera\r\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\r\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\r\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\r\n                    // check if the pointer is in the camera's viewport\r\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\r\n                        // out of viewport - don't use this camera\r\n                        return;\r\n                    }\r\n                    // set the camera to use for pointers until this pointer loop is over\r\n                    scene.cameraToUseForPointers = rigCamera;\r\n                    // set the viewport\r\n                    tempViewport.x = rigViewport.x;\r\n                    tempViewport.y = rigViewport.y;\r\n                    tempViewport.width = rigViewport.width;\r\n                    tempViewport.height = rigViewport.height;\r\n                });\r\n            } else {\r\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\r\n            }\r\n        }\r\n\r\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\r\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\r\n        this._shouldBlockPointer = false;\r\n        // Do picking modifies _shouldBlockPointer\r\n        if (pi) {\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, (<IWheelEvent>pi.event).deltaX, (<IWheelEvent>pi.event).deltaY);\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if ((this._shouldBlockPointer && !(pi.type & this.skipBlockEvents)) || this._capturingControl[pointerId]) {\r\n                pi.skipOnPointerObservable = true;\r\n            }\r\n        } else {\r\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\r\n        }\r\n        // if overridden by a rig camera - reset back to the original value\r\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const tempViewport = new Viewport(0, 0, 0, 0);\r\n\r\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\r\n            if (\r\n                scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId) &&\r\n                pi.type === PointerEventTypes.POINTERUP &&\r\n                !this._capturedPointerIds.has((pi.event as IPointerEvent).pointerId)\r\n            ) {\r\n                return;\r\n            }\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                // Avoid pointerMove events firing while the pointer is captured by the scene\r\n                if (scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId)) {\r\n                    return;\r\n                }\r\n                if ((pi.event as IPointerEvent).pointerId) {\r\n                    this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n                }\r\n            }\r\n            this._translateToPicking(scene, tempViewport, pi);\r\n        });\r\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCopy = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCut = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardPaste = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this._onClipboardCut);\r\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Transform uvs from mesh space to texture space, taking the texture into account\r\n     * @param uv the uvs in mesh space\r\n     * @returns the uvs in texture space\r\n     */\r\n    private _transformUvs(uv: Vector2): Vector2 {\r\n        const textureMatrix = this.getTextureMatrix();\r\n        let result;\r\n        if (textureMatrix.isIdentityAs3x2()) {\r\n            result = uv;\r\n        } else {\r\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\r\n\r\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\r\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\r\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\r\n\r\n            const r0 = TmpVectors.Vector4[0];\r\n            const r1 = TmpVectors.Vector4[1];\r\n            const r2 = TmpVectors.Vector4[2];\r\n\r\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\r\n\r\n            result = TmpVectors.Vector2[0];\r\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\r\n        }\r\n\r\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\r\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.x > 1) {\r\n                let fX = result.x - Math.trunc(result.x);\r\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\r\n                // odd integers means it is mirrored from the original coordinate\r\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fX = 1 - fX;\r\n                }\r\n                result.x = fX;\r\n            }\r\n        }\r\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.y > 1) {\r\n                let fY = result.y - Math.trunc(result.y);\r\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fY = 1 - fY;\r\n                }\r\n                result.y = fY;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as IPointerEvent).pointerId) {\r\n                this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n            }\r\n\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                let uv = pi.pickInfo.getTextureCoordinates();\r\n                if (uv) {\r\n                    uv = this._transformUvs(uv);\r\n                    const size = this.getSize();\r\n                    this._doPicking(\r\n                        uv.x * size.width,\r\n                        (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height,\r\n                        pi,\r\n                        pi.type,\r\n                        pointerId,\r\n                        pi.event.button,\r\n                        (<IWheelEvent>pi.event).deltaX,\r\n                        (<IWheelEvent>pi.event).deltaY\r\n                    );\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    let canMoveFocus = true;\r\n                    if (friendlyControls) {\r\n                        for (const control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachPickingToSceneRender(\r\n            scene,\r\n            () => {\r\n                const pointerId = this._defaultMousePointerId;\r\n                const pick = scene?.pick(scene.pointerX, scene.pointerY);\r\n                if (pick && pick.hit && pick.pickedMesh === mesh) {\r\n                    let uv = pick.getTextureCoordinates();\r\n                    if (uv) {\r\n                        uv = this._transformUvs(uv);\r\n                        const size = this.getSize();\r\n                        this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\r\n                    }\r\n                } else {\r\n                    if (this._lastControlOver[pointerId]) {\r\n                        this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\r\n                    }\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            },\r\n            true\r\n        );\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== <any>this._lastPickedControl) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n    private _attachPickingToSceneRender(scene: Scene, pickFunction: () => void, forcePicking: boolean) {\r\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.checkPointerEveryFrame) {\r\n                return;\r\n            }\r\n            if (this._linkedControls.length > 0 || forcePicking) {\r\n                pickFunction();\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnBlur(scene: Scene): void {\r\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\r\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\r\n                value._onCanvasBlur();\r\n            });\r\n            this.focusedControl = null;\r\n            this._lastControlDown = {};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the entire GUI system\r\n     * @returns an object with the JSON serialized data\r\n     */\r\n    public serializeContent(): any {\r\n        const size = this.getSize();\r\n        const serializationObject = {\r\n            root: {},\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n\r\n        this._rootContainer.serialize(serializationObject.root);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     */\r\n    public parseSerializedObject(serializedObject: any, scaleToSize?: boolean, urlRewriter?: (url: string) => string) {\r\n        this._rootContainer = Control.Parse(serializedObject.root, this, urlRewriter) as Container;\r\n        if (scaleToSize) {\r\n            const width = serializedObject.width;\r\n            const height = serializedObject.height;\r\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\r\n                this.scaleTo(width, height);\r\n            } else {\r\n                // scales the GUI to a default size if none was available in the serialized content\r\n                this.scaleTo(1920, 1080);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the ADT. If no mesh is defined, the GUI will be considered as a fullscreen GUI\r\n     * @param newName defines the name of the new ADT\r\n     * @param attachToMesh defines if the new ADT should be attached to a mesh\r\n     * @returns the clone of the ADT\r\n     */\r\n    public override clone(newName?: string, attachToMesh?: AbstractMesh): AdvancedDynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        const size = this.getSize();\r\n        const data = this.serializeContent();\r\n        let clone;\r\n        if (!this._isFullscreen) {\r\n            if (attachToMesh) {\r\n                clone = AdvancedDynamicTexture.CreateForMesh(attachToMesh, size.width, size.height);\r\n            } else {\r\n                clone = new AdvancedDynamicTexture(newName ?? \"Clone of \" + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);\r\n            }\r\n        } else {\r\n            clone = AdvancedDynamicTexture.CreateFullscreenUI(newName ?? \"Clone of \" + this.name);\r\n        }\r\n        clone.parseSerializedObject(data);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @deprecated Please use parseSerializedObject instead\r\n     */\r\n    public parseContent = this.parseSerializedObject;\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromSnippetAsync(\r\n        snippetId: string,\r\n        scaleToSize?: boolean,\r\n        appendToAdt?: AdvancedDynamicTexture,\r\n        urlRewriter?: (url: string) => string\r\n    ): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\r\n        if (snippetId === \"_BLANK\") {\r\n            return adt;\r\n        }\r\n\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\r\n        adt.parseSerializedObject(serialized, scaleToSize, urlRewriter);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromSnippetAsync(snippetId: string, scaleToSize?: boolean, urlRewriter?: (url: string) => string): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this, urlRewriter);\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromFileAsync(\r\n        url: string,\r\n        scaleToSize?: boolean,\r\n        appendToAdt?: AdvancedDynamicTexture,\r\n        urlRewriter?: (url: string) => string\r\n    ): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\r\n        adt.parseSerializedObject(serialized, scaleToSize, urlRewriter);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromURLAsync(url: string, scaleToSize?: boolean, urlRewriter?: (url: string) => string): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this, urlRewriter);\r\n    }\r\n\r\n    private static _LoadURLContentAsync(url: string, snippet: boolean = false): Promise<any> {\r\n        if (url === \"\") {\r\n            return Promise.reject(\"No URL provided\");\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let gui;\r\n                        if (snippet) {\r\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\r\n                        } else {\r\n                            gui = request.responseText;\r\n                        }\r\n                        const serializationObject = JSON.parse(gui);\r\n                        resolve(serializationObject);\r\n                    } else {\r\n                        reject(\"Unable to load\");\r\n                    }\r\n                }\r\n            });\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Compares two rectangle based controls for pixel overlap\r\n     * @param control1 The first control to compare\r\n     * @param control2 The second control to compare\r\n     * @returns true if overlaps, otherwise false\r\n     */\r\n    private static _Overlaps(control1: Control, control2: Control) {\r\n        return !(\r\n            control1.centerX > control2.centerX + control2.widthInPixels ||\r\n            control1.centerX + control1.widthInPixels < control2.centerX ||\r\n            control1.centerY + control1.heightInPixels < control2.centerY ||\r\n            control1.centerY > control2.centerY + control2.heightInPixels\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\r\n     * @param sampling defines the texture sampling mode (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        onlyAlphaTesting = false,\r\n        invertY?: boolean,\r\n        materialSetupCallback: (mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean) => void = this._CreateMaterial,\r\n        sampling = Texture.TRILINEAR_SAMPLINGMODE\r\n    ): AdvancedDynamicTexture {\r\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\r\n        const uniqueId = RandomGUID();\r\n        const result = new AdvancedDynamicTexture(`AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`, width, height, mesh.getScene(), true, sampling, invertY);\r\n\r\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n\r\n    private static _CreateMaterial(mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean): void {\r\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\r\n        if (!internalClassType) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\r\n        }\r\n\r\n        const material: StandardMaterial = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = texture;\r\n            material.emissiveTexture = texture;\r\n            texture.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = texture;\r\n            material.opacityTexture = texture;\r\n        }\r\n        mesh.material = material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param sampling defines the texture sampling mode (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMeshTexture(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        invertY?: boolean,\r\n        sampling = Texture.TRILINEAR_SAMPLINGMODE\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, sampling, invertY);\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hosting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(\r\n        name: string,\r\n        foreground: boolean = true,\r\n        scene: Nullable<Scene> = null,\r\n        sampling = Texture.BILINEAR_SAMPLINGMODE,\r\n        adaptiveScaling: boolean = false\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n        // Display\r\n        const resultScene = result.getScene();\r\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\r\n        layer.texture = result;\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        if (adaptiveScaling && resultScene) {\r\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\r\n            result._rootContainer.scaleX = newScale;\r\n            result._rootContainer.scaleY = newScale;\r\n        }\r\n\r\n        // Attach\r\n        result.attach();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public override scale(ratio: number): void {\r\n        super.scale(ratio);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public override scaleTo(width: number, height: number): void {\r\n        super.scaleTo(width, height);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    private _checkGuiIsReady() {\r\n        if (this.guiIsReady()) {\r\n            this.onGuiReadyObservable.notifyObservers(this);\r\n\r\n            this.onGuiReadyObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns true if all the GUI components are ready to render\r\n     */\r\n    public guiIsReady(): boolean {\r\n        return this._rootContainer.isReady();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n","import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    // eslint-disable-next-line no-throw-literal\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    // eslint-disable-next-line no-throw-literal\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        // eslint-disable-next-line no-throw-literal\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n","import { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { IBehaviorAware, Behavior } from \"core/Behaviors/behavior\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport type { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport type { Container3D } from \"./container3D\";\r\n\r\nimport type { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: number } = {}; // Store number of pointer downs per ID, from near and far interactions\r\n\r\n    protected _isVisible = true;\r\n\r\n    /** @internal */\r\n    public _host: GUI3DManager;\r\n    /** @internal */\r\n    public _isScaledByManager = false;\r\n\r\n    /** Gets or sets the control position in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._isScaledByManager = false;\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * An event triggered when the pointer moves over the control\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        const scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        const mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking\r\n\r\n            const mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _injectGUI3DReservedDataStore(node: TransformNode): any {\r\n        node.reservedDataStore = node.reservedDataStore ?? {};\r\n        node.reservedDataStore.GUI3D = node.reservedDataStore.GUI3D ?? {};\r\n        return node.reservedDataStore.GUI3D;\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    private _isTouchButton3D(control: Control3D): control is TouchButton3D {\r\n        return (control as TouchButton3D)._generatePointerEventType !== undefined;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        if (this._enterCount > 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount--;\r\n\r\n        if (this._enterCount > 0) {\r\n            return;\r\n        }\r\n\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        this._downCount++;\r\n        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;\r\n\r\n        if (this._downCount !== 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        this._downPointerIds[pointerId]--;\r\n\r\n        if (this._downPointerIds[pointerId] <= 0) {\r\n            delete this._downPointerIds[pointerId];\r\n        }\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(type: number, pickedPoint: Vector3, originMeshPosition: Nullable<Vector3>, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._isTouchButton3D(this) && originMeshPosition) {\r\n            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}\r\n","import type { Control } from \"../../2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\n/**\r\n * The base class for controls that display content\r\n */\r\nexport class ContentDisplay3D extends Control3D {\r\n    private _content: Control;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    protected _contentResolution = 512;\r\n    protected _contentScaleRatio = 2;\r\n    protected _contentScaleRatioY?: number;\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!value || !this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\r\n                \"Facade\",\r\n                this._contentResolution,\r\n                this._contentResolution,\r\n                this._host.utilityLayer.utilityLayerScene,\r\n                true,\r\n                Texture.TRILINEAR_SAMPLINGMODE\r\n            );\r\n            this._setFacadeTextureScaling();\r\n            this._facadeTexture.premulAlpha = true;\r\n        } else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    protected _setFacadeTextureScaling() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatioY ?? this._contentScaleRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): number {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: number) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {}\r\n}\r\n","import { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { ContentDisplay3D } from \"./contentDisplay3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends ContentDisplay3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name, scene);\r\n    }\r\n}\r\n","import { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport type { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Options used to create a button in 3D\r\n */\r\nexport interface IButton3DCreationOptions {\r\n    /**\r\n     * Width of the button. Default: 1\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Height of the button. Default: 1\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * Depth of the button. Default: 0.08\r\n     */\r\n    depth?: number;\r\n}\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @internal */\r\n    protected _currentMaterial: Material;\r\n\r\n    protected _options: IButton3DCreationOptions;\r\n    protected _height: number;\r\n    protected _depth: number;\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param options defines the options used to create the button\r\n     */\r\n    constructor(name?: string, options?: IButton3DCreationOptions) {\r\n        super(name);\r\n\r\n        this._options = {\r\n            width: 1,\r\n            height: 1,\r\n            depth: 0.08,\r\n            ...options,\r\n        };\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected override _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        const faceUV = new Array(6);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        if (scene.useRightHandedSystem) {\r\n            // Flip the u on the texture\r\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\r\n        } else {\r\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\r\n        }\r\n\r\n        const mesh = CreateBox(\r\n            this.name + \"_rootMesh\",\r\n            {\r\n                width: this._options.width,\r\n                height: this._options.height,\r\n                depth: this._options.depth,\r\n                faceUV: faceUV,\r\n                wrap: true,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width!) / this._options.height!;\r\n        this._setFacadeTextureScaling();\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: AbstractMesh) {\r\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {}\r\n\r\n    protected override _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        for (const control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children.length = 0;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { int } from \"core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n     * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n     * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n     * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n     * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     * @param name\r\n     */\r\n    public constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            const extendSize = TmpVectors.Vector3[0];\r\n            const diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        const startOffsetX = columns * 0.5 * this._cellWidth;\r\n        const startOffsetY = rows * 0.5 * this._cellHeight;\r\n        const nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (let r = 0; r < rows; r++) {\r\n                for (let c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let c = 0; c < columns; c++) {\r\n                for (let r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {}\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        const newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        const yAngle = source.x / this._radius;\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;uniform mat4 world;uniform mat4 viewProjection;varying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float borderWidth;uniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {vUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;float minScale=min(min(scale.x,scale.y),scale.z);float maxScale=max(max(scale.x,scale.y),scale.z);float minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);float areaYZ=scale.y*scale.z;float areaXZ=scale.x*scale.z;float areaXY=scale.x*scale.y;float scaledBorderWidth=borderWidth; \nif (abs(normal.x)==1.0) \n{scale.x=scale.y;scale.y=scale.z;if (areaYZ>areaXZ && areaYZ>areaXY)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse if (abs(normal.y)==1.0) \n{scale.x=scale.z;if (areaXZ>areaXY && areaXZ>areaYZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse \n{if (areaXY>areaYZ && areaXY>areaXZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);if (scale.x>scale.y)\n{scaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);scaleInfo.y=1.0-scaledBorderWidth;}\nelse\n{scaleInfo.x=1.0-scaledBorderWidth;scaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);} \n#endif \nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentPixelShader\";\nconst shader = `precision highp float;varying vec2 vUV;uniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float edgeSmoothingValue;uniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;uniform vec3 hoverPosition;uniform vec4 hoverColor;uniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;uniform mat4 textureMatrix;vec2 finalUV;\n#endif\nvoid main(void) {vec3 albedo=albedoColor.rgb;float alpha=albedoColor.a;\n#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));albedo=texture2D(albedoSampler,finalUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;albedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER \nfloat borderPower=10.0;float inverseBorderPower=1.0/borderPower;vec3 borderColor=albedo*borderPower;vec2 distanceToEdge;distanceToEdge.x=abs(vUV.x-0.5)*2.0;distanceToEdge.y=abs(vUV.y-0.5)*2.0;float borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));borderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \nalbedo+=borderColor;alpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);uvGlow=uvGlow*uvGlow;uvGlow=uvGlow*uvGlow;albedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \n#endif\ngl_FragColor=vec4(albedo,alpha);}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentPixelShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3 } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\nimport { PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent design\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.01)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            const shaderName = \"fluent\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"innerGlowColor\",\r\n                \"albedoColor\",\r\n                \"borderWidth\",\r\n                \"edgeSmoothingValue\",\r\n                \"scaleFactor\",\r\n                \"borderMinValue\",\r\n                \"hoverColor\",\r\n                \"hoverPosition\",\r\n                \"hoverRadius\",\r\n                \"textureMatrix\",\r\n            ];\r\n\r\n            const samplers = [\"albedoSampler\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: null,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect, subMesh)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE && this._albedoTexture) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                const matrix = this._albedoTexture.getTextureMatrix();\r\n                this._activeEffect.setMatrix(\"textureMatrix\", matrix);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentMaterial\", FluentMaterial);\r\n","import type { Scene } from \"core/scene\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Container3D } from \"./container3D\";\r\nimport type { TouchHolographicButton } from \"./touchHolographicButton\";\r\n\r\n/**\r\n * Simple menu that can contain holographic buttons\r\n */\r\nexport class TouchHolographicMenu extends VolumeBasedPanel {\r\n    protected _backPlate: Mesh;\r\n    private _backPlateMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    private _currentMin: Nullable<Vector3>;\r\n    private _currentMax: Nullable<Vector3>;\r\n\r\n    private _backPlateMargin = 1.25;\r\n\r\n    /**\r\n     * Scale for the buttons added to the menu\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static MENU_BUTTON_SCALE: number = 1;\r\n\r\n    /**\r\n     * Gets or sets the margin size of the backplate in button size units.\r\n     * Setting this to 1, will make the backPlate margin the size of 1 button\r\n     */\r\n    public get backPlateMargin(): number {\r\n        return this._backPlateMargin;\r\n    }\r\n\r\n    public set backPlateMargin(value: number) {\r\n        this._backPlateMargin = value;\r\n\r\n        if (this._children.length >= 1) {\r\n            this.children.forEach((control) => {\r\n                this._updateCurrentMinMax(control.position);\r\n            });\r\n\r\n            this._updateMargins();\r\n        }\r\n    }\r\n\r\n    protected override _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = new Mesh(`menu_${this.name}`, scene);\r\n\r\n        this._backPlate = CreateBox(\"backPlate\" + this.name, { size: 1 }, scene);\r\n        this._backPlate.parent = node;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: AbstractMesh) {\r\n        this._backPlateMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backPlateMaterial.albedoColor = new Color3(0.08, 0.15, 0.55);\r\n        this._backPlateMaterial.renderBorders = true;\r\n        this._backPlateMaterial.renderHoverLight = true;\r\n\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backPlateMaterial.hoverPosition = pickedPoint;\r\n                this._backPlateMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backPlateMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        this._backPlate.material = this._backPlateMaterial;\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        // Simple plane mapping for the menu\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n\r\n        this._updateCurrentMinMax(nodePosition);\r\n    }\r\n\r\n    protected override _finalProcessing() {\r\n        this._updateMargins();\r\n    }\r\n\r\n    private _updateCurrentMinMax(nodePosition: Vector3) {\r\n        if (!this._currentMin) {\r\n            this._currentMin = nodePosition.clone();\r\n            this._currentMax = nodePosition.clone();\r\n        }\r\n\r\n        this._currentMin.minimizeInPlace(nodePosition);\r\n        this._currentMax!.maximizeInPlace(nodePosition);\r\n    }\r\n\r\n    private _updateMargins() {\r\n        if (this._children.length > 0) {\r\n            this._currentMin!.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);\r\n            this._currentMax!.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);\r\n            const extendSize = this._currentMax!.subtract(this._currentMin!);\r\n\r\n            // Also add a % margin\r\n            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;\r\n            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;\r\n            this._backPlate.scaling.z = 0.001;\r\n\r\n            for (let i = 0; i < this._children.length; i++) {\r\n                this._children[i].position.subtractInPlace(this._currentMin!).subtractInPlace(extendSize.scale(0.5));\r\n                this._children[i].position.z -= 0.01;\r\n            }\r\n        }\r\n\r\n        this._currentMin = null;\r\n        this._currentMax = null;\r\n    }\r\n\r\n    /**\r\n     * Creates a holographic menu GUI 3D control\r\n     * @param name name of the menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Adds a button to the menu.\r\n     * Please note that the back material of the button will be set to transparent as it is attached to the menu.\r\n     *\r\n     * @param button Button to add\r\n     * @returns This menu\r\n     */\r\n    public addButton(button: TouchHolographicButton): TouchHolographicMenu {\r\n        // Block updating the layout until the button is resized (which has to happen after node creation)\r\n        const wasLayoutBlocked = this.blockLayout;\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = true;\r\n        }\r\n\r\n        super.addControl(button);\r\n\r\n        button.isBackplateVisible = false;\r\n        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method should not be used directly. It is inherited from `Container3D`.\r\n     * Please use `addButton` instead.\r\n     * @param _control the control to add\r\n     * @returns the current container\r\n     */\r\n    public override addControl(_control: Control3D): Container3D {\r\n        Logger.Warn(\"TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.\");\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the menu\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport { HandConstraintBehavior } from \"core/Behaviors/Meshes/handConstraintBehavior\";\r\nimport type { WebXRExperienceHelper } from \"core/XR/webXRExperienceHelper\";\r\n\r\n/**\r\n * Hand menu that displays buttons and floats around the hand.\r\n * @since 5.0.0\r\n */\r\nexport class HandMenu extends TouchHolographicMenu {\r\n    private _handConstraintBehavior: HandConstraintBehavior;\r\n\r\n    /**\r\n     * The hand constraint behavior setting the transformation of this node\r\n     */\r\n    public get handConstraintBehavior() {\r\n        return this._handConstraintBehavior;\r\n    }\r\n\r\n    protected override _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._handConstraintBehavior.attach(node);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Creates a hand menu GUI 3D control\r\n     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature\r\n     * @param name name of the hand menu\r\n     */\r\n    constructor(xr: WebXRExperienceHelper, name?: string) {\r\n        super(name);\r\n\r\n        this._handConstraintBehavior = new HandConstraintBehavior();\r\n        this._handConstraintBehavior.linkToXRExperience(xr);\r\n        this.backPlateMargin = 0.15;\r\n        this.rows = 3;\r\n    }\r\n\r\n    /**\r\n     * Disposes the hand menu\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this._handConstraintBehavior.detach();\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Round_Rect_Fragment_B31(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Blob_Fragment_B71(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid Line_Fragment_B48(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Scale_RGB_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Conditional_Float_B38(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid main()\n{float R_Q72;float G_Q72;float B_Q72;float A_Q72;R_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;vec4 Blob_Color_Q71;\n#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);float k2=dot(vExtra3.xy,vExtra3.xy);vec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);Blob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n#else\nBlob_Color_Q71=vec4(0,0,0,0);\n#endif\nvec4 Line_Color_Q48;Line_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);float X_Q67;float Y_Q67;X_Q67=vUV.x;Y_Q67=vUV.y;vec3 Incident_Q66=normalize(vPosition-cameraPosition);vec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);float Product_Q63=Y_Q67*_Vertical_Offset_;float Dot_Q68=dot(Incident_Q66, Reflected_Q60);float Dot_Q57=dot(vNormal, Incident_Q66);float Result_Q38;Conditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);float Product_Q64=Result_Q38*_Frequency_;float Sum_Q69=Product_Q64+1.0;float Product_Q70=Sum_Q69*0.5;float Sum_Q62=Product_Q63+Product_Q70;float FractF_Q59=fract(Sum_Q62);vec2 Vec2_Q65=vec2(FractF_Q59,0.5);vec4 Color_Q58;\n#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\n#else\nColor_Q58=vec4(0,0,0,0);\n#endif\nvec4 Result_Q54;Scale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);vec4 Result_Q55;Scale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);vec4 Base_And_Iridescent_Q53;Base_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);vec4 Base_And_Iridescent_Q56;Base_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);vec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;vec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;vec4 Color_Q31;Round_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);vec4 Result_Q47=_Fade_Out_*Color_Q31;vec4 Out_Color=Result_Q47;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B115(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid PickDir_B140(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Round_Rect_Vertex_B139(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;}\nvoid Line_Vertex_B135(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid Blob_Vertex_B180(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob=Blob_Position;vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B129(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Object_To_World_Dir_B132(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B147(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid Edge_AA_Vertex_B130(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(world* vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Pick_Radius_B144(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid main()\n{vec3 Nrm_World_Q128;Nrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q131;vec3 Tangent_World_N_Q131;float Tangent_Length_Q131;Tangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q131=length(Tangent_World_Q131);Tangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;vec3 Binormal_World_Q132;vec3 Binormal_World_N_Q132;float Binormal_Length_Q132;Object_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);float Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;vec3 Result_Q177;Result_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));vec3 Result_Q178;Result_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));float Result_Q144;Pick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);vec3 Dir_Q140;PickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);float Radius_Q147;float Line_Width_Q147;RelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);vec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);vec3 New_P_Q129;vec2 New_UV_Q129;float Radial_Gradient_Q129;vec3 Radial_Dir_Q129;Move_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);vec3 Pos_World_Q115;Object_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);vec4 Blob_Info_Q180;\n#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\n#else\nBlob_Info_Q180=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q181;\n#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\n#else\nBlob_Info_Q181=vec4(0,0,0,0);\n#endif\nfloat Gradient1_Q130;float Gradient2_Q130;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\n#else\nGradient1_Q130=1.0;Gradient2_Q130=1.0;\n#endif\nvec2 Rect_UV_Q139;vec4 Rect_Parms_Q139;vec2 Scale_XY_Q139;vec2 Line_UV_Q139;Round_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);vec3 Line_Vertex_Q135;Line_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);vec3 Position=Pos_World_Q115;vec3 Normal=Dir_Q140;vec2 UV=Rect_UV_Q139;vec3 Tangent=Line_Vertex_Q135;vec3 Binormal=Nrm_World_Q128;vec4 Color=Out_Color_Q145;vec4 Extra1=Rect_Parms_Q139;vec4 Extra2=Blob_Info_Q180;vec4 Extra3=Blob_Info_Q181;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentBackplate.fragment\";\r\nimport \"./shaders/fluentBackplate.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nclass FluentBackplateMaterialDefines extends MaterialDefines {\r\n    public BLOB_ENABLE = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public SMOOTH_EDGES = true;\r\n    public IRIDESCENT_MAP_ENABLE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n */\r\nexport class FluentBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\r\n\r\n    /**\r\n     * URL pointing to the texture used to define iridescent map.\r\n     */\r\n    public static IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\r\n\r\n    private _blobTexture: Texture;\r\n    private _iridescentMap: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\r\n     */\r\n    @serialize()\r\n    public radius = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.98;\r\n\r\n    /**\r\n     * Gets or sets the far size of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the fluent hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 0;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 0;\r\n\r\n    /** @internal */\r\n    public _rate = 0.135;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.98, 0.98, 0.98, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0.25;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n    private _globalLeftIndexTipPosition4 = Vector4.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n    private _globalRightIndexTipPosition4 = Vector4.Zero();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Angle_\",\r\n                \"_Fade_Out_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera?.position ?? Vector3.ZeroReadOnly);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        // \"ChooseAngle\"\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n\r\n        // \"Multiply\"\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Color Texture\"\r\n        //define IRIDESCENT_MAP_ENABLE true;\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\r\n\r\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\r\n\r\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n\r\n        this._blobTexture.dispose();\r\n        this._iridescentMap.dispose();\r\n    }\r\n\r\n    public override clone(name: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"FluentBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to create a holographic backplate in 3D\r\n * @since 5.0.0\r\n */\r\nexport class HolographicBackplate extends Control3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _model: AbstractMesh;\r\n    private _material: FluentBackplateMaterial;\r\n\r\n    /**\r\n     * Rendering ground id of the backplate mesh.\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._model.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._model.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used by the backplate\r\n     */\r\n    public get material(): FluentBackplateMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new holographic backplate\r\n     * @param name defines the control name\r\n     * @param _shareMaterials\r\n     */\r\n    constructor(\r\n        name?: string,\r\n        private _shareMaterials = true\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"HolographicBackplate\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        const collisionMesh = CreateBox(\r\n            (this.name ?? \"HolographicBackplate\") + \"_CollisionMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.visibility = 0;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\r\n            const importedModel = result.meshes[1];\r\n            importedModel.name = `${this.name}_frontPlate`;\r\n            importedModel.isPickable = false;\r\n            importedModel.parent = collisionMesh;\r\n            if (this._material) {\r\n                importedModel.material = this._material;\r\n            }\r\n            this._model = importedModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createMaterial(mesh: Mesh) {\r\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\r\n                this._createMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\r\n            } else {\r\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] as FluentBackplateMaterial;\r\n            }\r\n        } else {\r\n            this._createMaterial(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._material.dispose();\r\n        }\r\n\r\n        this._model.dispose();\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = CreateBox(\r\n            this.name + \"BackMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate = CreateBox(\r\n            this.name + \"FrontMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected override _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform bool _Relative_Width_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool Enable_Fade;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool _Use_Blob_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Holo_Edge_Fragment_B35(\nvec4 Edges,\nfloat Edge_Width,\nout float NotEdge)\n{vec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));vec2 df=fwidth(c)*Edge_Width;vec2 g=clamp(c/df,0.0,1.0);NotEdge=g.x*g.y;}\nvoid Blob_Fragment_B39(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvec2 FilterStep(vec2 Edge,vec2 X)\n{vec2 dX=max(fwidth(X),vec2(0.00001,0.00001));return clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);}\nvoid Wireframe_Fragment_B59(\nvec3 Widths,\nvec2 UV,\nfloat Proximity,\nvec4 Edge_Color,\nout vec4 Wireframe)\n{vec2 c=min(UV,vec2(1.0,1.0)-UV);vec2 g=FilterStep(Widths.xy*0.5,c); \nWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;}\nvoid Proximity_B53(\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec3 Position,\nvec3 Show_Selection,\nvec4 Extra1,\nfloat Dist_To_Face,\nfloat Intensity,\nout float Proximity)\n{vec2 delta1=Extra1.xy;vec2 delta2=Extra1.zw;float d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);Proximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;}\nvoid To_XYZ_B46(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid main()\n{float NotEdge_Q35;\n#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\n#else\nNotEdge_Q35=1.0;\n#endif\nvec4 Blob_Color_Q39;float k=dot(vUV,vUV);vec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);vec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));Blob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));float Is_Quad_Q24;Is_Quad_Q24=vNormal.z;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));float X_Q46;float Y_Q46;float Z_Q46;To_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);float Proximity_Q53;Proximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);vec4 Wireframe_Q59;Wireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);vec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);vec4 Result_Q22;Result_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));vec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;vec4 Out_Color=Final_Color_Q37;float Clip_Threshold=0.0;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool _Enable_Fade_;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;void Blob_Vertex_B47(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nvec3 Active_Face_Center,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal);Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B66(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Up,\nout vec4 Extra1,\nout float Distance_To_Face,\nout float Intensity)\n{vec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));vec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);float distz1,distz2;Extra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;Extra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;Distance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);Intensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);}\nvoid Holo_Edge_Vertex_B44(\nvec3 Incident,\nvec3 Normal,\nvec2 UV,\nvec3 Tangent,\nvec3 Bitangent,\nbool Smooth_Active_Face,\nfloat Active,\nout vec4 Holo_Edges)\n{float NdotI=dot(Incident,Normal);vec2 flip=(UV-vec2(0.5,0.5));float udot=dot(Incident,Tangent)*flip.x*NdotI;float uval=1.0-float(udot>0.0);float vdot=-dot(Incident,Bitangent)*flip.y*NdotI;float vval=1.0-float(vdot>0.0);float Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));uval=mix(uval,max(1.0,uval),Smooth_And_Active); \nvval=mix(vval,max(1.0,vval),Smooth_And_Active);Holo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));}\nvoid Object_To_World_Pos_B13(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B38(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=float(Blob_Enable_1);float b2=float(Blob_Enable_2);Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Wireframe_Vertex_B51(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Edge_Width,\nvec2 Face_Size,\nout vec3 Wire_Vx_Pos,\nout vec2 UV,\nout vec2 Widths)\n{Widths.xy=Edge_Width/Face_Size;float x=dot(Position,Tangent);float y=dot(Position,Bitangent);float dx=0.5-abs(x);float newx=(0.5-dx*Widths.x*2.0)*sign(x);float dy=0.5-abs(y);float newy=(0.5-dy*Widths.y*2.0)*sign(y);Wire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;UV.x=dot(Wire_Vx_Pos,Tangent)+0.5;UV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B48(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float Active=max(0.0,dot(Active_Face_Dir,Normal));Show_Selection=mix(max(select1,select2),1.0,Selected)*Active;}\nvoid Proximity_Visibility_B54(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Input_Width,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nout float Width)\n{vec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;float boxMaxSize=length(boxEdges);float d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);vec3 blob1=Proximity_Center-d1*Active_Face_Dir;float d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);vec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;vec3 delta1=blob1-Active_Face_Center;vec3 delta2=blob2-Active_Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));}\nvoid Object_To_World_Dir_B67(\nvec3 Dir_Object,\nout vec3 Dir_World)\n{Dir_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid main()\n{vec3 Active_Face_Center_Q49;Active_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));vec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);float Relative_Scale_Q57;\n#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\n#else\nRelative_Scale_Q57=1.0;\n#endif\nvec3 Tangent_World_Q30;Tangent_World_Q30=(world*vec4(tangent,0.0)).xyz;vec3 Binormal_World_Q31;Binormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;vec3 Normal_World_Q60;Normal_World_Q60=(world*vec4(normal,0.0)).xyz;vec3 Result_Q18=0.5*normal;vec3 Dir_World_Q67;Object_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);float Product_Q56=_Edge_Width_*Relative_Scale_Q57;vec3 Normal_World_N_Q29=normalize(Normal_World_Q60);vec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);vec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);vec3 Position_Q38;float Near_Size_Q38;float Inner_Fade_Q38;float Blob_Enable_Q38;float Fade_Q38;float Pulse_Q38;Choose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);vec3 Face_Center_Q33;Face_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;vec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));float Show_Selection_Q48;Selection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);vec3 Normalized_Q72=normalize(Dir_World_Q67);float Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));float Width_Q54;Proximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);vec3 Wire_Vx_Pos_Q51;vec2 UV_Q51;vec2 Widths_Q51;Wireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);vec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);vec3 Pos_World_Q13;Object_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);vec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);vec3 Out_Position_Q47;vec2 Out_UV_Q47;vec3 Blob_Info_Q47;Blob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);vec4 Extra1_Q66;float Distance_To_Face_Q66;float Intensity_Q66;Proximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);vec4 Holo_Edges_Q44;Holo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);vec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);vec3 Position=Out_Position_Q47;vec2 UV=Out_UV_Q47;vec3 Tangent=Blob_Info_Q47;vec3 Binormal=Vec3_Q19;vec3 Normal=Vec3_Q27;vec4 Extra1=Extra1_Q66;vec4 Color=Holo_Edges_Q44;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentButton.fragment\";\r\nimport \"./shaders/fluentButton.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nclass FluentButtonMaterialDefines extends MaterialDefines {\r\n    public RELATIVE_WIDTH = true;\r\n    public ENABLE_FADE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n * @since 5.0.0\r\n */\r\nexport class FluentButtonMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\r\n\r\n    /**\r\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\r\n     * (Default is 4% of the height).\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the glowing edge.\r\n     */\r\n    @serializeAsColor4()\r\n    public edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the radius of the proximity light when near to the surface.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the anisotropy of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1;\r\n\r\n    /**\r\n     * Gets or sets the amount of fuzzing in the selection focus.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets an override value to display the button as selected.\r\n     */\r\n    @serialize()\r\n    public selected = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually fade the blob size.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the distance from the button the cursor should be for the button\r\n     * to appear selected (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.05;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public leftBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public leftBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public leftBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the left blob.\r\n     */\r\n    @serialize()\r\n    public leftBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the left blob;\r\n     */\r\n    @serialize()\r\n    public leftBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public rightBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public rightBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public rightBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the right blob.\r\n     */\r\n    @serialize()\r\n    public rightBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the right blob;\r\n     */\r\n    @serialize()\r\n    public rightBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the direction of the active face before the world transform is applied.\r\n     * This should almost always be set to -z.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceDir = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * Gets or sets the button's up direction before the world transform is applied.\r\n     * This should almost always be set to +y.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceUp = new Vector3(0, 1, 0);\r\n\r\n    /**\r\n     * Gets or sets whether the edge fade effect is enabled.\r\n     */\r\n    @serialize()\r\n    public enableFade = true;\r\n\r\n    /**\r\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\r\n     */\r\n    @serialize()\r\n    public fadeWidth = 1.5;\r\n\r\n    /**\r\n     * Gets or sets whether the active face is smoothly interpolated.\r\n     */\r\n    @serialize()\r\n    public smoothActiveFace = true;\r\n\r\n    /**\r\n     * Gets or sets whether the frame of the fluent button model is visible.\r\n     * This is usually only enabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public showFrame = false;\r\n\r\n    /**\r\n     * Gets or sets whether the blob color texture is used for the proximity\r\n     * light effect. This is usually only disabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public useBlobTexture = true;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentButton\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Relative_Width_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Active_Face_Dir_\",\r\n                \"_Active_Face_Up_\",\r\n                \"_Enable_Fade_\",\r\n                \"_Fade_Width_\",\r\n                \"_Smooth_Active_Face_\",\r\n                \"_Show_Frame_\",\r\n                \"_Use_Blob_Texture_\",\r\n\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Wireframe\"\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\r\n        //define _Relative_Width_ true;\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\r\n\r\n        // \"Active Face\"\r\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\r\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\r\n\r\n        // \"Hololens Edge Fade\"\r\n        //define _Enable_Fade_ true;\r\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\r\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\r\n\r\n        // \"Debug\"\r\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\r\n\r\n        this._activeEffect.setVector4(\r\n            \"Global_Left_Index_Tip_Position\",\r\n            new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0)\r\n        );\r\n        this._activeEffect.setVector4(\r\n            \"Global_Right_Index_Tip_Position\",\r\n            new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0)\r\n        );\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): FluentButtonMaterial {\r\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"FluentButtonMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): FluentButtonMaterial {\r\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\r\n","// Assumptions: absolute position of button mesh is inside the mesh\r\n\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create a touchable button in 3D\r\n */\r\nexport class TouchButton3D extends Button3D {\r\n    private _collisionMesh: Mesh;\r\n\r\n    // 'front' direction. If Vector3.Zero, there is no front and all directions of interaction are accepted\r\n    private _collidableFrontDirection: Vector3;\r\n    private _isNearPressed = false;\r\n    private _interactionSurfaceHeight = 0;\r\n\r\n    private _isToggleButton = false;\r\n    private _toggleState = false;\r\n    private _toggleButtonCallback = () => {\r\n        this._onToggle(!this._toggleState);\r\n    };\r\n\r\n    /**\r\n     * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true\r\n     */\r\n    public onToggleObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Creates a new touchable button\r\n     * @param name defines the control name\r\n     * @param collisionMesh mesh to track collisions with\r\n     */\r\n    constructor(name?: string, collisionMesh?: Mesh) {\r\n        super(name);\r\n\r\n        this.collidableFrontDirection = Vector3.Zero();\r\n\r\n        if (collisionMesh) {\r\n            this.collisionMesh = collisionMesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the current interaction is caused by near interaction or not\r\n     */\r\n    public get isActiveNearInteraction() {\r\n        return this._isNearPressed;\r\n    }\r\n\r\n    /**\r\n     * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction\r\n     * @param frontWorldDir the forward direction of the button\r\n     */\r\n    public set collidableFrontDirection(frontWorldDir: Vector3) {\r\n        this._collidableFrontDirection = frontWorldDir.normalize();\r\n\r\n        if (this._collisionMesh) {\r\n            const invert = TmpVectors.Matrix[0];\r\n\r\n            invert.copyFrom(this._collisionMesh.getWorldMatrix());\r\n            invert.invert();\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);\r\n            this._collidableFrontDirection.normalize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'\r\n     */\r\n    public get collidableFrontDirection() {\r\n        if (this._collisionMesh) {\r\n            // Update the front direction to reflect any rotations of the collision mesh\r\n            const transformedDirection = TmpVectors.Vector3[0];\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);\r\n\r\n            return transformedDirection.normalize();\r\n        }\r\n\r\n        return this._collidableFrontDirection;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh used for testing input collision\r\n     * @param collisionMesh the new collision mesh for the button\r\n     */\r\n    public set collisionMesh(collisionMesh: Mesh) {\r\n        // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.isNearPickable = false;\r\n            if (this._collisionMesh.reservedDataStore?.GUI3D) {\r\n                this._collisionMesh.reservedDataStore.GUI3D = {};\r\n            }\r\n\r\n            this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n                mesh.isNearPickable = false;\r\n                if (mesh.reservedDataStore?.GUI3D) {\r\n                    mesh.reservedDataStore.GUI3D = {};\r\n                }\r\n            });\r\n        }\r\n\r\n        this._collisionMesh = collisionMesh;\r\n        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;\r\n        this._collisionMesh.isNearPickable = true;\r\n\r\n        this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            mesh.isNearPickable = true;\r\n        });\r\n        this.collidableFrontDirection = collisionMesh.forward;\r\n    }\r\n\r\n    /**\r\n     * Setter for if this TouchButton3D should be treated as a toggle button\r\n     * @param value If this TouchHolographicButton should act like a toggle button\r\n     */\r\n    public set isToggleButton(value: boolean) {\r\n        if (value === this._isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        this._isToggleButton = value;\r\n\r\n        if (value) {\r\n            this.onPointerUpObservable.add(this._toggleButtonCallback);\r\n        } else {\r\n            this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n\r\n            // Safety check, reset the button if it's toggled on but no longer a toggle button\r\n            if (this._toggleState) {\r\n                this._onToggle(false);\r\n            }\r\n        }\r\n    }\r\n    public get isToggleButton() {\r\n        return this._isToggleButton;\r\n    }\r\n\r\n    /**\r\n     * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true\r\n     * @param newState The new state to set the TouchHolographicButton's toggle state to\r\n     */\r\n    public set isToggled(newState: boolean) {\r\n        if (this._isToggleButton && this._toggleState !== newState) {\r\n            this._onToggle(newState);\r\n        }\r\n    }\r\n    public get isToggled() {\r\n        return this._toggleState;\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        this._toggleState = newState;\r\n        this.onToggleObservable.notifyObservers(newState);\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    private _isInteractionInFrontOfButton(collidablePos: Vector3) {\r\n        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;\r\n    }\r\n\r\n    /**\r\n     * Get the height of the touchPoint from the collidable part of the button\r\n     * @param touchPoint the point to compare to the button, in absolute position\r\n     * @returns the depth of the touch point into the front of the button\r\n     */\r\n    public getPressDepth(touchPoint: Vector3) {\r\n        if (!this._isNearPressed) {\r\n            return 0;\r\n        }\r\n        const interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());\r\n        return this._interactionSurfaceHeight - interactionHeight;\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    protected _getInteractionHeight(interactionPos: Vector3, basePos: Vector3) {\r\n        const frontDir = this.collidableFrontDirection;\r\n        if (frontDir.length() === 0) {\r\n            // The button has no front, just return the distance to the base\r\n            return Vector3.Distance(interactionPos, basePos);\r\n        }\r\n        const d = Vector3.Dot(basePos, frontDir);\r\n        const abc = Vector3.Dot(interactionPos, frontDir);\r\n\r\n        return abc - d;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _generatePointerEventType(providedType: number, nearMeshPosition: Vector3, activeInteractionCount: number): number {\r\n        if (providedType === PointerEventTypes.POINTERDOWN || providedType === PointerEventTypes.POINTERMOVE) {\r\n            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {\r\n                // Near interaction mesh is behind the button, don't send a pointer down\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = true;\r\n                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());\r\n            }\r\n        }\r\n        if (providedType === PointerEventTypes.POINTERUP) {\r\n            if (activeInteractionCount == 0) {\r\n                // We get the release for the down we swallowed earlier, swallow as well\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = false;\r\n            }\r\n        }\r\n\r\n        return providedType;\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"TouchButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        return super._createNode(scene);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        // Clean up toggle observables\r\n        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n        this.onToggleObservable.clear();\r\n\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n * @since 5.0.0\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-button.glb\";\r\n\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _isBackplateVisible = true;\r\n    private _frontMaterial: FluentButtonMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerHoverObserver: Nullable<Observer<Vector3>>;\r\n    private _frontPlateDepth = 0.5;\r\n    private _backPlateDepth = 0.04;\r\n    private _backplateColor = new Color3(0.08, 0.15, 0.55);\r\n    private _backplateToggledColor = new Color3(0.25, 0.4, 0.95);\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public override get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentButtonMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && !!this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = true;\r\n            this._frontMaterial.rightBlobEnable = true;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = false;\r\n            this._frontMaterial.rightBlobEnable = false;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (this._frontPlate && !this.isActiveNearInteraction) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n        this.pointerUpAnimation = () => {\r\n            if (this._frontPlate) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n\r\n        this.onPointerMoveObservable.add((position) => {\r\n            if (this._frontPlate && this.isActiveNearInteraction) {\r\n                const scale = Vector3.Zero();\r\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\r\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\r\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\r\n\r\n                    this._frontPlate.scaling.z = interactionHeight;\r\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\r\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition: Vector3) => {\r\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\r\n        });\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        this.content = panel;\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_collisionMesh`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\r\n            const alphaMesh = CreateBox(\r\n                \"${this.name}_alphaMesh\",\r\n                {\r\n                    width: 1.0,\r\n                    height: 1.0,\r\n                    depth: 1.0,\r\n                },\r\n                scene\r\n            );\r\n            alphaMesh.isPickable = false;\r\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\r\n            alphaMesh.material.alpha = 0.15;\r\n\r\n            const importedFrontPlate = result.meshes[1];\r\n            importedFrontPlate.name = `${this.name}_frontPlate`;\r\n            importedFrontPlate.isPickable = false;\r\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\r\n            alphaMesh.parent = importedFrontPlate;\r\n            importedFrontPlate.parent = collisionMesh;\r\n            if (this._frontMaterial) {\r\n                importedFrontPlate.material = this._frontMaterial;\r\n            }\r\n            this._frontPlate = importedFrontPlate;\r\n        });\r\n\r\n        this._backPlate = CreateBox(\r\n            `${this.name}_backPlate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._backPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(this._textPlate);\r\n\r\n        const tn = new TransformNode(`{this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    protected override _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.albedoColor = this._backplateColor;\r\n        this._backMaterial.renderBorders = true;\r\n        this._backMaterial.renderHoverLight = false;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected override _onToggle(newState: boolean) {\r\n        if (this._backMaterial) {\r\n            if (newState) {\r\n                this._backMaterial.albedoColor = this._backplateToggledColor;\r\n            } else {\r\n                this._backMaterial.albedoColor = this._backplateColor;\r\n            }\r\n        }\r\n\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"] as FluentButtonMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Behavior } from \"core/Behaviors/behavior\";\r\nimport { FollowBehavior } from \"core/Behaviors/Meshes/followBehavior\";\r\nimport { SixDofDragBehavior } from \"core/Behaviors/Meshes/sixDofDragBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { SurfaceMagnetismBehavior } from \"core/Behaviors/Meshes/surfaceMagnetismBehavior\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Default behavior for 3D UI elements.\r\n * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior\r\n * @since 5.0.0\r\n */\r\nexport class DefaultBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _followBehavior: FollowBehavior;\r\n    private _sixDofDragBehavior: SixDofDragBehavior;\r\n    private _surfaceMagnetismBehavior: SurfaceMagnetismBehavior;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _onDragObserver: Nullable<Observer<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>>;\r\n\r\n    /**\r\n     * Instantiates the default behavior\r\n     */\r\n    constructor() {\r\n        this._followBehavior = new FollowBehavior();\r\n        this._sixDofDragBehavior = new SixDofDragBehavior();\r\n        this._surfaceMagnetismBehavior = new SurfaceMagnetismBehavior();\r\n    }\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<Mesh>;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Default\";\r\n    }\r\n\r\n    /**\r\n     *  The follow behavior\r\n     */\r\n    public get followBehavior(): FollowBehavior {\r\n        return this._followBehavior;\r\n    }\r\n\r\n    /**\r\n     *  The six DoF drag behavior\r\n     */\r\n    public get sixDofDragBehavior(): SixDofDragBehavior {\r\n        return this._sixDofDragBehavior;\r\n    }\r\n\r\n    /**\r\n     * The surface magnetism behavior\r\n     */\r\n    public get surfaceMagnetismBehavior(): SurfaceMagnetismBehavior {\r\n        return this._surfaceMagnetismBehavior;\r\n    }\r\n\r\n    /**\r\n     * Enables the follow behavior\r\n     */\r\n    public followBehaviorEnabled: boolean = false;\r\n\r\n    /**\r\n     * Enables the six DoF drag behavior\r\n     */\r\n    public sixDofDragBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     * Enables the surface magnetism behavior\r\n     */\r\n    public surfaceMagnetismBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the default behavior\r\n     * @param ownerMesh The top level mesh\r\n     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh\r\n     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism\r\n     */\r\n    public attach(ownerMesh: Mesh, draggablesMeshes?: Mesh[], sceneUnderstandingMeshes?: AbstractMesh[]): void {\r\n        this._scene = ownerMesh.getScene();\r\n        this.attachedNode = ownerMesh;\r\n\r\n        this._addObservables();\r\n        // Since our observables are bound before the child behaviors', ours are called first\r\n        this._followBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;\r\n        this._sixDofDragBehavior.faceCameraOnDragStart = true;\r\n        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);\r\n        if (sceneUnderstandingMeshes) {\r\n            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;\r\n        }\r\n\r\n        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior\r\n        this._surfaceMagnetismBehavior.enabled = false;\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n        this._followBehavior.detach();\r\n        this._sixDofDragBehavior.detach();\r\n        this._surfaceMagnetismBehavior.detach();\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            this._followBehavior._enabled = !this._sixDofDragBehavior.isMoving && this.followBehaviorEnabled;\r\n        });\r\n        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add((event: { pickInfo: PickingInfo }) => {\r\n            this._sixDofDragBehavior.disableMovement = this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handleVertexShader\";\nconst shader = `precision highp float;attribute vec3 position;uniform vec3 positionOffset;uniform mat4 worldViewProjection;uniform float scale;void main(void) {vec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);gl_Position=worldViewProjection*vPos;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handleVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handlePixelShader\";\nconst shader = `uniform vec3 color;void main(void) {gl_FragColor=vec4(color,1.0);}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handlePixelShader = { name, shader };\n","import type { Scene } from \"core/scene\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HandleMaterial } from \"../materials/handle/handleMaterial\";\r\nimport type { SlateGizmo } from \"./slateGizmo\";\r\nimport { BaseSixDofDragBehavior } from \"core/Behaviors/Meshes/baseSixDofDragBehavior\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * State of the handle regarding user interaction\r\n */\r\nexport enum HandleState {\r\n    /**\r\n     * Handle is idle\r\n     */\r\n    IDLE = 0,\r\n    /**\r\n     * Handle is hovered\r\n     */\r\n    HOVER = 1,\r\n    /**\r\n     * Handle is dragged\r\n     */\r\n    DRAG = 2,\r\n}\r\n\r\n/**\r\n * Base class for SlateGizmo handles\r\n */\r\nexport abstract class GizmoHandle {\r\n    protected _scene: Scene;\r\n    protected _state: HandleState = HandleState.IDLE;\r\n    protected _materials: HandleMaterial[] = [];\r\n\r\n    private _dragStartObserver: Nullable<Observer<any>>;\r\n    private _draggingObserver: Nullable<Observer<any>>;\r\n    private _dragEndObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dragBehavior: BaseSixDofDragBehavior;\r\n\r\n    /**\r\n     * The current state of the handle\r\n     */\r\n    public get state(): HandleState {\r\n        return this._state;\r\n    }\r\n\r\n    private _gizmo: SlateGizmo;\r\n\r\n    /**\r\n     * Returns the gizmo carrying this handle\r\n     */\r\n    public get gizmo() {\r\n        return this._gizmo;\r\n    }\r\n\r\n    /**\r\n     * Sets hover state\r\n     */\r\n    public set hover(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.HOVER;\r\n        } else {\r\n            this._state &= ~HandleState.HOVER;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n    /**\r\n     * Sets drag state\r\n     */\r\n    public set drag(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.DRAG;\r\n        } else {\r\n            this._state &= ~HandleState.DRAG;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * Node of this handle\r\n     */\r\n    public node: TransformNode;\r\n\r\n    /**\r\n     * Creates a handle for a SlateGizmo\r\n     * @param gizmo associated SlateGizmo\r\n     * @param scene scene\r\n     */\r\n    constructor(gizmo: SlateGizmo, scene: Scene) {\r\n        this._scene = scene;\r\n        this._gizmo = gizmo;\r\n\r\n        this.node = this.createNode();\r\n        this.node.reservedDataStore = {\r\n            handle: this,\r\n        };\r\n    }\r\n\r\n    protected _createMaterial(positionOffset?: Vector3) {\r\n        const mat = new HandleMaterial(\"handle\", this._scene);\r\n        if (positionOffset) {\r\n            mat._positionOffset = positionOffset;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    private _updateMaterial() {\r\n        const state = this._state;\r\n        for (const mat of this._materials) {\r\n            mat.hover = false;\r\n            mat.drag = false;\r\n        }\r\n\r\n        if (state & HandleState.DRAG) {\r\n            for (const mat of this._materials) {\r\n                mat.drag = true;\r\n            }\r\n        } else if (state & HandleState.HOVER) {\r\n            for (const mat of this._materials) {\r\n                mat.hover = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds callbacks from dragging interaction\r\n     * @param dragStartFn Function to call on drag start\r\n     * @param dragFn Function to call on drag\r\n     * @param dragEndFn Function to call on drag end\r\n     */\r\n    public setDragBehavior(dragStartFn: (event: { position: Vector3 }) => void, dragFn: (event: { position: Vector3 }) => void, dragEndFn: () => void) {\r\n        const dragBehavior = new BaseSixDofDragBehavior();\r\n\r\n        this._dragBehavior = dragBehavior;\r\n\r\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\r\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\r\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\r\n\r\n        this._dragBehavior.attach(this.node);\r\n    }\r\n\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * Should be overridden by child classes\r\n     * @returns created node\r\n     */\r\n    public abstract createNode(): TransformNode;\r\n\r\n    /**\r\n     * Disposes the handle\r\n     */\r\n    public dispose() {\r\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\r\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\r\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\r\n\r\n        this._dragBehavior.detach();\r\n\r\n        for (const material of this._materials) {\r\n            material.dispose();\r\n        }\r\n        this.node.dispose();\r\n    }\r\n}\r\n\r\n/**\r\n * Side handle class that rotates the slate\r\n */\r\nexport class SideHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create a simple vertical rectangle\r\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\r\n        const sideNode = new TransformNode(\"side\", this._scene);\r\n        verticalBox.parent = sideNode;\r\n\r\n        const mat = this._createMaterial();\r\n        verticalBox.material = mat;\r\n        verticalBox.isNearGrabbable = true;\r\n        this._materials.push(mat);\r\n\r\n        return sideNode;\r\n    }\r\n}\r\n\r\n/**\r\n * Corner handle that resizes the slate\r\n */\r\nexport class CornerHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create 2 boxes making a bottom left corner\r\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\r\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\r\n\r\n        const angleNode = new TransformNode(\"angle\", this._scene);\r\n        horizontalBox.parent = angleNode;\r\n        verticalBox.parent = angleNode;\r\n\r\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\r\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\r\n        verticalBox.isNearGrabbable = true;\r\n        horizontalBox.isNearGrabbable = true;\r\n\r\n        this._materials.push(horizontalBox.material as HandleMaterial);\r\n        this._materials.push(verticalBox.material as HandleMaterial);\r\n        return angleNode;\r\n    }\r\n}\r\n","import { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Color3, TmpColors } from \"core/Maths/math.color\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport \"./shaders/handle.vertex\";\r\nimport \"./shaders/handle.fragment\";\r\n\r\n/**\r\n * Class used to render gizmo handles with fluent design\r\n */\r\nexport class HandleMaterial extends ShaderMaterial {\r\n    private _hover: boolean = false;\r\n    private _drag: boolean = false;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _color: Color3 = new Color3();\r\n    private _scale: number = 1;\r\n    private _targetColor: Color3;\r\n    private _targetScale: number;\r\n    private _lastTick = -1;\r\n\r\n    /**\r\n     * Is the material indicating hovering state\r\n     */\r\n    public get hover(): boolean {\r\n        return this._hover;\r\n    }\r\n\r\n    public set hover(b: boolean) {\r\n        this._hover = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Is the material indicating drag state\r\n     */\r\n    public get drag(): boolean {\r\n        return this._drag;\r\n    }\r\n\r\n    public set drag(b: boolean) {\r\n        this._drag = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Length of animation\r\n     */\r\n    public animationLength: number = 100;\r\n\r\n    /**\r\n     * Color of the handle when hovered\r\n     */\r\n    public hoverColor: Color3 = new Color3(0, 0.467, 0.84);\r\n\r\n    /**\r\n     * Color of the handle when idle\r\n     */\r\n    public baseColor: Color3 = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Scale of the handle when hovered\r\n     */\r\n    public hoverScale: number = 0.75;\r\n\r\n    /**\r\n     * Scale of the handle when idle\r\n     */\r\n    public baseScale: number = 0.35;\r\n\r\n    /**\r\n     * Scale of the handle when dragged\r\n     */\r\n    public dragScale: number = 0.55;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a handle material\r\n     * @param name Name of the material\r\n     * @param scene Scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene, \"handle\", {\r\n            attributes: [\"position\"],\r\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n        });\r\n\r\n        this._updateInterpolationTarget();\r\n\r\n        // Register callback for scene after render\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            const delta = tick - this._lastTick;\r\n\r\n            const scaleDiff = this._targetScale - this._scale;\r\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\r\n\r\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\r\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\r\n            this._color.addToRef(colorDiff, this._color);\r\n\r\n            this.setColor3(\"color\", this._color);\r\n            this.setFloat(\"scale\", this._scale);\r\n            this.setVector3(\"positionOffset\", this._positionOffset);\r\n\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _updateInterpolationTarget() {\r\n        if (this.drag) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.dragScale;\r\n        } else if (this.hover) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.hoverScale;\r\n        } else {\r\n            this._targetColor = this.baseColor;\r\n            this._targetScale = this.baseScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the handle material\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\r\n    }\r\n}\r\n","import { Gizmo } from \"core/Gizmos/gizmo\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PivotTools } from \"core/Misc/pivotTools\";\r\nimport type { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { HolographicSlate } from \"../controls/holographicSlate\";\r\nimport type { GizmoHandle } from \"./gizmoHandle\";\r\nimport { CornerHandle, SideHandle } from \"./gizmoHandle\";\r\n\r\n// Mask contains the influence of the drag offset vectors on dimensions or origin of the slate\r\n// Mask vector is multiplied to the offset vector\r\ntype HandleMasks = {\r\n    dimensions: Vector3;\r\n    origin: Vector3;\r\n};\r\n\r\n/**\r\n * Gizmo to resize 2D slates\r\n */\r\nexport class SlateGizmo extends Gizmo {\r\n    private _boundingDimensions = new Vector3(0, 0, 0);\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<AbstractMesh>>>;\r\n    private _renderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _tmpQuaternion = new Quaternion();\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    // Ordered bl, br, tr, tl\r\n    private _corners: CornerHandle[] = [];\r\n    // Ordered left, bottom, right, top\r\n    private _sides: SideHandle[] = [];\r\n    private _handlesParent: TransformNode;\r\n    private _handleHovered: Nullable<GizmoHandle>;\r\n    private _handleDragged: Nullable<GizmoHandle>;\r\n\r\n    private _boundingBoxGizmo = {\r\n        min: new Vector3(),\r\n        max: new Vector3(),\r\n    };\r\n\r\n    /**\r\n     * Value we use to offset handles from mesh\r\n     */\r\n    private _margin = 0.35;\r\n    private _handleSize = 0.075;\r\n    private _attachedSlate: Nullable<HolographicSlate> = null;\r\n    private _existingSlateScale = new Vector3();\r\n    /**\r\n     * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\r\n     */\r\n    public fixedScreenSize = false;\r\n    /**\r\n     * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\r\n     */\r\n    public fixedScreenSizeDistanceFactor = 10;\r\n\r\n    /**\r\n     * The slate attached to this gizmo\r\n     */\r\n    public set attachedSlate(control: Nullable<HolographicSlate>) {\r\n        if (control) {\r\n            this.attachedMesh = control.mesh;\r\n            this.updateBoundingBox();\r\n\r\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\r\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\r\n                    this._handleHovered.hover = false;\r\n                    this._handleHovered = null;\r\n                }\r\n\r\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\r\n                    const handle = pickedMesh.parent.reservedDataStore.handle as GizmoHandle;\r\n                    if (handle.gizmo === this) {\r\n                        this._handleHovered = handle;\r\n                        this._handleHovered.hover = true;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this._attachedSlate) {\r\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\r\n        }\r\n        this._attachedSlate = control;\r\n    }\r\n\r\n    public get attachedSlate(): Nullable<HolographicSlate> {\r\n        return this._attachedSlate;\r\n    }\r\n\r\n    constructor(utilityLayer?: UtilityLayerRenderer) {\r\n        super(utilityLayer);\r\n\r\n        this._createNode();\r\n        this.updateScale = false;\r\n\r\n        this._renderObserver = this.gizmoLayer.originalScene.onBeforeRenderObservable.add(() => {\r\n            // Only update the bounding box if scaling has changed\r\n            if (this.attachedMesh && !this._existingSlateScale.equals(this.attachedMesh.scaling)) {\r\n                this.updateBoundingBox();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createNode() {\r\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\r\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\r\n\r\n        const masksCorners = [\r\n            {\r\n                dimensions: new Vector3(-1, -1, 0),\r\n                origin: new Vector3(1, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, -1, 0),\r\n                origin: new Vector3(0, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, 1, 0),\r\n                origin: new Vector3(0, 1, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(-1, 1, 0),\r\n                origin: new Vector3(1, 1, 0),\r\n            },\r\n        ];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._corners.push(corner);\r\n            corner.node.rotation.z = (Math.PI / 2) * i;\r\n\r\n            corner.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorCorners(\r\n                corner,\r\n                (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true),\r\n                masksCorners[i]\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._sides.push(side);\r\n            side.node.rotation.z = (Math.PI / 2) * i;\r\n            side.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\r\n        }\r\n\r\n        this._handlesParent.parent = this._rootMesh;\r\n    }\r\n\r\n    private _keepAspectRatio(vector: Vector3, aspectRatio: number, invertDiagonal: boolean = false) {\r\n        const axis = TmpVectors.Vector3[0];\r\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\r\n        if (invertDiagonal) {\r\n            axis.y *= -1;\r\n        }\r\n        const dot = Vector3.Dot(vector, axis);\r\n        vector.copyFrom(axis).scaleInPlace(dot);\r\n    }\r\n\r\n    private _clampDimensions(vector: Vector3, dimensions: Vector3, mask: Vector3, keepAspectRatio: boolean = false) {\r\n        const impact = TmpVectors.Vector3[0];\r\n        impact.copyFrom(vector).multiplyInPlace(mask);\r\n\r\n        const clampedDimensions = TmpVectors.Vector3[1];\r\n        clampedDimensions.copyFromFloats(\r\n            Math.max(this._attachedSlate!.minDimensions.x, impact.x + dimensions.x),\r\n            Math.max(this._attachedSlate!.minDimensions.y, impact.y + dimensions.y),\r\n            0\r\n        );\r\n\r\n        if (keepAspectRatio) {\r\n            // Extra logic to ensure the ratio is maintained when the vector has been clamped\r\n            const ratio = dimensions.x / dimensions.y;\r\n            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);\r\n            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);\r\n        }\r\n\r\n        // Calculating the real impact of vector on clamped dimensions\r\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\r\n\r\n        vector.x = Math.sign(vector.x) * Math.abs(impact.x);\r\n        vector.y = Math.sign(vector.y) * Math.abs(impact.y);\r\n    }\r\n\r\n    private _moveHandle(originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks, isCorner: boolean) {\r\n        if (!this._attachedSlate) {\r\n            return;\r\n        }\r\n\r\n        if (isCorner) {\r\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\r\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\r\n        }\r\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\r\n\r\n        const offsetOriginMasked = TmpVectors.Vector3[0];\r\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\r\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\r\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\r\n\r\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\r\n        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);\r\n    }\r\n\r\n    private _assignDragBehaviorCorners(\r\n        handle: GizmoHandle,\r\n        moveFn: (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => void,\r\n        masks: HandleMasks\r\n    ) {\r\n        const dimensionsStart = new Vector3();\r\n        const originStart = new Vector3();\r\n        const dragOrigin = new Vector3();\r\n        const toObjectFrame = new Matrix();\r\n        const dragPlaneNormal = new Vector3();\r\n\r\n        const projectToRef = (position: Vector3, normal: Vector3, origin: Vector3, ref: Vector3) => {\r\n            // Projects on the plane with its normal and origin\r\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\r\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\r\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\r\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[0].addToRef(origin, ref);\r\n        };\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                dimensionsStart.set(this.attachedSlate.dimensions.x, this.attachedSlate.dimensions.y, Epsilon);\r\n                originStart.copyFrom(this.attachedSlate.origin);\r\n                dragOrigin.copyFrom(event.position);\r\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\r\n                toObjectFrame.invert();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\r\n                dragPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\r\n                this._tmpVector.subtractInPlace(dragOrigin);\r\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\r\n\r\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\r\n                this.attachedSlate._positionElements();\r\n                this.updateBoundingBox();\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    private _assignDragBehaviorSides(handle: GizmoHandle, dragPlaneNormal: Vector3) {\r\n        const quaternionOrigin = new Quaternion();\r\n        const dragOrigin = new Vector3();\r\n        const directionOrigin = new Vector3();\r\n        const worldPivot = new Vector3();\r\n        const worldPlaneNormal = new Vector3();\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion!);\r\n                dragOrigin.copyFrom(event.position);\r\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\r\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\r\n                worldPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                this._tmpVector.copyFrom(event.position);\r\n                this._tmpVector.subtractInPlace(worldPivot);\r\n                this._tmpVector.normalize();\r\n\r\n                const angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\r\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\r\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion!);\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    protected override _attachedNodeChanged(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.updateBoundingBox();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the bounding box information for the gizmo\r\n     */\r\n    public updateBoundingBox() {\r\n        if (this.attachedMesh) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\r\n\r\n            // Store original parent\r\n            const originalParent = this.attachedMesh.parent;\r\n            this.attachedMesh.setParent(null);\r\n\r\n            this._update();\r\n\r\n            // Rotate based on axis\r\n            if (!this.attachedMesh.rotationQuaternion) {\r\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\r\n            }\r\n\r\n            // Store original position and reset mesh to origin before computing the bounding box\r\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\r\n            this._tmpVector.copyFrom(this.attachedMesh.position);\r\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\r\n            this.attachedMesh.position.set(0, 0, 0);\r\n\r\n            // Update bounding dimensions/positions\r\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\r\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\r\n            this._boundingBoxGizmo.min = boundingMinMax.min;\r\n            this._boundingBoxGizmo.max = boundingMinMax.max;\r\n\r\n            // Update handles of the gizmo\r\n            this._updateHandlesPosition();\r\n            this._updateHandlesScaling();\r\n\r\n            // Restore position/rotation values\r\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\r\n            this.attachedMesh.position.copyFrom(this._tmpVector);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedMesh);\r\n\r\n            // Restore original parent\r\n            this.attachedMesh.setParent(originalParent);\r\n            this.attachedMesh.computeWorldMatrix(true);\r\n\r\n            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);\r\n        }\r\n    }\r\n\r\n    private _updateHandlesPosition() {\r\n        const min = this._boundingBoxGizmo.min.clone();\r\n        const max = this._boundingBoxGizmo.max.clone();\r\n\r\n        const handleScaling = this._corners[0].node.scaling.length();\r\n        min.x -= this._margin * handleScaling;\r\n        min.y -= this._margin * handleScaling;\r\n        max.x += this._margin * handleScaling;\r\n        max.y += this._margin * handleScaling;\r\n\r\n        const center = min.add(max).scaleInPlace(0.5);\r\n\r\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\r\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\r\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\r\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\r\n\r\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\r\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\r\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\r\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\r\n    }\r\n\r\n    private _updateHandlesScaling() {\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            const scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;\r\n            const scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;\r\n            const scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;\r\n            for (let index = 0; index < this._corners.length; index++) {\r\n                this._corners[index].node.scaling.setAll(scale);\r\n            }\r\n            for (let index = 0; index < this._sides.length; index++) {\r\n                this._sides[index].node.scaling.setAll(scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected override _update() {\r\n        super._update();\r\n\r\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            if (this.fixedScreenSize) {\r\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\r\n                const distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\r\n                for (let i = 0; i < this._corners.length; i++) {\r\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n                for (let i = 0; i < this._sides.length; i++) {\r\n                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n            }\r\n            this._updateHandlesPosition();\r\n        }\r\n    }\r\n\r\n    public override dispose() {\r\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\r\n\r\n        // Will dispose rootMesh and all descendants\r\n        super.dispose();\r\n\r\n        for (const corner of this._corners) {\r\n            corner.dispose();\r\n        }\r\n\r\n        for (const side of this._sides) {\r\n            side.dispose();\r\n        }\r\n    }\r\n}\r\n","import { ContentDisplay3D } from \"./contentDisplay3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { SlateGizmo } from \"../gizmos/slateGizmo\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Vector4 } from \"core/Maths/math\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Quaternion, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Class used to create a holographic slate\r\n * @since 5.0.0\r\n */\r\nexport class HolographicSlate extends ContentDisplay3D {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    public static ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static CLOSE_ICON_FILENAME: string = \"IconClose.png\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static FOLLOW_ICON_FILENAME: string = \"IconFollowMe.png\";\r\n\r\n    private static _DEFAULT_TEXT_RESOLUTION_Y = 102.4;\r\n\r\n    /**\r\n     * Margin between title bar and contentplate\r\n     */\r\n    public titleBarMargin = 0.005;\r\n\r\n    /**\r\n     * Origin in local coordinates (top left corner)\r\n     */\r\n    public origin = new Vector3(0, 0, 0);\r\n\r\n    private _dimensions = new Vector2(21.875, 12.5);\r\n    private _titleBarHeight = 0.625;\r\n\r\n    private _titleBarMaterial: FluentBackplateMaterial;\r\n    private _backMaterial: FluentBackplateMaterial;\r\n    private _contentMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _positionChangedObserver: Nullable<Observer<{ position: Vector3 }>>;\r\n\r\n    private _titleText = \"\";\r\n    private _titleTextComponent: TextBlock;\r\n\r\n    private _contentViewport: Viewport;\r\n    private _contentDragBehavior: PointerDragBehavior;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the slate\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    /** @internal */\r\n    public _gizmo: SlateGizmo;\r\n\r\n    protected _titleBar: Mesh;\r\n    protected _titleBarTitle: Mesh;\r\n    protected _contentPlate: Mesh;\r\n    protected _backPlate: Mesh;\r\n    /** @internal */\r\n    public _followButton: TouchHolographicButton;\r\n    protected _closeButton: TouchHolographicButton;\r\n    protected override _contentScaleRatio = 1;\r\n\r\n    /**\r\n     * 2D dimensions of the slate\r\n     */\r\n    public get dimensions() {\r\n        return this._dimensions;\r\n    }\r\n    public set dimensions(value) {\r\n        //clamp, respecting ratios\r\n        let scale = 1.0;\r\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\r\n            const newRatio = value.x / value.y;\r\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\r\n            if (minRatio > newRatio) {\r\n                // We just need to make sure the x-val is greater than the min\r\n                scale = this.minDimensions.x / value.x;\r\n            } else {\r\n                // We just need to make sure the y-val is greater than the min\r\n                scale = this.minDimensions.y / value.y;\r\n            }\r\n        }\r\n\r\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\r\n        this._updatePivot();\r\n        this._positionElements();\r\n    }\r\n\r\n    /**\r\n     * Minimum dimensions of the slate\r\n     */\r\n    public minDimensions = new Vector2(15.625, 6.25);\r\n\r\n    /**\r\n     * Default dimensions of the slate\r\n     */\r\n    public readonly defaultDimensions = this._dimensions.clone();\r\n\r\n    /**\r\n     * Height of the title bar component\r\n     */\r\n    public get titleBarHeight() {\r\n        return this._titleBarHeight;\r\n    }\r\n    public set titleBarHeight(value) {\r\n        this._titleBarHeight = value;\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the meshes\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._titleBar.renderingGroupId = id;\r\n        this._titleBarTitle.renderingGroupId = id;\r\n        this._contentPlate.renderingGroupId = id;\r\n        this._backPlate.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._titleBar.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * The title text displayed at the top of the slate\r\n     */\r\n    public set title(title: string) {\r\n        this._titleText = title;\r\n        if (this._titleTextComponent) {\r\n            this._titleTextComponent.text = title;\r\n        }\r\n    }\r\n    public get title() {\r\n        return this._titleText;\r\n    }\r\n\r\n    /**\r\n     * Creates a new slate\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\r\n        this._followButton.isToggleButton = true;\r\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\r\n\r\n        this._contentViewport = new Viewport(0, 0, 1, 1);\r\n        this._contentDragBehavior = new PointerDragBehavior({\r\n            dragPlaneNormal: new Vector3(0, 0, -1),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected override _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._contentMaterial.albedoTexture = facadeTexture;\r\n        this._resetContentPositionAndZoom();\r\n        this._applyContentViewport();\r\n\r\n        facadeTexture.attachToMesh(this._contentPlate, true);\r\n    }\r\n\r\n    private _addControl(control: Control3D): void {\r\n        control._host = this._host;\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n        }\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"HolographicSlate\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionElements() {\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n        const titleBar = this._titleBar;\r\n        const titleBarTitle = this._titleBarTitle;\r\n        const contentPlate = this._contentPlate;\r\n        const backPlate = this._backPlate;\r\n\r\n        if (followButton && closeButton && titleBar) {\r\n            closeButton.scaling.setAll(this.titleBarHeight);\r\n            followButton.scaling.setAll(this.titleBarHeight);\r\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n\r\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\r\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\r\n\r\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\r\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\r\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n\r\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\r\n            titleBarTitle.position\r\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\r\n                .addInPlace(this.origin);\r\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\r\n            backPlate.position\r\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\r\n                .addInPlace(this.origin);\r\n\r\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\r\n            this._titleTextComponent.host.scaleTo(\r\n                (HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y,\r\n                HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y\r\n            );\r\n\r\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\r\n            this._contentViewport.width = this._contentScaleRatio;\r\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\r\n\r\n            this._applyContentViewport();\r\n            if (this._gizmo) {\r\n                this._gizmo.updateBoundingBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyContentViewport() {\r\n        if (this._contentPlate?.material && (this._contentPlate.material as FluentMaterial).albedoTexture) {\r\n            const tex = (this._contentPlate.material as FluentMaterial).albedoTexture as Texture;\r\n            tex.uScale = this._contentScaleRatio;\r\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\r\n            tex.uOffset = this._contentViewport.x;\r\n            tex.vOffset = this._contentViewport.y;\r\n        }\r\n    }\r\n\r\n    private _resetContentPositionAndZoom() {\r\n        this._contentViewport.x = 0;\r\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\r\n        this._contentScaleRatio = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updatePivot() {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        // Update pivot point so it is at the center of geometry\r\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\r\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\r\n        center.addInPlace(this.origin);\r\n        center.z = 0;\r\n\r\n        const origin = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\r\n        this.mesh.setPivotPoint(center);\r\n        const origin2 = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\r\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        const node = new Mesh(\"slate_\" + this.name, scene);\r\n\r\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle.parent = node;\r\n        this._titleBarTitle.isPickable = false;\r\n\r\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\r\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\r\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\r\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._titleTextComponent.color = \"white\";\r\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\r\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\r\n        adt.addControl(this._titleTextComponent);\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\r\n        } else {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\r\n        }\r\n\r\n        this._titleBar.parent = node;\r\n        this._titleBar.isNearGrabbable = true;\r\n        this._contentPlate.parent = node;\r\n        this._backPlate.parent = node;\r\n        this._attachContentPlateBehavior();\r\n\r\n        this._addControl(this._followButton);\r\n        this._addControl(this._closeButton);\r\n\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n\r\n        followButton.node!.parent = node;\r\n        closeButton.node!.parent = node;\r\n\r\n        this._positionElements();\r\n\r\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\r\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\r\n\r\n        this._followButton.isBackplateVisible = false;\r\n        this._closeButton.isBackplateVisible = false;\r\n\r\n        this._followButton.onToggleObservable.add((isToggled) => {\r\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\r\n            if (this._defaultBehavior.followBehaviorEnabled) {\r\n                this._defaultBehavior.followBehavior.recenter();\r\n            }\r\n        });\r\n\r\n        this._closeButton.onPointerClickObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        node.rotationQuaternion = Quaternion.Identity();\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    private _attachContentPlateBehavior() {\r\n        this._contentDragBehavior.attach(this._contentPlate);\r\n        this._contentDragBehavior.moveAttached = false;\r\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\r\n        this._contentDragBehavior.updateDragPlane = false;\r\n\r\n        const origin = new Vector3();\r\n        const worldDimensions = new Vector3();\r\n        const upWorld = new Vector3();\r\n        const rightWorld = new Vector3();\r\n        const projectedOffset = new Vector2();\r\n        let startViewport: Viewport;\r\n        let worldMatrix: Matrix;\r\n\r\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            startViewport = this._contentViewport.clone();\r\n            worldMatrix = this.node.computeWorldMatrix(true);\r\n\r\n            origin.copyFrom(event.dragPlanePoint);\r\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\r\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\r\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\r\n            upWorld.copyFromFloats(0, 1, 0);\r\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\r\n            rightWorld.copyFromFloats(1, 0, 0);\r\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\r\n            upWorld.normalize();\r\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\r\n            rightWorld.normalize();\r\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\r\n        });\r\n\r\n        const offset = new Vector3();\r\n        this._contentDragBehavior.onDragObservable.add((event) => {\r\n            offset.copyFrom(event.dragPlanePoint);\r\n            offset.subtractInPlace(origin);\r\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\r\n\r\n            // By default, content takes full width available and height is cropped to keep aspect ratio\r\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\r\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\r\n            this._applyContentViewport();\r\n        });\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: AbstractMesh) {\r\n        // TODO share materials\r\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\r\n\r\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\r\n        this._contentMaterial.renderBorders = true;\r\n\r\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\r\n        this._backMaterial.lineWidth = Epsilon;\r\n        this._backMaterial.radius = 0.005;\r\n        this._backMaterial.backFaceCulling = true;\r\n\r\n        this._titleBar.material = this._titleBarMaterial;\r\n        this._contentPlate.material = this._contentMaterial;\r\n        this._backPlate.material = this._backMaterial;\r\n\r\n        this._resetContent();\r\n        this._applyContentViewport();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _prepareNode(scene: Scene): void {\r\n        super._prepareNode(scene);\r\n        this._gizmo = new SlateGizmo(this._host.utilityLayer!);\r\n        this._gizmo.attachedSlate = this;\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._defaultBehavior.attach(this.node as Mesh, [this._titleBar]);\r\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\r\n            this._followButton.isToggled = false;\r\n        });\r\n\r\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\r\n            this._gizmo.updateBoundingBox();\r\n        });\r\n\r\n        this._updatePivot();\r\n        this.resetDefaultAspectAndPose(false);\r\n    }\r\n\r\n    /**\r\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\r\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\r\n     */\r\n    public resetDefaultAspectAndPose(resetAspect: boolean = true) {\r\n        if (!this._host || !this._host.utilityLayer || !this.node) {\r\n            return;\r\n        }\r\n        const scene = this._host.utilityLayer.utilityLayerScene;\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const worldMatrix = camera.getWorldMatrix();\r\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\r\n            this.origin.setAll(0);\r\n            this._gizmo.updateBoundingBox();\r\n            const pivot = this.node.getAbsolutePivotPoint();\r\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\r\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\r\n\r\n            if (resetAspect) {\r\n                this.dimensions = this.defaultDimensions;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n        this._titleBarMaterial.dispose();\r\n        this._contentMaterial.dispose();\r\n\r\n        this._titleBar.dispose();\r\n        this._titleBarTitle.dispose();\r\n        this._contentPlate.dispose();\r\n        this._backPlate.dispose();\r\n\r\n        this._followButton.dispose();\r\n        this._closeButton.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\r\n\r\n        this._defaultBehavior.detach();\r\n        this._gizmo.dispose();\r\n        this._contentDragBehavior.detach();\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected override _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\n\r\n/**\r\n * NearMenu that displays buttons and follows the camera\r\n * @since 5.0.0\r\n */\r\nexport class NearMenu extends TouchHolographicMenu {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    private static _ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    private static _PIN_ICON_FILENAME: string = \"IconPin.png\";\r\n\r\n    private _pinButton: TouchHolographicButton;\r\n    private _dragObserver: Nullable<\r\n        Observer<{\r\n            delta: Vector3;\r\n            position: Vector3;\r\n            pickInfo: PickingInfo;\r\n        }>\r\n    >;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the near menu\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    private _isPinned: boolean = false;\r\n    /**\r\n     * Indicates if the near menu is world-pinned\r\n     */\r\n    public get isPinned(): boolean {\r\n        return this._isPinned;\r\n    }\r\n\r\n    public set isPinned(value: boolean) {\r\n        // Tell the pin button to toggle if this was called manually, for clean state control\r\n        if (this._pinButton.isToggled !== value) {\r\n            this._pinButton.isToggled = value;\r\n            return;\r\n        }\r\n\r\n        this._isPinned = value;\r\n\r\n        if (value) {\r\n            this._defaultBehavior.followBehaviorEnabled = false;\r\n        } else {\r\n            this._defaultBehavior.followBehaviorEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _createPinButton(parent: TransformNode) {\r\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\r\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\r\n        control.parent = this;\r\n        control._host = this._host;\r\n        control.isToggleButton = true;\r\n        control.onToggleObservable.add((newState) => {\r\n            this.isPinned = newState;\r\n        });\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n            if (control.node) {\r\n                control.node.parent = parent;\r\n            }\r\n        }\r\n\r\n        return control;\r\n    }\r\n\r\n    protected override _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._pinButton = this._createPinButton(node);\r\n        this.isPinned = false;\r\n\r\n        this._defaultBehavior.attach(node, [this._backPlate]);\r\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\r\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\r\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\r\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\r\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\r\n\r\n        this._backPlate.isNearGrabbable = true;\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected override _finalProcessing() {\r\n        super._finalProcessing();\r\n\r\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a near menu GUI 3D control\r\n     * @param name name of the near menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\r\n            this.isPinned = true;\r\n        });\r\n\r\n        this.backPlateMargin = 1;\r\n    }\r\n\r\n    /**\r\n     * Disposes the near menu\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n\r\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\r\n        this._defaultBehavior.detach();\r\n    }\r\n}\r\n","import { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        const target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n        const newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected override _finalProcessing() {\r\n        const meshes = [];\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (let count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                const distance1 = a.position.lengthSquared();\r\n                const distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            const radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            const cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            const difference2D = TmpVectors.Vector2[0];\r\n            const difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        const combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        const minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < Math.pow(combinedRadius, 2.0)) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B30(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B42(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B59(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B121(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B79(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B77(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B67(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B68(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B91(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B73(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B122(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B51(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B50(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B65(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B74(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B64(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B108(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B114(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B75(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B110(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B132(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q30;\n#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\n#else\nBlob_Color_Q30=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);vec3 Normalized_Q38=normalize(vNormal);vec3 Normalized_Q71=normalize(vTangent);vec4 Color_Q83;\n#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\n#else\nColor_Q83=vec4(0,0,0,0);\n#endif\nfloat X_Q90;float Y_Q90;float Z_Q90;float W_Q90;X_Q90=vExtra1.x;Y_Q90=vExtra1.y;Z_Q90=vExtra1.z;W_Q90=vExtra1.w;vec4 Linear_Q43;Linear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q43.a=_Sky_Color_.a;vec4 Linear_Q44;Linear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q44.a=_Horizon_Color_.a;vec4 Linear_Q45;Linear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q45.a=_Ground_Color_.a;vec3 Left_Index_Q64;vec3 Right_Index_Q64;vec3 Left_Index_Middle_Q64;vec3 Right_Index_Middle_Q64;Finger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);vec4 Linear_Q46;Linear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q46.a=_Albedo_.a;vec3 Normalized_Q107=normalize(vBinormal);vec3 Incident_Q70=normalize(vPosition-cameraPosition);vec3 New_Normal_Q79;Bulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);float Result_Q77;SSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);vec4 Result_Q91;Scale_Color_B91(Color_Q83,X_Q90,Result_Q91);float Transmit_Q122;float Reflect_Q122;Fast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);float Product_Q125=Y_Q90*Y_Q90;vec3 NearP_Q65;vec3 NearQ_Q65;float Distance_Q65;Min_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);vec3 NearP_Q63;vec3 NearQ_Q63;float Distance_Q63;Min_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);vec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);vec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);vec4 Result_Q132;Rim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);float Dot_Q72=dot(Incident_Q70, Normalized_Q71);float MaxAB_Q123=max(Reflect_Q122,Product_Q125);float NotInShadow_Q67;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\n#else\nNotInShadow_Q67=1.0;\n#endif\nfloat NotInShadow_Q68;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\n#else\nNotInShadow_Q68=1.0;\n#endif\nvec4 Reflected_Color_Q51;vec4 Indirect_Diffuse_Q51;\n#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\n#else\nReflected_Color_Q51=vec4(0,0,0,1);Indirect_Diffuse_Q51=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q50;vec4 Indirect_Color_Q50;\n#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\n#else\nReflected_Color_Q50=vec4(0,0,0,1);Indirect_Color_Q50=vec4(0,0,0,1);\n#endif\nfloat Hue_Q75;float Saturation_Q75;float Value_Q75;float Alpha_Q75;vec3 HSV_Q75;To_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);float Hue_Q127;float Saturation_Q127;float Value_Q127;float Alpha_Q127;vec3 HSV_Q127;To_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);float Result_Q110;Code_B110(Dot_Q72,Result_Q110);float AbsA_Q76=abs(Result_Q110);float MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);vec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;vec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;vec3 HSV_Out_Q126;VaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);float Out_Q114;Remap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);float Product_Q106;Product_Q106=AbsA_Q76*_Hue_Shift_;float X_Q128;float Y_Q128;float Z_Q128;To_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);vec2 Vec2_Q112=vec2(Out_Q114,0.5);vec3 HSV_Out_Q108;VaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);vec4 Color_Q129;From_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);vec4 Color_Q111;\n#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\n#else\nColor_Q111=vec4(0,0,0,0);\n#endif\nfloat X_Q74;float Y_Q74;float Z_Q74;To_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);vec4 Result_Q131=_Rim_Intensity_*Color_Q129;vec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;vec4 Color_Q73;From_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);vec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;vec4 Result_Q121;Fragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);vec4 Result_Q59;Scale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);vec4 sRGB_Q42;FastLinearTosRGB_B42(Result_Q59,sRGB_Q42);vec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;vec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;vec4 Out_Color=Result_Q40;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B32(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B23(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B24(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B130(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B60(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B78(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B93(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B28(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B69(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B36(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B37(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B105(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q85;XY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q27;vec3 Tangent_World_N_Q27;float Tangent_Length_Q27;Tangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q27=length(Tangent_World_Q27);Tangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;vec3 Normal_World_Q60;vec3 Normal_World_N_Q60;float Normal_Length_Q60;Object_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);float X_Q78;float Y_Q78;float Z_Q78;To_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);vec3 Nrm_World_Q26;Nrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q28;vec3 Binormal_World_N_Q28;float Binormal_Length_Q28;Object_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);float Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;float Result_Q69;Pick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);float Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;bool Not_Greater_Than_Q37;bool Greater_Than_Q37;Greater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);vec4 Linear_Q101;Linear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q101.a=_Left_Color_.a;vec4 Linear_Q102;Linear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q102.a=_Right_Color_.a;vec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;vec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);float Result_Q36;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);float Result_Q94;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);vec3 New_P_Q130;vec2 New_UV_Q130;float Radial_Gradient_Q130;vec3 Radial_Dir_Q130;vec3 New_Normal_Q130;Move_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);float X_Q98;float Y_Q98;X_Q98=New_UV_Q130.x;Y_Q98=New_UV_Q130.y;vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);vec3 Nrm_World_Q32;Object_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);vec4 Blob_Info_Q23;\n#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\n#else\nBlob_Info_Q23=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q24;\n#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\n#else\nBlob_Info_Q24=vec4(0,0,0,0);\n#endif\nfloat Out_Q105;Remap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);float X_Q86;float Y_Q86;float Z_Q86;To_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);vec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);float Minus_F_Q87=-Z_Q86;float R_Q99;float G_Q99;float B_Q99;float A_Q99;R_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;float ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);float Result_Q93;Conditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);vec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);vec3 Position=Pos_World_Q12;vec3 Normal=Nrm_World_Q32;vec2 UV=XY_Q85;vec3 Tangent=Tangent_World_N_Q27;vec3 Binormal=Difference_Q61;vec4 Color=Out_Color_Q34;vec4 Extra1=Vec4_Q89;vec4 Extra2=Blob_Info_Q23;vec4 Extra3=Blob_Info_Q24;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderBar.fragment\";\r\nimport \"./shaders/mrdlSliderBar.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nclass MRDLSliderBarMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Bar material with MRDL\r\n */\r\nexport class MRDLSliderBarMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider bar.\r\n     */\r\n    @serialize()\r\n    public radius = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 1.102;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.76;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.526;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 0.658;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.13;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.964706, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scle for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderBar\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public override clone(name: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderBarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderBarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLSliderBarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderBarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderBarMaterial\", MRDLSliderBarMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B180(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B192(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B209(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B271(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B229(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B227(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B217(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B218(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B241(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B223(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B272(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B201(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B200(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B215(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B224(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B214(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B258(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B264(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B225(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B260(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B282(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q180;\n#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\n#else\nBlob_Color_Q180=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);vec3 Normalized_Q188=normalize(vNormal);vec3 Normalized_Q221=normalize(vTangent);vec4 Color_Q233;\n#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\n#else\nColor_Q233=vec4(0,0,0,0);\n#endif\nfloat X_Q240;float Y_Q240;float Z_Q240;float W_Q240;X_Q240=vExtra1.x;Y_Q240=vExtra1.y;Z_Q240=vExtra1.z;W_Q240=vExtra1.w;vec4 Linear_Q193;Linear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q193.a=_Sky_Color_.a;vec4 Linear_Q194;Linear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q194.a=_Horizon_Color_.a;vec4 Linear_Q195;Linear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q195.a=_Ground_Color_.a;vec3 Left_Index_Q214;vec3 Right_Index_Q214;vec3 Left_Index_Middle_Q214;vec3 Right_Index_Middle_Q214;Finger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);vec4 Linear_Q196;Linear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q196.a=_Albedo_.a;vec3 Normalized_Q257=normalize(vBinormal);vec3 Incident_Q220=normalize(vPosition-cameraPosition);vec3 New_Normal_Q229;Bulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);float Result_Q227;SSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);vec4 Result_Q241;Scale_Color_B241(Color_Q233,X_Q240,Result_Q241);float Transmit_Q272;float Reflect_Q272;Fast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);float Product_Q275=Y_Q240*Y_Q240;vec3 NearP_Q215;vec3 NearQ_Q215;float Distance_Q215;Min_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);vec3 NearP_Q213;vec3 NearQ_Q213;float Distance_Q213;Min_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);vec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);vec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);vec4 Result_Q282;Rim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);float Dot_Q222=dot(Incident_Q220, Normalized_Q221);float MaxAB_Q273=max(Reflect_Q272,Product_Q275);float NotInShadow_Q217;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\n#else\nNotInShadow_Q217=1.0;\n#endif\nfloat NotInShadow_Q218;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\n#else\nNotInShadow_Q218=1.0;\n#endif\nvec4 Reflected_Color_Q201;vec4 Indirect_Diffuse_Q201;\n#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\n#else\nReflected_Color_Q201=vec4(0,0,0,1);Indirect_Diffuse_Q201=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q200;vec4 Indirect_Color_Q200;\n#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\n#else\nReflected_Color_Q200=vec4(0,0,0,1);Indirect_Color_Q200=vec4(0,0,0,1);\n#endif\nfloat Hue_Q225;float Saturation_Q225;float Value_Q225;float Alpha_Q225;vec3 HSV_Q225;To_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);float Hue_Q277;float Saturation_Q277;float Value_Q277;float Alpha_Q277;vec3 HSV_Q277;To_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);float Result_Q260;Code_B260(Dot_Q222,Result_Q260);float AbsA_Q226=abs(Result_Q260);float MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);vec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;vec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;vec3 HSV_Out_Q276;VaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);float Out_Q264;Remap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);float Product_Q256;Product_Q256=AbsA_Q226*_Hue_Shift_;float X_Q278;float Y_Q278;float Z_Q278;To_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);vec2 Vec2_Q262=vec2(Out_Q264,0.5);vec3 HSV_Out_Q258;VaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);vec4 Color_Q279;From_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);vec4 Color_Q261;\n#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\n#else\nColor_Q261=vec4(0,0,0,0);\n#endif\nfloat X_Q224;float Y_Q224;float Z_Q224;To_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);vec4 Result_Q281=_Rim_Intensity_*Color_Q279;vec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;vec4 Color_Q223;From_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);vec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;vec4 Result_Q271;Fragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);vec4 Result_Q209;Scale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);vec4 sRGB_Q192;FastLinearTosRGB_B192(Result_Q209,sRGB_Q192);vec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;vec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;vec4 Out_Color=Result_Q190;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B162(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B182(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B173(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B174(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B280(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B210(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B228(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B243(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B178(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B219(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B186(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B187(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B255(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q235;XY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q177;vec3 Tangent_World_N_Q177;float Tangent_Length_Q177;Tangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q177=length(Tangent_World_Q177);Tangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;vec3 Normal_World_Q210;vec3 Normal_World_N_Q210;float Normal_Length_Q210;Object_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);float X_Q228;float Y_Q228;float Z_Q228;To_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);vec3 Nrm_World_Q176;Nrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q178;vec3 Binormal_World_N_Q178;float Binormal_Length_Q178;Object_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);float Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;float Result_Q219;Pick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);float Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;bool Not_Greater_Than_Q187;bool Greater_Than_Q187;Greater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);vec4 Linear_Q251;Linear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q251.a=_Left_Color_.a;vec4 Linear_Q252;Linear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q252.a=_Right_Color_.a;vec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;vec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);float Result_Q186;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);float Result_Q244;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);vec3 New_P_Q280;vec2 New_UV_Q280;float Radial_Gradient_Q280;vec3 Radial_Dir_Q280;vec3 New_Normal_Q280;Move_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);float X_Q248;float Y_Q248;X_Q248=New_UV_Q280.x;Y_Q248=New_UV_Q280.y;vec3 Pos_World_Q162;Object_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);vec3 Nrm_World_Q182;Object_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);vec4 Blob_Info_Q173;\n#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\n#else\nBlob_Info_Q173=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q174;\n#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\n#else\nBlob_Info_Q174=vec4(0,0,0,0);\n#endif\nfloat Out_Q255;Remap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);float X_Q236;float Y_Q236;float Z_Q236;To_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);vec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);float Minus_F_Q237=-Z_Q236;float R_Q249;float G_Q249;float B_Q249;float A_Q249;R_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;float ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);float Result_Q243;Conditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);vec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);vec3 Position=Pos_World_Q162;vec3 Normal=Nrm_World_Q182;vec2 UV=XY_Q235;vec3 Tangent=Tangent_World_N_Q177;vec3 Binormal=Difference_Q211;vec4 Color=Out_Color_Q184;vec4 Extra1=Vec4_Q239;vec4 Extra2=Blob_Info_Q173;vec4 Extra3=Blob_Info_Q174;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderThumb.fragment\";\r\nimport \"./shaders/mrdlSliderThumb.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nclass MRDLSliderThumbMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Thumb material with MRDL\r\n */\r\nexport class MRDLSliderThumbMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public radius = 0.157;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.065;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0.031;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 2;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.937;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.555;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 1;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0.31;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.1;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.960784, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scale for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderThumb\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public override clone(name: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderThumbMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderThumbMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLSliderThumbMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderThumbMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderThumbMaterial\", MRDLSliderThumbMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;void FastLinearTosRGB_B353(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Round_Rect_Fragment_B332(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Iridescence_B343(\nvec3 Position,\nvec3 Normal,\nvec2 UV,\nvec3 Axis,\nvec3 Eye,\nvec4 Tint,\nsampler2D Texture,\nbool Reflected,\nfloat Frequency,\nfloat Vertical_Offset,\nout vec4 Color)\n{vec3 i=normalize(Position-Eye);vec3 r=reflect(i,Normal);float idota=dot(i,Axis);float idotr=dot(i,r);float x=Reflected ? idotr : idota;vec2 xy;xy.x=fract((x*Frequency+1.0)*0.5+UV.y*Vertical_Offset);xy.y=0.5;Color=texture(Texture,xy);Color.rgb*=Tint.rgb;}\nvoid Scale_RGB_B346(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Scale_RGB_B344(\nfloat Scalar,\nvec4 Color,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Line_Fragment_B362(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Edge_B356(\nvec4 RectParms,\nfloat Radius,\nfloat Line_Width,\nvec2 UV,\nfloat Edge_Width,\nfloat Edge_Power,\nout float Result)\n{float d=length(max(abs(UV)-RectParms.xy,0.0));float edge=1.0-clamp((1.0-d/(Radius-Line_Width))/Edge_Width,0.0,1.0);Result=pow(edge,Edge_Power);}\nvoid Gradient_B355(\nvec4 Gradient_Color,\nvec4 Top_Left,\nvec4 Top_Right,\nvec4 Bottom_Left,\nvec4 Bottom_Right,\nvec2 UV,\nout vec4 Result)\n{vec3 top=Top_Left.rgb+(Top_Right.rgb-Top_Left.rgb)*UV.x;vec3 bottom=Bottom_Left.rgb+(Bottom_Right.rgb-Bottom_Left.rgb)*UV.x;Result.rgb=Gradient_Color.rgb*(bottom+(top-bottom)*UV.y);Result.a=1.0;}\nvoid main()\n{float X_Q338;float Y_Q338;float Z_Q338;float W_Q338;X_Q338=vExtra2.x;Y_Q338=vExtra2.y;Z_Q338=vExtra2.z;W_Q338=vExtra2.w;vec4 Color_Q343;\n#if IRIDESCENCE_ENABLE\nIridescence_B343(vPosition,vNormal,vUV,vBinormal,cameraPosition,_Iridescence_Tint_,_Iridescent_Map_,_Reflected_,_Frequency_,_Vertical_Offset_,Color_Q343);\n#else\nColor_Q343=vec4(0,0,0,0);\n#endif\nvec4 Result_Q344;Scale_RGB_B344(_Iridescence_Intensity_,Color_Q343,Result_Q344);vec4 Line_Color_Q362;Line_Fragment_B362(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q362);float Result_Q356;\n#if EDGE_ONLY\nEdge_B356(vExtra1,Z_Q338,W_Q338,vUV,_Edge_Width_,_Edge_Power_,Result_Q356);\n#else\nResult_Q356=1.0;\n#endif\nvec2 Vec2_Q339=vec2(X_Q338,Y_Q338);vec4 Result_Q355;Gradient_B355(_Gradient_Color_,_Top_Left_,_Top_Right_,_Bottom_Left_,_Bottom_Right_,Vec2_Q339,Result_Q355);vec4 Linear_Q348;Linear_Q348.rgb=clamp(Result_Q355.rgb*Result_Q355.rgb,0.0,1.0);Linear_Q348.a=Result_Q355.a;vec4 Result_Q346;Scale_RGB_B346(Linear_Q348,Result_Q356,Result_Q346);vec4 Sum_Q345=Result_Q346+Result_Q344;vec4 Color_At_T_Q347=mix(Line_Color_Q362,Result_Q346,_Line_Gradient_Blend_);vec4 Base_And_Iridescent_Q350;Base_And_Iridescent_Q350=_Base_Color_+vec4(Sum_Q345.rgb,0.0);vec4 Sum_Q349=Color_At_T_Q347+_Iridescence_Edge_Intensity_*Color_Q343;vec4 Result_Q351=Sum_Q349; Result_Q351.a=1.0;vec4 Color_Q332;Round_Rect_Fragment_B332(Z_Q338,W_Q338,Result_Q351,_Filter_Width_,vUV,1.0,vExtra1,Base_And_Iridescent_Q350,Color_Q332);vec4 Result_Q354=_Fade_Out_*Color_Q332;vec4 sRGB_Q353;FastLinearTosRGB_B353(Result_Q354,sRGB_Q353);vec4 Out_Color=sRGB_Q353;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec3 tangent;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;void Object_To_World_Pos_B314(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Round_Rect_Vertex_B357(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nvec3 Normal,\nvec4 Color_Scale_Translate,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV,\nout vec2 Color_UV_Info)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;Color_UV_Info=(Line_UV+vec2(0.5,0.5))*Color_Scale_Translate.xy+Color_Scale_Translate.zw;}\nvoid Line_Vertex_B333(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid PickDir_B334(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Move_Verts_B327(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Pick_Radius_B336(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Edge_AA_Vertex_B328(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Object_To_World_Dir_B330(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B341(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid main()\n{vec3 Nrm_World_Q326;Nrm_World_Q326=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q329;vec3 Tangent_World_N_Q329;float Tangent_Length_Q329;Tangent_World_Q329=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q329=length(Tangent_World_Q329);Tangent_World_N_Q329=Tangent_World_Q329/Tangent_Length_Q329;vec3 Binormal_World_Q330;vec3 Binormal_World_N_Q330;float Binormal_Length_Q330;Object_To_World_Dir_B330(vec3(0,1,0),Binormal_World_Q330,Binormal_World_N_Q330,Binormal_Length_Q330);float Radius_Q341;float Line_Width_Q341;RelativeOrAbsoluteDetail_B341(_Radius_,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q330,Radius_Q341,Line_Width_Q341);vec3 Dir_Q334;PickDir_B334(_Angle_,Tangent_World_N_Q329,Binormal_World_N_Q330,Dir_Q334);float Result_Q336;Pick_Radius_B336(Radius_Q341,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q336);float Anisotropy_Q331=Tangent_Length_Q329/Binormal_Length_Q330;vec4 Out_Color_Q337=vec4(Result_Q336,Line_Width_Q341,0,1);vec3 New_P_Q327;vec2 New_UV_Q327;float Radial_Gradient_Q327;vec3 Radial_Dir_Q327;Move_Verts_B327(Anisotropy_Q331,position,Result_Q336,New_P_Q327,New_UV_Q327,Radial_Gradient_Q327,Radial_Dir_Q327);vec3 Pos_World_Q314;Object_To_World_Pos_B314(New_P_Q327,Pos_World_Q314);float Gradient1_Q328;float Gradient2_Q328;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B328(Pos_World_Q314,position,normal,cameraPosition,Radial_Gradient_Q327,Radial_Dir_Q327,tangent,Gradient1_Q328,Gradient2_Q328);\n#else\nGradient1_Q328=1.0;Gradient2_Q328=1.0;\n#endif\nvec2 Rect_UV_Q357;vec4 Rect_Parms_Q357;vec2 Scale_XY_Q357;vec2 Line_UV_Q357;vec2 Color_UV_Info_Q357;Round_Rect_Vertex_B357(New_UV_Q327,Result_Q336,0.0,Anisotropy_Q331,Gradient1_Q328,Gradient2_Q328,normal,vec4(1,1,0,0),Rect_UV_Q357,Rect_Parms_Q357,Scale_XY_Q357,Line_UV_Q357,Color_UV_Info_Q357);vec3 Line_Vertex_Q333;Line_Vertex_B333(Scale_XY_Q357,Line_UV_Q357,(20.0),_Rate_,_Highlight_Transform_,Line_Vertex_Q333);float X_Q359;float Y_Q359;X_Q359=Color_UV_Info_Q357.x;Y_Q359=Color_UV_Info_Q357.y;vec4 Vec4_Q358=vec4(X_Q359,Y_Q359,Result_Q336,Line_Width_Q341);vec3 Position=Pos_World_Q314;vec3 Normal=Nrm_World_Q326;vec2 UV=Rect_UV_Q357;vec3 Tangent=Line_Vertex_Q333;vec3 Binormal=Dir_Q334;vec4 Color=Out_Color_Q337;vec4 Extra1=Rect_Parms_Q357;vec4 Extra2=Vec4_Q358;vec4 Extra3=vec4(0,0,0,0);gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vExtra1=Extra1;vExtra2=Extra2;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlBackplate.fragment\";\r\nimport \"./shaders/mrdlBackplate.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @internal */\r\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\r\n    */\r\n    public IRIDESCENCE_ENABLE = true;\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render backplate material with MRDL\r\n */\r\nexport class MRDLBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\r\n    private _iridescentMapTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.003;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.2, 0.262745, 0.4, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /** @internal */\r\n    public _rate = 0;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /**\r\n     * Gets or sets the Tint of the iridescence effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public iridescenceTint = new Color4(1, 1, 1, 1);\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\r\n\r\n    /**\r\n     * Gets or sets the top right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topRightGradientColor = new Color4(0.305882, 0, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgePower = 1;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeLineGradientBlend = 0.5;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Iridescence_Tint_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Angle_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Gradient_Color_\",\r\n                \"_Top_Left_\",\r\n                \"_Top_Right_\",\r\n                \"_Bottom_Left_\",\r\n                \"_Bottom_Right_\",\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Power_\",\r\n                \"_Line_Gradient_Blend_\",\r\n                \"_Fade_Out_\",\r\n            ];\r\n            const samplers: string[] = [\"_Iridescent_Map_\"];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\r\n        //define EDGE_ONLY false;\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\r\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial\";\r\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial\";\r\n\r\nconst SLIDER_MIN: number = 0;\r\nconst SLIDER_MAX: number = 100;\r\nconst SLIDER_VAL: number = 50;\r\nconst SLIDER_STEP: number = 0;\r\nconst SLIDER_SCALING: number = 1.0;\r\nconst SLIDER_MARGIN: number = 0.2;\r\n\r\n/**\r\n * Class used to create a slider in 3D\r\n */\r\nexport class Slider3D extends Control3D {\r\n    /**\r\n     * Base Url for the models.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the 8x4 model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _sliderBackplate: AbstractMesh;\r\n    private _sliderBackplateMaterial: MRDLBackplateMaterial;\r\n    private _sliderBarMaterial: MRDLSliderBarMaterial;\r\n    private _sliderThumbMaterial: MRDLSliderThumbMaterial;\r\n    private _sliderThumb: AbstractMesh;\r\n    private _sliderBar: AbstractMesh;\r\n    private _sliderBackplateVisible: boolean;\r\n\r\n    private _minimum: number;\r\n    private _maximum: number;\r\n    private _value: number;\r\n    private _step: number;\r\n\r\n    private _draggedPosition: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Creates a new slider\r\n     * @param name defines the control name\r\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\r\n     */\r\n    constructor(name?: string, sliderBackplateVisible?: boolean) {\r\n        super(name);\r\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\r\n\r\n        this._minimum = SLIDER_MIN;\r\n        this._maximum = SLIDER_MAX;\r\n        this._step = SLIDER_STEP;\r\n        this._value = SLIDER_VAL;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public override get mesh(): Nullable<AbstractMesh> {\r\n        if (this.node) {\r\n            return this._sliderThumb;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = Math.max(value, SLIDER_MIN);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = Math.max(value, this._minimum);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets step value */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n        if (this._sliderThumb) {\r\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\r\n        }\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    protected get start(): number {\r\n        if (!this.node) {\r\n            return -SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    protected get end(): number {\r\n        if (!this.node) {\r\n            return SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar material used by this control\r\n     */\r\n    public get sliderBarMaterial(): MRDLSliderBarMaterial {\r\n        return this._sliderBarMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb material used by this control\r\n     */\r\n    public get sliderThumbMaterial(): MRDLSliderThumbMaterial {\r\n        return this._sliderThumbMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate material used by this control\r\n     */\r\n    public get sliderBackplateMaterial(): MRDLBackplateMaterial {\r\n        return this._sliderBackplateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar mesh used by this control\r\n     */\r\n    public get sliderBar(): AbstractMesh {\r\n        return this._sliderBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb mesh used by this control\r\n     */\r\n    public get sliderThumb(): AbstractMesh {\r\n        return this._sliderThumb;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate mesh used by this control\r\n     */\r\n    public get sliderBackplate(): AbstractMesh {\r\n        return this._sliderBackplate;\r\n    }\r\n\r\n    /** Sets a boolean indicating if the control is visible */\r\n    public override set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        this.node?.setEnabled(value);\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        const sliderBackplate = CreateBox(\r\n            `${this.name}_sliderbackplate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        sliderBackplate.isPickable = false;\r\n        sliderBackplate.visibility = 0;\r\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\r\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\r\n            result.meshes.forEach((m) => {\r\n                m.isPickable = false;\r\n            });\r\n            const sliderBackplateModel = result.meshes[1];\r\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\r\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\r\n            sliderBackplateModel.visibility = 0;\r\n\r\n            if (this._sliderBackplateVisible) {\r\n                sliderBackplateModel.visibility = 1;\r\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\r\n                sliderBackplateModel.scaling.x = 1;\r\n                sliderBackplateModel.scaling.z = 0.2;\r\n                sliderBackplateModel.parent = sliderBackplate;\r\n                if (this._sliderBackplateMaterial) {\r\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\r\n                }\r\n                this._sliderBackplate = sliderBackplateModel;\r\n            }\r\n\r\n            if (sliderBarModel) {\r\n                sliderBarModel.parent = sliderBackplate;\r\n                sliderBarModel.position.z = -0.1;\r\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\r\n                if (this._sliderBarMaterial) {\r\n                    sliderBarModel.material = this._sliderBarMaterial;\r\n                }\r\n                this._sliderBar = sliderBarModel;\r\n            }\r\n\r\n            if (sliderThumbModel) {\r\n                sliderThumbModel.parent = sliderBackplate;\r\n                sliderThumbModel.isPickable = true;\r\n                sliderThumbModel.position.z = -0.115;\r\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\r\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\r\n                sliderThumbModel.addBehavior(this._createBehavior());\r\n                if (this._sliderThumbMaterial) {\r\n                    sliderThumbModel.material = this._sliderThumbMaterial;\r\n                }\r\n                this._sliderThumb = sliderThumbModel;\r\n            }\r\n\r\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\r\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\r\n                this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            });\r\n        });\r\n\r\n        this._affectMaterial(sliderBackplate);\r\n        return sliderBackplate;\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: AbstractMesh) {\r\n        this._sliderBackplateMaterial = this._sliderBackplateMaterial ?? new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\r\n        this._sliderBarMaterial = this._sliderBarMaterial ?? new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\r\n        this._sliderThumbMaterial = this._sliderThumbMaterial ?? new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\r\n    }\r\n\r\n    private _createBehavior(): PointerDragBehavior {\r\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\r\n        pointerDragBehavior.moveAttached = false;\r\n\r\n        pointerDragBehavior.onDragStartObservable.add(() => {\r\n            this._draggedPosition = this._sliderThumb.position.x;\r\n        });\r\n\r\n        pointerDragBehavior.onDragObservable.add((event) => {\r\n            this._draggedPosition += event.dragDistance / this.scaling.x;\r\n            this.value = this._convertToValue(this._draggedPosition);\r\n        });\r\n\r\n        return pointerDragBehavior;\r\n    }\r\n\r\n    private _convertToPosition(value: number): number {\r\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\r\n        return Math.min(Math.max(position, this.start), this.end);\r\n    }\r\n\r\n    private _convertToValue(position: number): number {\r\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\r\n        value = this.step ? Math.round(value / this.step) * this.step : value;\r\n\r\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n        this._sliderBar?.dispose();\r\n        this._sliderThumb?.dispose();\r\n        this._sliderBarMaterial?.dispose();\r\n        this._sliderThumbMaterial?.dispose();\r\n        this._sliderBackplate?.dispose();\r\n        this._sliderBackplateMaterial?.dispose();\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, 0, this._radius);\r\n\r\n        const xAngle = source.y / this._radius;\r\n        const yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected override _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        const extendSizes = [];\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += ((controlCount - 1) * this.margin) / 2;\r\n        } else {\r\n            width += ((controlCount - 1) * this.margin) / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            const extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += controlCount > 0 ? this.margin : 0;\r\n        }\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene\r\n * @since 5.0.0\r\n */\r\nexport class TouchMeshButton3D extends TouchButton3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name, mesh);\r\n\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"TouchMeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected override _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;float BiasFunc(float b,float v) {return pow(v,log(clamp(b,0.001,0.999))/log(0.5));}\nvoid Fuzzy_Round_Rect_B33(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius_X,\nfloat Radius_Y,\nfloat Line_Width,\nvec2 UV,\nfloat Outer_Fuzz,\nfloat Max_Outer_Fuzz,\nout float Rect_Distance,\nout float Inner_Distance)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));float radius=min(r.x,r.y)-Max_Outer_Fuzz;vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);float d=distance(nearestp,v);Inner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);Rect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;}\nvoid main()\n{float X_Q42;float Y_Q42;X_Q42=vNormal.x;Y_Q42=vNormal.y;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Sqrt_F_Q27=sqrt(MaxAB_Q24);float Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);float Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);float Product_Q23=_Max_Intensity_*Power_Q43;float Rect_Distance_Q33;float Inner_Distance_Q33;Fuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);float Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);float Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);vec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);float Product_Q22=Result_Q45*Product_Q23;vec4 Result_Q28=Product_Q22*Color_At_T_Q25;vec4 Out_Color=Result_Q28;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;varying vec3 vNormal;varying vec2 vUV;void main()\n{vec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Length_Q16=length(Dir_World_Q41);float Length_Q17=length(Dir_World_Q40);bool Greater_Than_Q37=MaxAB_Q24>0.0;vec3 Sizes_Q35;vec2 XY_Q35;Sizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));XY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;vec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);vec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;vec3 Position=Pos_World_Q39;vec3 Normal=Sizes_Q35;vec2 UV=XY_Q35;vec3 Tangent=vec3(0,0,0);vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlBackglow.fragment\";\r\nimport \"./shaders/mrdlBackglow.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @hidden */\r\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLBackglowMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public bevelRadius = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backglow.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.16;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /**\r\n     * Gets or sets the tuning motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public tuningMotion = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public motion = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public maxIntensity = 0.7;\r\n\r\n    /**\r\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public intensityFadeInExponent = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the start of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzStart = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the end of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzEnd = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the backglow.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(0.682353, 0.698039, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the inner color of the backglow.\r\n     */\r\n    @serialize()\r\n    public innerColor: Color4 = new Color4(0.356863, 0.392157, 0.796078, 1);\r\n\r\n    /**\r\n     * Gets or sets the blend exponent of the backglow.\r\n     */\r\n    @serialize()\r\n    public blendExponent = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the falloff of the backglow.\r\n     */\r\n    @serialize()\r\n    public falloff = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the bias of the backglow.\r\n     */\r\n    @serialize()\r\n    public bias = 0.5;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackglow\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Bevel_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Tuning_Motion_\",\r\n                \"_Motion_\",\r\n                \"_Max_Intensity_\",\r\n                \"_Intensity_Fade_In_Exponent_\",\r\n                \"_Outer_Fuzz_Start_\",\r\n                \"_Outer_Fuzz_End_\",\r\n                \"_Color_\",\r\n                \"_Inner_Color_\",\r\n                \"_Blend_Exponent_\",\r\n                \"_Falloff_\",\r\n                \"_Bias_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Rounded Rectangle\"\r\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n\r\n        // \"Animation\"\r\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\r\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\r\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\r\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\r\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\r\n\r\n        // \"Inner Transition\"\r\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\r\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLBackglowMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Scale_Color_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid Scale_RGB_B50(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Proximity_Fragment_B51(\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec4 Deltas,\nfloat Show_Selection,\nfloat Distance_Fade1,\nfloat Distance_Fade2,\nfloat Strength,\nout float Proximity)\n{float proximity1=(1.0-clamp(length(Deltas.xy)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade1;float proximity2=(1.0-clamp(length(Deltas.zw)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade2;Proximity=Strength*(Proximity_Max_Intensity*max(proximity1,proximity2) *(1.0-Show_Selection)+Show_Selection);}\nvoid Blob_Fragment_B56(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvoid Round_Rect_Fragment_B61(\nfloat Radius,\nvec4 Line_Color,\nfloat Filter_Width,\nfloat Line_Visibility,\nvec4 Fill_Color,\nbool Smooth_Edges,\nvec4 Rect_Parms,\nout float Inside_Rect)\n{float d=length(max(abs(Rect_Parms.zw)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);Inside_Rect=Smooth_Edges ? clamp((Radius-d)/dx,0.0,1.0) : 1.0-step(Radius,d);}\nvoid main()\n{float Is_Quad_Q53;Is_Quad_Q53=vNormal.z;vec4 Blob_Color_Q56;Blob_Fragment_B56(vUV,vTangent,_Blob_Texture_,Blob_Color_Q56);float X_Q52;float Y_Q52;float Z_Q52;float W_Q52;X_Q52=vExtra3.x;Y_Q52=vExtra3.y;Z_Q52=vExtra3.z;W_Q52=vExtra3.w;float Proximity_Q51;Proximity_Fragment_B51(_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vExtra2,X_Q52,Y_Q52,Z_Q52,1.0,Proximity_Q51);float Inside_Rect_Q61;Round_Rect_Fragment_B61(W_Q52,vec4(1,1,1,1),_Filter_Width_,1.0,vec4(0,0,0,0),_Smooth_Edges_,vExtra1,Inside_Rect_Q61);vec4 Result_Q50;Scale_RGB_B50(_Edge_Color_,Proximity_Q51,Result_Q50);vec4 Result_Q47=Inside_Rect_Q61*Blob_Color_Q56;vec4 Color_At_T_Q48=mix(Result_Q50,Result_Q47,Is_Quad_Q53);vec4 Result_Q54;Scale_Color_B54(Color_At_T_Q48,_Fade_Out_,Result_Q54);vec4 Out_Color=Result_Q54;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplateVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Blob_Vertex_B40(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nfloat DistanceOffset,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info,\nout vec2 Blob_Relative_UV)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal)+DistanceOffset*Blob_Far_Distance;Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);Blob_Relative_UV=blobClipped/Face_Size.y;}\nvoid Round_Rect_Vertex_B36(\nvec2 UV,\nvec3 Tangent,\nvec3 Binormal,\nfloat Radius,\nfloat Anisotropy,\nvec2 Blob_Center_UV,\nout vec2 Rect_UV,\nout vec2 Scale_XY,\nout vec4 Rect_Parms)\n{Scale_XY=vec2(Anisotropy,1.0);Rect_UV=(UV-vec2(0.5,0.5))*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius);Rect_Parms.zw=Blob_Center_UV;}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B33(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Normal,\nvec3 Tangent,\nvec3 Binormal,\nout vec4 Extra,\nout float Distance_To_Face,\nout float Distance_Fade1,\nout float Distance_Fade2)\n{float distz1,distz2;Extra.xy=ProjectProximity(Blob_Position,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz1)/Relative_Scale;Extra.zw=ProjectProximity(Blob_Position_2,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz2)/Relative_Scale;Distance_To_Face=dot(Normal,Position-Face_Center);Distance_Fade1=1.0-clamp(distz1/Proximity_Far_Distance,0.0,1.0);Distance_Fade2=1.0-clamp(distz2/Proximity_Far_Distance,0.0,1.0);}\nvoid Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B27(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=Blob_Enable_1 ? 1.0 : 0.0;float b2=Blob_Enable_2 ? 1.0 : 0.0;Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Move_Verts_B32(\nvec2 UV,\nfloat Radius,\nfloat Anisotropy,\nfloat Line_Width,\nfloat Visible,\nout vec3 New_P,\nout vec2 New_UV)\n{vec2 xy=2.0*UV-vec2(0.5,0.5);vec2 center=clamp(xy,0.0,1.0);vec2 delta=2.0*(xy-center);float deltaLength=length(delta);vec2 aniso=vec2(1.0/Anisotropy,1.0);center=(center-vec2(0.5,0.5))*(1.0-2.0*Radius*aniso);New_UV=vec2((2.0-2.0*deltaLength)*Visible,0.0);float deltaRadius= (Radius-Line_Width*New_UV.x);New_P.xy=(center+deltaRadius/deltaLength *aniso*delta);New_P.z=0.0;}\nvoid Object_To_World_Dir_B14(\nvec3 Dir_Object,\nout vec3 Binormal_World)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid Proximity_Visibility_B55(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Face_Center,\nvec3 Normal,\nvec2 Face_Size,\nfloat Gaze,\nout float Width)\n{float boxMaxSize=length(Face_Size)*0.5;float d1=dot(Proximity_Center-Face_Center,Normal);vec3 blob1=Proximity_Center-d1*Normal;float d2=dot(Proximity_Center_2-Face_Center,Normal);vec3 blob2=Proximity_Center_2-d2*Normal;vec3 delta1=blob1-Face_Center;vec3 delta2=blob2-Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));Width=max(Gaze,Width);}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B31(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);Show_Selection=mix(max(select1,select2),1.0,Selected);}\nvoid main()\n{vec3 Vec3_Q29=vec3(vec2(0,0).x,vec2(0,0).y,color.r);vec3 Nrm_World_Q24;Nrm_World_Q24=normalize((world*vec4(normal,0.0)).xyz);vec3 Face_Center_Q30;Face_Center_Q30=(world*vec4(vec3(0,0,0),1.0)).xyz;vec3 Tangent_World_Q13;Tangent_World_Q13=(world*vec4(tangent,0.0)).xyz;vec3 Result_Q42;Result_Q42=_Use_Global_Left_Index_ ? Global_Left_Index_Tip_Position.xyz : _Blob_Position_;vec3 Result_Q43;Result_Q43=_Use_Global_Right_Index_ ? Global_Right_Index_Tip_Position.xyz : _Blob_Position_2_;float Value_At_T_Q58=mix(_Blob_Near_Size_,_Blob_Pulse_Max_Size_,_Blob_Pulse_);float Value_At_T_Q59=mix(_Blob_Near_Size_2_,_Blob_Pulse_Max_Size_,_Blob_Pulse_2_);vec3 Cross_Q70=cross(normal,tangent);float Product_Q45=_Gaze_Intensity_*_Gaze_Focus_;float Step_Q46=step(0.0001,Product_Q45);vec3 Tangent_World_N_Q15=normalize(Tangent_World_Q13);vec3 Position_Q27;float Near_Size_Q27;float Inner_Fade_Q27;float Blob_Enable_Q27;float Fade_Q27;float Pulse_Q27;Choose_Blob_B27(color,Result_Q42,Result_Q43,_Blob_Enable_,_Blob_Enable_2_,Value_At_T_Q58,Value_At_T_Q59,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q27,Near_Size_Q27,Inner_Fade_Q27,Blob_Enable_Q27,Fade_Q27,Pulse_Q27);vec3 Binormal_World_Q14;Object_To_World_Dir_B14(Cross_Q70,Binormal_World_Q14);float Anisotropy_Q21=length(Tangent_World_Q13)/length(Binormal_World_Q14);vec3 Binormal_World_N_Q16=normalize(Binormal_World_Q14);vec2 Face_Size_Q35;float ScaleY_Q35;Face_Size_Q35=vec2(length(Tangent_World_Q13),length(Binormal_World_Q14));ScaleY_Q35=Face_Size_Q35.y;float Out_Radius_Q38;float Out_Line_Width_Q38;Out_Radius_Q38=_Relative_To_Height_ ? _Radius_ : _Radius_/ScaleY_Q35;Out_Line_Width_Q38=_Relative_To_Height_ ? _Line_Width_ : _Line_Width_/ScaleY_Q35;float Show_Selection_Q31;Selection_Vertex_B31(Result_Q42,Result_Q43,Face_Center_Q30,Face_Size_Q35,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,vec3(0,0,-1),Show_Selection_Q31);float MaxAB_Q41=max(Show_Selection_Q31,Product_Q45);float Width_Q55;Proximity_Visibility_B55(Show_Selection_Q31,Result_Q42,Result_Q43,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Face_Center_Q30,Nrm_World_Q24,Face_Size_Q35,Step_Q46,Width_Q55);vec3 New_P_Q32;vec2 New_UV_Q32;Move_Verts_B32(uv,Out_Radius_Q38,Anisotropy_Q21,Out_Line_Width_Q38,Width_Q55,New_P_Q32,New_UV_Q32);vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q32,Pos_World_Q12);vec3 Out_Position_Q40;vec2 Out_UV_Q40;vec3 Blob_Info_Q40;vec2 Blob_Relative_UV_Q40;Blob_Vertex_B40(Pos_World_Q12,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Position_Q27,_Blob_Intensity_,Near_Size_Q27,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q30,Face_Size_Q35,New_UV_Q32,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q27,Pulse_Q27,Fade_Q27,Blob_Enable_Q27,0.0,Out_Position_Q40,Out_UV_Q40,Blob_Info_Q40,Blob_Relative_UV_Q40);vec2 Rect_UV_Q36;vec2 Scale_XY_Q36;vec4 Rect_Parms_Q36;Round_Rect_Vertex_B36(New_UV_Q32,Tangent_World_Q13,Binormal_World_Q14,Out_Radius_Q38,Anisotropy_Q21,Blob_Relative_UV_Q40,Rect_UV_Q36,Scale_XY_Q36,Rect_Parms_Q36);vec4 Extra_Q33;float Distance_To_Face_Q33;float Distance_Fade1_Q33;float Distance_Fade2_Q33;Proximity_Vertex_B33(Result_Q42,Result_Q43,Face_Center_Q30,Pos_World_Q12,_Proximity_Far_Distance_,1.0,_Proximity_Anisotropy_,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Extra_Q33,Distance_To_Face_Q33,Distance_Fade1_Q33,Distance_Fade2_Q33);vec4 Vec4_Q37=vec4(MaxAB_Q41,Distance_Fade1_Q33,Distance_Fade2_Q33,Out_Radius_Q38);vec3 Position=Out_Position_Q40;vec3 Normal=Vec3_Q29;vec2 UV=Out_UV_Q40;vec3 Tangent=Blob_Info_Q40;vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);vec4 Extra1=Rect_Parms_Q36;vec4 Extra2=Extra_Q33;vec4 Extra3=Vec4_Q37;gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;vTangent=Tangent;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport \"./shaders/mrdlFrontplate.fragment\";\r\nimport \"./shaders/mrdlFrontplate.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\n/** @hidden */\r\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\r\n    /**\r\n     * Sets default value for \"SMOOTH_EDGES\"\r\n     */\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLFrontplateMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets the line width of the frontplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the scale is relative to the frontplate height.\r\n     */\r\n    @serialize()\r\n    public relativeToHeight = false;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the edge color of the frontplate.\r\n     */\r\n    @serialize()\r\n    public edgeColor: Color4 = new Color4(0.53, 0.53, 0.53, 1);\r\n\r\n    /**\r\n     * Gets or sets whether to enable blob effects on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the blob position on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition: Vector3 = new Vector3(100, 100, 100);\r\n\r\n    /**\r\n     * Gets or sets the blob intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the blob near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.032;\r\n\r\n    /**\r\n     * Gets or sets the blob far size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.048;\r\n\r\n    /**\r\n     * Gets or sets the blob near distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.064;\r\n\r\n    /**\r\n     * Gets or sets the blob fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the blob inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the blob pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulseMaxSize = 0.05;\r\n\r\n    /**\r\n     * Gets or sets whether to enable extra blob effects of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable2 = true;\r\n\r\n    /**\r\n     * Gets or sets blob2 position of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition2: Vector3 = new Vector3(10, 10.1, -0.6);\r\n\r\n    /**\r\n     * Gets or sets the blob2 near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob2 inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade2 = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the blob2 pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob2 fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the gaze intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeIntensity = 0.8;\r\n\r\n    /**\r\n     * Gets or sets the gaze focus of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeFocus = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fuzz of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selected = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the selection fade size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selected distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the selected fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the proximity maximum intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the proximity far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the proximity near radius of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 0.016;\r\n\r\n    /**\r\n     * Gets or sets the proximity anisotropy of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether to use global left index on the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalLeftIndex = true;\r\n\r\n    /**\r\n     * Gets or sets  whether to use global right index of the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalRightIndex = true;\r\n\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the BLOB.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"\";\r\n\r\n    /**\r\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\r\n     */\r\n    public fadeOut = 1.0;\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n        this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlFrontplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Relative_To_Height_\",\r\n                \"_Filter_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Fade_Out_\",\r\n                \"_Smooth_Edges_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Pulse_Max_Size_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Gaze_Intensity_\",\r\n                \"_Gaze_Focus_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Gaze\"\r\n        this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\r\n        this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLFrontplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadPixelShader\";\nconst shader = `uniform vec3 cameraPosition;varying vec2 vUV;varying vec3 vTangent;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;float FilterStep_Bid194(float edge,float x,float filterWidth)\n{float dx=max(1.0E-5,fwidth(x)*filterWidth);return max((x+dx*0.5-max(edge,x-dx*0.5))/dx,0.0);}\nvoid Round_Rect_B194(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius,\nvec4 Rect_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Glow_Fraction,\nfloat Glow_Max,\nfloat Glow_Falloff,\nout vec4 Color)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius,Radius),halfSize),vec2(0.01,0.01));vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);vec2 delta=(v-nearestp)/max(vec2(0.01,0.01),r);float Distance=length(delta);float insideRect=1.0-FilterStep_Bid194(1.0-Glow_Fraction,Distance,Filter_Width);float glow=clamp((1.0-Distance)/Glow_Fraction,0.0,1.0);glow=pow(glow,Glow_Falloff);Color=Rect_Color*max(insideRect,glow*Glow_Max);}\nvoid main()\n{float X_Q192;float Y_Q192;float Z_Q192;X_Q192=vTangent.x;Y_Q192=vTangent.y;Z_Q192=vTangent.z;vec4 Color_Q194;Round_Rect_B194(X_Q192,1.0,Y_Q192,_Color_,_Filter_Width_,vUV,_Glow_Fraction_,_Glow_Max_,_Glow_Falloff_,Color_Q194);vec4 Out_Color=Color_Q194;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadVertexShader\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;varying vec2 vUV;varying vec3 vTangent;void main()\n{vec3 Pos_World_Q189;Pos_World_Q189=(world*vec4(position,1.0)).xyz;vec3 Dir_World_Q190;Dir_World_Q190=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q191;Dir_World_Q191=(world*vec4((cross(normal,tangent)),0.0)).xyz;float Length_Q180=length(Dir_World_Q190);float Length_Q181=length(Dir_World_Q191);float Quotient_Q184=Length_Q180/Length_Q181;float Quotient_Q195=_Radius_/Length_Q181;vec2 Result_Q193;Result_Q193=vec2((uv.x-0.5)*Length_Q180/Length_Q181,(uv.y-0.5));float Result_Q198=_Fixed_Radius_ ? Quotient_Q195 : _Radius_;vec3 Vec3_Q183=vec3(Quotient_Q184,Result_Q198,0);vec3 Position=Pos_World_Q189;vec3 Normal=vec3(0,0,0);vec2 UV=Result_Q193;vec3 Tangent=Vec3_Q183;vec3 Binormal=vec3(0,0,0);vec4 Color=color;gl_Position=viewProjection*vec4(Position,1);vUV=UV;vTangent=Tangent;}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport { SerializationHelper } from \"core/Misc/decorators.serialization\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlInnerquad.fragment\";\r\nimport \"./shaders/mrdlInnerquad.vertex\";\r\nimport { HandleFallbacksForShadows, PrepareAttributesForInstances, PrepareDefinesForAttributes, PrepareUniformsAndSamplersList } from \"core/Materials/materialHelper.functions\";\r\n\r\nclass MRDLInnerquadMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLInnerquadMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the color of the innerquad.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(1, 1, 1, 0.05);\r\n    /**\r\n     * Gets or sets the corner radius on the innerquad. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets whether the radius of the innerquad should be fixed.\r\n     */\r\n    @serialize()\r\n    public fixedRadius = true;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the glow fraction of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFraction = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum glow intensity of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowMax = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the glow falloff effect of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFalloff = 2.0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_COMBINE;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public override needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public override needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (this.isFrozen) {\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLInnerquadMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlInnerquad\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Color_\",\r\n                \"_Radius_\",\r\n                \"_Fixed_Radius_\",\r\n                \"_Filter_Width_\",\r\n                \"_Glow_Fraction_\",\r\n                \"_Glow_Max_\",\r\n                \"_Glow_Falloff_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers: string[] = [];\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n\r\n        // \"Shape\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Fixed_Radius_\", this.fixedRadius ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n\r\n        // \"Glow\"\r\n        this._activeEffect.setFloat(\"_Glow_Fraction_\", this.glowFraction);\r\n        this._activeEffect.setFloat(\"_Glow_Max_\", this.glowMax);\r\n        this._activeEffect.setFloat(\"_Glow_Falloff_\", this.glowFalloff);\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public override clone(name: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLInnerquadMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public override serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLInnerquadMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"MRDLInnerquadMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLInnerquadMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLInnerquadMaterial\", MRDLInnerquadMaterial);\r\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Control3D } from \"../control3D\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Vector3WithInfo } from \"../../vector3WithInfo\";\r\n\r\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Control } from \"../../../2D/controls/control\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { IsDocumentAvailable } from \"core/Misc/domManagement\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Grid } from \"../../../2D/controls/grid\";\r\nimport { Image } from \"../../../2D/controls/image\";\r\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial\";\r\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial\";\r\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial\";\r\nimport { Rectangle } from \"../../../2D/controls/rectangle\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { StackPanel } from \"../../../2D/controls/stackPanel\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TextBlock } from \"../../../2D/controls/textBlock\";\r\nimport { TouchButton3D } from \"../touchButton3D\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create the mrtkv3 button\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the frontplate model.\r\n     */\r\n    public static MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the frontplate model.\r\n     */\r\n    public static FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\r\n\r\n    /**\r\n     * File name for the backplate model.\r\n     */\r\n    public static BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\r\n\r\n    /**\r\n     * File name for the backglow model.\r\n     */\r\n    public static BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\r\n\r\n    /**\r\n     * File name for the innerquad model.\r\n     */\r\n    public static INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";\r\n\r\n    /**\r\n     * Gets or sets the horizontal scaling for the button.\r\n     */\r\n    public width = 1;\r\n\r\n    /**\r\n     * Gets or sets the vertical scaling for the button.\r\n     */\r\n    public height = 1;\r\n\r\n    /**\r\n     * Gets or sets the bevel radius for the button.\r\n     */\r\n    public radius = 0.14;\r\n\r\n    /**\r\n     * Gets or sets the font size of the button text in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public textSizeInPixels = 18;\r\n\r\n    /**\r\n     * Gets or sets the size of the button image in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public imageSizeInPixels = 40;\r\n\r\n    /**\r\n     * Gets or sets the color of the button plate.\r\n     */\r\n    public plateMaterialColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Shared variables for meshes\r\n    /**\r\n     * Gets or sets the depth of the button's front plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public frontPlateDepth = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the depth of the button's back plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public backPlateDepth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the offset value for button's back glow.\r\n     * This variable determines the x, y scaling of the button's meshes.\r\n     */\r\n    public backGlowOffset = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\r\n     */\r\n    public flatPlaneDepth = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\r\n     */\r\n    public innerQuadRadius = this.radius - 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial.\r\n     */\r\n    public innerQuadColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\r\n     */\r\n    public innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\r\n     */\r\n    public innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\r\n     */\r\n    public innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\r\n\r\n    // Meshes\r\n    private _backPlate: AbstractMesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _backGlow: AbstractMesh;\r\n    private _innerQuad: AbstractMesh;\r\n    private _collisionPlate: AbstractMesh;\r\n    private _frontPlateCollisionMesh: AbstractMesh;\r\n    private _isBackplateVisible = true;\r\n\r\n    // Content\r\n    private _text: string;\r\n    private _subtext: string;\r\n    private _imageUrl: string;\r\n\r\n    // Materials\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: MRDLFrontplateMaterial;\r\n    private _backMaterial: MRDLBackplateMaterial;\r\n    private _backGlowMaterial: MRDLBackglowMaterial;\r\n    private _innerQuadMaterial: MRDLInnerquadMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n\r\n    // Events\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerClickObserver: Nullable<Observer<Vector3WithInfo>>;\r\n    private _pointerEnterObserver: Nullable<Observer<Control3D>>;\r\n    private _pointerOutObserver: Nullable<Observer<Control3D>>;\r\n    private _toggleObserver: Nullable<Observer<boolean>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n        this._backGlow.renderingGroupId = id;\r\n        this._innerQuad.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public override get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     * Set this property after adding the button to the GUI3DManager\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._frontPlateCollisionMesh;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            const tooltipBackground = new Rectangle();\r\n            tooltipBackground.height = 0.25;\r\n            tooltipBackground.width = 0.8;\r\n            tooltipBackground.cornerRadius = 25;\r\n            tooltipBackground.color = \"#ffffff\";\r\n            tooltipBackground.thickness = 20;\r\n            tooltipBackground.background = \"#060668\";\r\n            this._tooltipTexture.addControl(tooltipBackground);\r\n\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 100;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        return this._tooltipTextBlock?.text || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets subtext for a button with larger width\r\n     */\r\n    public get subtext(): string {\r\n        return this._subtext;\r\n    }\r\n\r\n    public set subtext(value: string) {\r\n        if (this._subtext === value) {\r\n            return;\r\n        }\r\n\r\n        this._subtext = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): MRDLBackplateMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): MRDLFrontplateMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the back glow material used by this button\r\n     */\r\n    public get backGlowMaterial(): MRDLBackglowMaterial {\r\n        return this._backGlowMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the inner quad material used by this button\r\n     */\r\n    public get innerQuadMaterial(): MRDLInnerquadMaterial {\r\n        return this._innerQuadMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other V3 Buttons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(1);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                if (this.isToggled) {\r\n                    this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\r\n                } else {\r\n                    this._innerQuadMaterial.color = this.innerQuadHoverColor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(-0.8);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this._pointerClickObserver = this.onPointerClickObservable.add(() => {\r\n            if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\r\n                this._performClickAnimation();\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        });\r\n\r\n        this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\r\n            this.pointerEnterAnimation();\r\n        });\r\n\r\n        this._pointerOutObserver = this.onPointerOutObservable.add(() => {\r\n            this.pointerOutAnimation();\r\n        });\r\n\r\n        this._toggleObserver = this.onToggleObservable.add((isToggled) => {\r\n            if (isToggled) {\r\n                this._innerQuadMaterial.color = this.innerQuadToggledColor;\r\n            } else {\r\n                this._innerQuadMaterial.color = this.innerQuadColor;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected override _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        let content: Control;\r\n\r\n        if (this._getAspectRatio() <= 1) {\r\n            // align text and image vertically\r\n            content = this._alignContentVertically();\r\n        } else {\r\n            // align text and image horizontally\r\n            content = this._alignContentHorizontally();\r\n        }\r\n\r\n        this.content = content;\r\n    }\r\n\r\n    private _getAspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    private _alignContentVertically() {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.heightInPixels = 180;\r\n                image.widthInPixels = 100;\r\n                image.paddingTopInPixels = 40;\r\n                image.paddingBottomInPixels = 40;\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.heightInPixels = 30;\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private _alignContentHorizontally() {\r\n        let totalPanelWidthInPixels = 240;\r\n        const padding = 15;\r\n\r\n        const contentContainer = new Rectangle();\r\n        contentContainer.widthInPixels = totalPanelWidthInPixels;\r\n        contentContainer.heightInPixels = totalPanelWidthInPixels;\r\n        contentContainer.color = \"transparent\";\r\n        contentContainer.setPaddingInPixels(padding, padding, padding, padding);\r\n        totalPanelWidthInPixels -= padding * 2;\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.scaleY = this._getAspectRatio();\r\n\r\n        if (IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const imageContainer = new Rectangle(`${this.name}_image`);\r\n                imageContainer.widthInPixels = this.imageSizeInPixels;\r\n                imageContainer.heightInPixels = this.imageSizeInPixels;\r\n                imageContainer.color = \"transparent\";\r\n                totalPanelWidthInPixels -= this.imageSizeInPixels;\r\n\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n\r\n                imageContainer.addControl(image);\r\n                panel.addControl(imageContainer);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock(`${this.name}_text`);\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.fontSize = this.textSizeInPixels;\r\n            text.widthInPixels = totalPanelWidthInPixels;\r\n\r\n            if (this._imageUrl) {\r\n                text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                text.paddingLeftInPixels = padding;\r\n            }\r\n\r\n            if (this._subtext) {\r\n                const textContainer = new Grid();\r\n                textContainer.addColumnDefinition(1);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.widthInPixels = totalPanelWidthInPixels;\r\n                textContainer.heightInPixels = 45;\r\n\r\n                const subtext = new TextBlock(`${this.name}_subtext`);\r\n                subtext.text = this._subtext;\r\n                subtext.color = \"#EEEEEEAB\";\r\n                subtext.fontSize = this.textSizeInPixels * 0.75;\r\n                subtext.fontWeight = \"600\";\r\n\r\n                if (this._imageUrl) {\r\n                    subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    subtext.paddingLeftInPixels = padding;\r\n                }\r\n\r\n                textContainer.addControl(text, 0);\r\n                textContainer.addControl(subtext, 1);\r\n                panel.addControl(textContainer);\r\n            } else {\r\n                panel.addControl(text);\r\n            }\r\n        }\r\n\r\n        contentContainer.addControl(panel);\r\n        return contentContainer;\r\n    }\r\n\r\n    // Mesh association\r\n    protected override _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n\r\n        const backPlateMesh = this._createBackPlate(scene);\r\n        const collisionMesh = this._createFrontPlate(scene);\r\n        const innerQuadMesh = this._createInnerQuad(scene);\r\n        const backGlowMesh = this._createBackGlow(scene);\r\n\r\n        this._frontPlateCollisionMesh = collisionMesh;\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.scaling.x = this.width;\r\n        this._textPlate.parent = collisionMesh;\r\n\r\n        this._backPlate = backPlateMesh;\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(innerQuadMesh);\r\n\r\n        if (backGlowMesh) {\r\n            this._backPlate.addChild(backGlowMesh);\r\n        }\r\n\r\n        const tn = new TransformNode(`${this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    private _createBackPlate(scene: Scene) {\r\n        const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\r\n        backPlateMesh.isPickable = false;\r\n        backPlateMesh.visibility = 0;\r\n        backPlateMesh.scaling.z = 0.2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const backPlateModel = result.meshes[1];\r\n            backPlateModel.visibility = 0;\r\n\r\n            if (this._isBackplateVisible) {\r\n                backPlateModel.visibility = 1;\r\n                backPlateModel.name = `${this.name}_backPlate`;\r\n                backPlateModel.isPickable = false;\r\n                backPlateModel.scaling.x = this.width;\r\n                backPlateModel.scaling.y = this.height;\r\n                backPlateModel.parent = backPlateMesh;\r\n            }\r\n\r\n            if (this._backMaterial) {\r\n                backPlateModel.material = this._backMaterial;\r\n            }\r\n\r\n            this._backPlate = backPlateModel;\r\n        });\r\n\r\n        return backPlateMesh;\r\n    }\r\n\r\n    private _createFrontPlate(scene: Scene) {\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_frontPlate`,\r\n            {\r\n                width: this.width,\r\n                height: this.height,\r\n                depth: this.frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const collisionPlate = CreateBox(\r\n                `${this.name}_collisionPlate`,\r\n                {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                },\r\n                scene\r\n            );\r\n            collisionPlate.isPickable = false;\r\n            collisionPlate.scaling.z = this.frontPlateDepth;\r\n            collisionPlate.visibility = 0;\r\n            collisionPlate.parent = collisionMesh;\r\n            this._collisionPlate = collisionPlate;\r\n\r\n            const frontPlateModel = result.meshes[1];\r\n            frontPlateModel.name = `${this.name}_frontPlate`;\r\n            frontPlateModel.isPickable = false;\r\n            frontPlateModel.scaling.x = this.width - this.backGlowOffset;\r\n            frontPlateModel.scaling.y = this.height - this.backGlowOffset;\r\n            frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\r\n            frontPlateModel.parent = collisionPlate;\r\n\r\n            if (this.isToggleButton) {\r\n                frontPlateModel.visibility = 0;\r\n            }\r\n\r\n            if (this._frontMaterial) {\r\n                frontPlateModel.material = this._frontMaterial;\r\n            }\r\n\r\n            this._textPlate.scaling.x = 1;\r\n            this._textPlate.parent = frontPlateModel;\r\n            this._frontPlate = frontPlateModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createInnerQuad(scene: Scene) {\r\n        const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\r\n        innerQuadMesh.isPickable = false;\r\n        innerQuadMesh.visibility = 0;\r\n        innerQuadMesh.scaling.z = this.flatPlaneDepth;\r\n        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then((result) => {\r\n            const innerQuadModel = result.meshes[1];\r\n            innerQuadModel.name = `${this.name}_innerQuad`;\r\n            innerQuadModel.isPickable = false;\r\n            innerQuadModel.scaling.x = this.width - this.backGlowOffset;\r\n            innerQuadModel.scaling.y = this.height - this.backGlowOffset;\r\n            innerQuadModel.parent = innerQuadMesh;\r\n\r\n            if (this._innerQuadMaterial) {\r\n                innerQuadModel.material = this._innerQuadMaterial;\r\n            }\r\n\r\n            this._innerQuad = innerQuadModel;\r\n        });\r\n\r\n        return innerQuadMesh;\r\n    }\r\n\r\n    private _createBackGlow(scene: Scene) {\r\n        if (this.isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\r\n        backGlowMesh.isPickable = false;\r\n        backGlowMesh.visibility = 0;\r\n        backGlowMesh.scaling.z = this.flatPlaneDepth;\r\n        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then((result) => {\r\n            const backGlowModel = result.meshes[1];\r\n            backGlowModel.name = `${this.name}_backGlow`;\r\n            backGlowModel.isPickable = false;\r\n            backGlowModel.scaling.x = this.width - this.backGlowOffset;\r\n            backGlowModel.scaling.y = this.height - this.backGlowOffset;\r\n            backGlowModel.parent = backGlowMesh;\r\n\r\n            if (this._backGlowMaterial) {\r\n                backGlowModel.material = this._backGlowMaterial;\r\n            }\r\n\r\n            this._backGlow = backGlowModel;\r\n        });\r\n\r\n        return backGlowMesh;\r\n    }\r\n\r\n    protected override _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = this.plateMaterialColor;\r\n    }\r\n\r\n    private _performClickAnimation() {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Click Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"backGlowMotion\",\r\n                mesh: this._backGlow,\r\n                property: \"material.motion\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [1, 0.0144, 0.0144],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0027713229489760476, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0027713229489760476],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZSlide\",\r\n                mesh: this._collisionPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0.0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0, 0.005403332496794331],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZScale\",\r\n                mesh: this._collisionPlate,\r\n                property: \"scaling.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [this.frontPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [this.backPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [this.frontPlateDepth, 0.0054],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [this.frontPlateDepth],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = 1;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _performEnterExitAnimation(speedRatio: number) {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"frontPlateFadeOut\",\r\n                mesh: this._frontPlate,\r\n                property: \"material.fadeOut\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0.025045314830017686, 0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [1.00205599570012, 0.025045314830017686, 0, 0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"textPlateZSlide\",\r\n                mesh: this._textPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = speedRatio;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = this._backMaterial ?? new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.absoluteSizes = true;\r\n        this._backMaterial.radius = this.radius;\r\n        this._backMaterial.lineWidth = 0.02;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = this._frontMaterial ?? new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this.frontMaterial.radius = this.innerQuadRadius;\r\n        this.frontMaterial.fadeOut = 0.0;\r\n    }\r\n\r\n    private _createBackGlowMaterial(mesh: Mesh) {\r\n        const glowRadius = this.radius + 0.04;\r\n        this._backGlowMaterial = this._backGlowMaterial ?? new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\r\n        this._backGlowMaterial.bevelRadius = glowRadius;\r\n        this._backGlowMaterial.lineWidth = glowRadius;\r\n        this._backGlowMaterial.motion = 0.0;\r\n    }\r\n\r\n    private _createInnerQuadMaterial(mesh: Mesh) {\r\n        this._innerQuadMaterial = this._innerQuadMaterial ?? new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\r\n        this._innerQuadMaterial.radius = this.innerQuadRadius;\r\n\r\n        if (this.isToggleButton) {\r\n            this._innerQuadMaterial.color = this.innerQuadColor;\r\n        }\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = this._plateMaterial ?? new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected override _onToggle(newState: boolean) {\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected override _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] as MRDLBackplateMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] as MRDLFrontplateMaterial;\r\n            }\r\n\r\n            // Back glow\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\r\n                this._createBackGlowMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\r\n            } else {\r\n                this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] as MRDLBackglowMaterial;\r\n            }\r\n\r\n            // Inner quad\r\n            if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\r\n                this._createInnerQuadMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\r\n            } else {\r\n                this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] as MRDLInnerquadMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n            this._createBackGlowMaterial(mesh);\r\n            this._createInnerQuadMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        if (this._backGlow) {\r\n            this._backGlow.material = this._backGlowMaterial;\r\n        }\r\n\r\n        if (this._innerQuad) {\r\n            this._innerQuad.material = this._innerQuadMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerClickObservable.remove(this._pointerClickObserver);\r\n        this.onPointerEnterObservable.remove(this._pointerEnterObserver);\r\n        this.onPointerOutObservable.remove(this._pointerOutObserver);\r\n        this.onToggleObservable.remove(this._toggleObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n            this._backGlowMaterial.dispose();\r\n            this._innerQuadMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\" || (pointerEvent.pointerType === \"xr\" && this._scene.getEngine().hostInformation.isMobile)) {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as GUI from \"gui/index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    if (!(<any>globalObject).BABYLON.GUI) {\r\n        (<any>globalObject).BABYLON.GUI = GUI;\r\n    }\r\n}\r\n\r\nexport * from \"gui/index\";\r\n","import * as gui from \"@lts/gui/legacy/legacy\";\r\n\r\nexport { gui };\r\nexport default gui;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","extendStatics","b","setPrototypeOf","__proto__","Array","p","__extends","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__decorate","decorators","target","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","verb","iterator","v","op","pop","push","SuppressedError","unit","negativeValueAllowed","ValueAndUnit","UNITMODE_PIXEL","_value","_unit","ignoreAdaptiveScaling","onChangedObservable","Observable","_originalUnit","UNITMODE_PERCENTAGE","notifyObservers","getValueInPixel","host","refValue","isPixel","getValue","updateInPlace","width","height","idealWidth","Math","ceil","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","tmpRect","Vector2","tmpRect2","tmpV1","tmpV2","left","top","copyFrom","other","copyFromFloats","CombineToRef","a","min","right","max","bottom","addAndTransformToRef","transform","addX","addY","addWidth","addHeight","Number","MAX_VALUE","transformCoordinates","x","floor","transformToRef","isEqualsTo","Empty","Measure","buttonIndex","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","Identity","Matrix2D","IdentityToRef","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","ComposeToRef","tx","ty","scaleX","scaleY","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","Round","precision","MathTools","DefaultRoundingPrecision","round","name","_alpha","_alphaSet","_zIndex","_currentMeasure","_tempPaddingMeasure","_fontFamily","_fontStyle","_fontWeight","_fontSize","_width","_height","_color","_style","_horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_prevCurrentMeasureTransformedIntoGlobalSpace","_cachedParentMeasure","_descendantsOnlyPadding","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","_invertTransformMatrix","_transformedPosition","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_highlightColor","_highlightLineWidth","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_evaluatedMeasure","_evaluatedParentMeasure","_isEnabled","_disabledColor","_disabledColorItem","_isReadOnly","_gradient","_rebuildLayout","onEnabledStateChangedObservable","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","_clipChildren","_clipContent","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_previousShadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","_accessibilityTag","onAccessibilityTagChangedObservable","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","onDisposeObservable","onIsVisibleChangedObservable","isSerializable","_fixedRatio","_fixedRatioMasterIsWidth","animations","_tmpMeasureA","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","isNaN","_resetFontCache","remove","_styleObserver","add","isPercentage","fontSizeToUse","fontSize","zIndex","parent","_reOrderControl","_linkedMesh","paddingLeft","paddingLeftInPixels","paddingRight","paddingRightInPixels","paddingTop","paddingTopInPixels","paddingBottom","paddingBottomInPixels","linkOffsetX","linkOffsetY","recursivelyFirePointerOut","control","pointer","_lastControlOver","_onPointerOut","children","forEach","getAscendantOfClass","className","markAsDirty","force","markAllAsDirty","_markAllAsDirty","isAscendant","container","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","IdentityReadOnly","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","setPadding","setPaddingInPixels","oldLeft","oldTop","parentMeasure","_processMeasures","getContext","newLeft","newTop","leftAndTopIgnoreAdaptiveScaling","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","context","_transform","_computeAdditionalOffsetX","_computeAdditionalOffsetY","invalidateRect","useInvalidateRectOptimization","shadowOffsetX","shadowOffsetY","shadowBlur","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_getColor","gradient","getCanvasGradient","color","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","renderToIntermediateTexture","alpha","_layout","isDirty","isVisible","_numLayoutCalls","_paddingLeftInPixels","_paddingTopInPixels","_paddingRightInPixels","_paddingBottomInPixels","rebuildCount","Logger","_evaluateClippingState","descendantsOnlyPadding","_preMeasure","_measure","_postMeasure","_computeAlignment","_additionalProcessing","hasObservers","clipChildren","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","clipContent","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","pi","type","pointerId","deltaX","deltaY","_processObservables","_onPointerMove","coordinates","_onPointerEnter","canNotify","_onPointerDown","Vector2WithInfo","rootContainer","_capturedPointerIds","event","_onPointerUp","notifyClick","canNotifyClick","delete","_forcePointerUp","_onWheelScroll","_onCanvasBlur","PointerEventTypes","POINTERMOVE","previousControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","POINTERWHEEL","_getStyleProperty","propName","defaultValue","fontSizeInPixels","_GetFontOffset","getEngine","child","isDimensionFullyDefined","dim","getDimension","clone","serialization","serialize","cloned","Instantiate","parse","serializedObject","urlRewriter","_urlRewriter","SerializationHelper","Parse","_parseFromContent","serializationObject","allowCanvas","Serialize","fontFamily","fontWeight","fontStyle","AppendSerializedAnimations","animationIndex","parsedAnimation","internalClass","GetClass","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","fixedRatioMasterIsWidth","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","engineToUse","_FontHeightSizes","engine","EngineStore","LastCreatedEngine","getFontOffset","controlType","newControl","drawEllipse","arc","PI","closePath","isReady","AddHeader","RegisterClass","_children","_measureForChildren","_background","_backgroundGradient","_adaptWidthToChildren","_adaptHeightToChildren","_renderToIntermediateTexture","_intermediateTexture","delegatePickingToChildren","logLayoutCycleErrors","maxLayoutCycle","onControlAddedObservable","onControlRemovedObservable","_inverseTransformMatrix","_inverseMeasure","isReadOnly","getChildByName","getChildByType","typeName","containsControl","addControl","clearControls","slice","_cleanControlAfterRemoval","linkedMesh","wasAdded","_getBackgroundColor","_localDraw","shadowColor","fillRect","_beforeLayout","scaleTo","DynamicTexture","Texture","NEAREST_SAMPLINGMODE","Constants","TEXTUREFORMAT_RGBA","hasAlpha","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","renderToIntermediateTextureThisDraw","contextToDrawTo","clearRect","drawImage","canvas","item","isEnabled","_changeCursor","_getAdaptDimTo","backgroundGradient","childSerializationObject","childData","Container","TextWrapping","_thickness","_cornerRadius","_cachedRadius","additionalWidth","thickness","additionalHeight","_getRectangleFill","_drawRoundedRect","fill","stroke","moveTo","lineTo","Rectangle","text","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","_underline","_lineThrough","_wordDivider","_forceResizeWidth","_applyOutlineToUnderline","onTextChangedObservable","onLinesReadyObservable","_linesTemp","_lines","_breakLines","maxLineWidth","line","newWidth","newHeight","internalValue","lineSpacing","_drawText","textWidth","outlineWidth","strokeText","fillText","_drawLine","xFrom","yFrom","xTo","yTo","applyOutlineToUnderline","currentStroke","_renderLines","outlineColor","lineJoin","miterLimit","refWidth","refHeight","split","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","WordWrapEllipsis","_parseLineWordWrapEllipsis","_parseLine","_getTextMetricsWidth","measureText","_getCharsToRemove","lineLength","diff","charWidth","removeChars","characters","from","join","textMetrics","actualBoundingBoxLeft","actualBoundingBoxRight","lines","words","wordSplittingFunction","testLine","testWidth","_computeHeightForLinesOf","lastLine","currentLine","linesToRemove","rootY","ascent","descent","lineCount","resizeToFit","computeExpectedHeight","widthInPixels","createCanvas","heightInPixels","TextBlock","url","_workingCanvas","_loaded","_stretch","Image","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_svgAttributesComputationCompleted","_isSVG","_cellWidth","_cellHeight","_cellId","_populateNinePatchSlicesFromImage","_imageDataCache","data","onImageLoadedObservable","onSVGAttributesComputedObservable","isLoaded","_detectPointerOnOpaqueOnly","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","_imageWidth","_imageHeight","_extractNinePatchSliceDataFromImage","synchronizeSizeWithContent","_rotate90","preserveProperties","_domImage","dataUrl","toDataURL","rotatedImage","_handleRotationForSVGImage","srcImage","dstImage","_rotate90SourceProperties","addOnce","srcLeft","sourceLeft","srcTop","sourceTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","sourceWidth","dstHeight","sourceHeight","mult","imageData","_onImageLoaded","onload","_source","_removeCacheUsage","_svgCheck","SourceImgCache","has","cachedData","img","timesUsed","loaded","waitingForLoadCallback","bind","createCanvasImage","set","waitingCallback","SetCorsBehavior","SetReferrerPolicyBehavior","referrerPolicy","src","ResetImageCache","SVGSVGElement","search","lastIndexOf","document","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","addEventListener","svgImage","createElement","appendChild","svgobj","svgsrc","elemid","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","baseVal","consolidate","matrix","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","_drawImage","sx","sy","sw","sh","tw","th","getTransform","workingCanvasContext","ttx","tty","setTransform","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","_renderNinePatch","idealRatio","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","leftWidthAdjusted","topHeightAdjusted","bottomHeightAdjusted","rightWidthAdjusted","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","sliceLeft","Map","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","pointerUpAnimation","_image","_textBlock","textBlockName","imageName","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Button","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_spacing","ignoreLayoutWarnings","isVertical","stackWidth","stackHeight","childrenCount","Warn","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","_getManualDim","manualWidth","manualHeight","StackPanel","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offsetHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","Checkbox","header","_characters","txt","removePart","idxStart","idxEnd","insertTxt","newCharacters","to","pack","ar","l","concat","charAt","idx","substr","temp","substring","isWord","rWord","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","disableMobilePrompt","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","_textWrapper","valueAsString","TextWrapper","_textHasChanged","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","_focusedBy","prompt","focusedControl","registerClipboardEvents","clipboardInfo","ClipboardEventTypes","COPY","_onCopyText","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","focus","moveFocusToControl","blur","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","isTextHighlightOn","deletePosition","shiftKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","highlightCursorLeft","focusedColor","_capturingControl","pointerType","textWrapper","InputText","_rowDefinitions","_rowDefinitionObservers","_columnDefinitions","_columnDefinitionObservers","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","columnCount","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","rowDefinition","columnDefinition","parseInt","leftInPixels","topInPixels","columns","rows","tags","cd","rd","columnValue","rowValue","cellInfo","rowNumber","columnNumber","Grid","Color3","Red","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","_lastPointerDownId","onValueChangedObservable","_pointerIsDown","size","equals","toHSVToRef","ColorPicker","_Epsilon","_updateSquareProps","radius","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","HSVtoRGBToRef","alphaRatio","alphaAmount","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","buttonFontSize","butEdit","swatchNumber","swatchDrawer","butSave","lastVal","activeField","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","luminanceLimitColor","FromHexString","luminanceLimit","iconColorDark","iconColorLight","inputFieldLabels","inputTextBackgroundColor","inputTextColor","editSwatchMode","dialogContainer","savedColors","topRow","background","gutterCount","initialRows","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","closeIconColor","toHexString","textVerticalAlignment","closePicker","currentSwatch","dialogBody","dialogBodyCols","pickerGrid","picker","editSwatches","updateValues","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelTextSize","labelWidth","labelHeight","newText","newSwatch","swatchOutline","currentText","buttonGrid","buttonGridRows","buttonWidth","buttonHeight","butOK","butCancel","disableButton","setEditButtonVisibility","updateSwatches","pickerColorValues","currentColor","rgbValuesQuadrant","rValInt","updateInt","gValInt","bValInt","rValDec","updateFloat","gValDec","bValDec","hexValueQuadrant","labelText","hexVal","minusPound","inputField","pickedColor","field","channel","newValue","test","newSwatchRGB","createSwatch","icon","swatchColor","swatchLuminence","mode","button","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","swatch","enableButton","disabled","val","newHexValue","checkHex","leadingZero","Ellipse","_unfocusedColor","FocusableButton","_prevText","_maxHeight","_updateCursorPosition","_highlightCursorInfo","initialStartIndex","initialRelativeStartIndex","initialLineIndex","_cursorInfo","globalStartIndex","globalEndIndex","relativeEndIndex","relativeStartIndex","currentLineIndex","_autoStretchHeight","alternativeProcessKey","code","rightDelta","upperLine","tmpIndex","relativeIndex","currentWidth","_contextForBreakLines","upperWidth","lineEnding","upperLineRelativeIndex","underLine","underWidth","underLineRelativeIndex","map","char","placeholderText","longerString","reduce","acc","longerStringWidth","_availableWidth","totalHeight","_availableHeight","tmpLength","_computeScroll","_clipTextLeft","_clipTextTop","selectedHeight","textTop","_scrollTop","highlightedText","deltaIndex","cursorTop","_resetBlinking","startLineIndex","endLineIndex","highlightRootY","highlightRootX","begin","end","leftOffsetWidth","selectedText","hightlightWidth","_clickedCoordinateX","_clickedCoordinateY","movementX","movementY","globalIndex","lastClickedCoordinateY","relativeCoordinateY","relativeXPosition","_evt","InputTextArea","pwdTextWrapper","InputPassword","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","x2","y2","x1","y1","Line","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","getProjectedPositionWithZ","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","_canvas","yValue","_points","getAt","MultiLinePoint","items","point","AbstractMesh","reset","previousPoint","first","_minX","_minY","_maxX","_maxY","MultiLine","group","executeOnAllControls","childRadio","offseHeight","AddRadioButtonWithHeader","radio","RadioButton","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_step","_effectiveBarOffset","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","isThumbClamped","rotation","_borderColor","_thumbColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","BaseSlider","Slider","_groupPanel","_selectors","_groupHeader","_addGroupHeader","groupHeading","_getSelector","selectorNb","removeSelector","addCheckbox","func","checked","state","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","SelectorGroup","_selectNb","addRadio","nb","addSlider","onValueChange","borderColor","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","_freezeControls","_bucketWidth","_bucketHeight","_buckets","_restoreMeasures","textureSize","renderWidth","renderHeight","measure","_updateMeasures","_useBuckets","_makeBuckets","setBucketSizes","_bucketLen","_dispatchInBuckets","_oldLeft","_oldTop","bStartX","_origLeft","origLeft","bEndX","bEndY","_origTop","origTop","bStartY","bucket","lstc","origLeftForChildren","origTopForChildren","_updateChildrenMeasures","_parentMeasure","_scrollChildren","_scrollChildrenWithBuckets","scrollLeft","scrollTop","maxWidth","parentClientWidth","maxHeight","parentClientHeight","_tempMeasure","_invertScrollDirection","invert","sign","_first","_originX","_originY","delta","ScrollBar","_thumbLength","_thumbHeight","_barImageHeight","num90RotationInVerticalMode","_backgroundBaseImage","_backgroundImage","rotatedValue","_thumbBaseImage","_thumbImage","isImageBased","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarImageHeight","_verticalBarImageHeight","_oldWindowContentsWidth","_oldWindowContentsHeight","_forceHorizontalBar","_forceVerticalBar","_useImageBar","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ImageScrollBar","_verticalBar","_window","_ScrollViewerWindow","_addBar","barColor","barBackground","freezeControls","bucketWidth","bucketHeight","resetWindow","_buildClientSizes","forceVerticalBar","forceHorizontalBar","_clientWidth","_clientHeight","_updateScroller","_setWindowPosition","_barImage","hb","thumbImage","_horizontalBarImage","_verticalBarImage","thumbLength","thumbHeight","barImageHeight","_barBackground","_barBackgroundImage","backgroundImage","_horizontalBarBackgroundImage","_verticalBarBackgroundImage","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","thumbWidth","_attachWheel","barControl","barContainer","barOffset","_onWheelObserver","ScrollViewer","onIsActiveChangedObservable","_isActive","toActiveAnimation","toInactiveAnimation","pointerEnterActiveAnimation","pointerOutActiveAnimation","pointerDownActiveAnimation","pointerUpActiveAnimation","pointerEnterInactiveAnimation","pointerOutInactiveAnimation","pointerDownInactiveAnimation","pointerUpInactiveAnimation","_group","childToggle","isActive","ToggleButton","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","addKeysRow","keys","propertySets","maxKey","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","VirtualKeyboard","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","DisplayGrid","_valueBarImage","valueBarImage","ImageBasedSlider","_colorStops","_gradientDirty","_addColorStopsToCanvasGradient","_canvasGradient","_context","_createCanvasGradient","removeColorStop","colorStop","clearColorStops","colorStops","x0","y0","_x0","_y0","BaseGradient","LinearGradient","_r0","_r1","createRadialGradient","RadialGradient","generateMipMaps","samplingMode","invertY","onGuiReadyObservable","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_cursorChanged","_defaultMousePointerId","_rootChildrenHaveChanged","Set","_clipboardData","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","applyYInversionOnUpdate","skipBlockEvents","checkPointerEveryFrame","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","_onClipboardCopy","rawEvt","ClipboardInfo","_onClipboardCut","_onClipboardPaste","parseContent","parseSerializedObject","_texture","_rootElement","getInputElement","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_controlAddedObserver","_controlRemovedObserver","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","skipOnPointerObservable","_resizeObserver","onResizeObservable","_onResize","rwidth","rheight","_layerToDispose","getChildren","getControlsByType","getControlByName","_getControlByKey","find","layer","isBackground","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","createStyle","Style","moveToNonOverlappedPosition","overlapGroup","deltaStep","repelFactor","controlsForGroup","isArray","descendants","control1","velocity","control2","AdvancedDynamicTexture","_Overlaps","subtract","diffLength","normalize","overlapDeltaMultiplier","linkOffsetXInPixels","linkOffsetYInPixels","_prePointerObserver","onPrePointerObservable","_sceneRenderObserver","onBeforeRenderObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","_canvasBlurObserver","onCanvasBlurObservable","texture","getRenderWidth","getRenderHeight","globalViewPort","toGlobal","targetX","targetY","getProjectedPosition","worldMatrix","skipUpdate","layerMask","isDisposed","SetImmediate","ZeroReadOnly","update","AllowGPUOptimizations","skipRender","_checkGuiIsReady","activeCamera","cursor","style","_doPicking","cameraToUseForPointers","viewport","doNotHandleCursors","_manageFocus","_cleanControlAfterRemovalFromList","list","pick","_scene","_translateToPicking","tempViewport","pointerX","pointerY","originalCameraToUseForPointers","rigCameras","rigCamera","toGlobalToRef","transformedX","getHardwareScalingLevel","transformedY","attach","isPointerCaptured","_attachPickingToSceneRender","_attachToOnPointerOut","_attachToOnBlur","removeEventListener","_transformUvs","uv","textureMatrix","getTextureMatrix","isIdentityAs3x2","homogeneousTextureMatrix","TmpVectors","getRowToRef","Vector4","setRowFromFloats","TransformToRef","wrapU","WRAP_ADDRESSMODE","MIRROR_ADDRESSMODE","fX","trunc","wrapV","fY","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","getTextureCoordinates","friendlyControls","canMoveFocus","otherHost","enablePointerMoveEvents","pickFunction","forcePicking","pointerEvent","entries","serializeContent","scaleToSize","newName","CreateFullscreenUI","CreateForMesh","noMipmap","ParseFromSnippetAsync","snippetId","appendToAdt","adt","_LoadURLContentAsync","SnippetUrl","replace","serialized","parseFromSnippetAsync","ParseFromFileAsync","parseFromURLAsync","snippet","request","WebRequest","readyState","status","gui","payload","JSON","responseText","jsonPayload","encodedGui","TextDecoder","decode","DecodeBase64ToBinary","open","send","onlyAlphaTesting","materialSetupCallback","sampling","_CreateMaterial","TRILINEAR_SAMPLINGMODE","RandomGUID","internalClassType","material","backFaceCulling","diffuseColor","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateForMeshTexture","foreground","adaptiveScaling","BILINEAR_SAMPLINGMODE","resultScene","Layer","newScale","guiIsReady","_captureRenderTime","_renderTime","PerfCounter","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","XmlLoaderError","parentClass","_nodes","_nodeTypes","element","attribute","_isLoaded","_objectAttributes","_parentClass","_getChainElement","attributeValue","_getClassAttribute","attributeName","_createGuiElement","node","linkParent","guiNode","nodeName","attributes","includes","startsWith","endsWith","getNamedItem","id","exception","_parseGrid","cells","cellNode","totalColumnsNumber","nodeType","nodeValue","k","firstChild","_parseXml","nextSibling","_parseElement","_prepareSourceElement","variable","_parseElementsFromSource","dataSource","splittedSource","generated","setAttribute","_rootNode","getNodeById","getNodes","loadLayout","xmlFile","rootNode","onSuccess","onError","xhttp","XMLHttpRequest","responseXML","xmlDoc","onerror","loadLayoutAsync","_isScaledByManager","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","removeBehavior","detach","getBehaviorByName","setEnabled","linkToTransformNode","_prepareNode","_createNode","_injectGUI3DReservedDataStore","isPickable","_affectMaterial","reservedDataStore","GUI3D","_isTouchButton3D","_generatePointerEventType","Vector3WithInfo","forcePointerUp","pickedPoint","originMeshPosition","_disposeNode","_contentResolution","_contentScaleRatio","_content","utilityLayer","_facadeTexture","utilityLayerScene","_setFacadeTextureScaling","_applyFacade","_contentScaleRatioY","_resetContent","_disposeFacadeTexture","content","facadeTexture","Control3D","TransformNode","ContentDisplay3D","_options","depth","_currentMaterial","emissiveColor","scaleInPlace","faceUV","useRightHandedSystem","CreateBox","wrap","StandardMaterial","AbstractButton3D","_blockLayout","_arrangeChildren","updateLayout","blockLayout","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","_columns","_rows","_rowThenColum","_orientation","Container3D","margin","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","subtractToRef","TransformNormalToRef","startOffsetX","startOffsetY","nodeGrid","cellCounter","_mapGridNode","_finalProcessing","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","VolumeBasedPanel","ShaderStore","ShadersStore","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","drawWrapper","_drawWrapper","isFrozen","effect","_wasPreviouslyReady","materialDefines","FluentMaterialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","fallbacks","onCompiled","indexParameters","_materialContext","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","Clone","FluentMaterial","customType","rootUrl","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","_backPlateMargin","_updateCurrentMinMax","_updateMargins","Mesh","_backPlate","_backPlateMaterial","_pickedPointObserver","onPickedPointChangedObservable","_currentMin","_currentMax","minimizeInPlace","maximizeInPlace","addInPlaceFromFloats","backPlateMargin","subtractInPlace","addButton","wasLayoutBlocked","isBackplateVisible","TouchHolographicMenu","MENU_BUTTON_SCALE","xr","_handConstraintBehavior","HandConstraintBehavior","linkToXRExperience","BLOB_ENABLE","BLOB_ENABLE_2","SMOOTH_EDGES","IRIDESCENT_MAP_ENABLE","_needNormals","absoluteSizes","_filterWidth","baseColor","lineColor","blobIntensity","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","blobNearSize","blobPulse","blobFade","blobNearSize2","blobPulse2","blobFade2","_rate","highlightColor","highlightWidth","_highlightTransform","_highlight","iridescenceIntensity","iridescenceEdgeIntensity","_angle","fadeOut","_reflected","_frequency","_verticalOffset","globalLeftIndexTipPosition","_globalLeftIndexTipPosition4","globalRightIndexTipPosition","_globalRightIndexTipPosition4","alphaMode","ALPHA_DISABLE","_blobTexture","FluentBackplateMaterial","BLOB_TEXTURE_URL","_iridescentMap","IM_TEXTURE_URL","FluentBackplateMaterialDefines","_isReadyForSubMesh","PrepareDefinesForAttributes","EffectFallbacks","FOG","addFallback","HandleFallbacksForShadows","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","NORMAL","UV1","UV2","UV2Kind","VERTEXCOLOR","ColorKind","TANGENT","TangentKind","PrepareAttributesForInstances","setVector4","getAnimatables","_shareMaterials","_model","renderingGroupId","_material","collisionMesh","visibility","SceneLoader","ImportMeshAsync","HolographicBackplate","MODEL_BASE_URL","MODEL_FILENAME","importedModel","meshes","_createMaterial","_touchSharedMaterials","shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","_textPlate","rightHandedScene","CreatePlane","tooltipBackground","sideOrientation","DOUBLESIDE","mat","addChild","Forward","Up","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","IsDocumentAvailable","_createBackMaterial","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","Button3D","RELATIVE_WIDTH","ENABLE_FADE","_needUVs","edgeWidth","edgeColor","proximityMaxIntensity","proximityFarDistance","proximityNearRadius","proximityAnisotropy","selectionFuzz","selected","selectionFade","selectionFadeSize","selectedDistance","selectedFadeLength","leftBlobEnable","leftBlobNearSize","leftBlobPulse","leftBlobFade","leftBlobInnerFade","rightBlobEnable","rightBlobNearSize","rightBlobPulse","rightBlobFade","rightBlobInnerFade","activeFaceDir","activeFaceUp","enableFade","fadeWidth","smoothActiveFace","showFrame","useBlobTexture","ALPHA_ADD","disableDepthWrite","FluentButtonMaterial","FluentButtonMaterialDefines","_isNearPressed","_interactionSurfaceHeight","_isToggleButton","_toggleState","_toggleButtonCallback","_onToggle","onToggleObservable","collidableFrontDirection","_collisionMesh","transformedDirection","_collidableFrontDirection","frontWorldDir","isNearPickable","getChildMeshes","forward","removeCallback","newState","_isInteractionInFrontOfButton","collidablePos","_getInteractionHeight","getAbsolutePosition","getPressDepth","touchPoint","interactionHeight","interactionPos","basePos","frontDir","Distance","Dot","providedType","nearMeshPosition","activeInteractionCount","_isBackplateVisible","_frontPlateDepth","_backPlateDepth","_backplateColor","_backplateToggledColor","isActiveNearInteraction","decompose","Scalar","Clamp","_pointerHoverObserver","TouchHolographicButton","alphaMesh","importedFrontPlate","tn","setParent","negate","TouchButton3D","followBehaviorEnabled","sixDofDragBehaviorEnabled","surfaceMagnetismBehaviorEnabled","_followBehavior","FollowBehavior","_sixDofDragBehavior","SixDofDragBehavior","_surfaceMagnetismBehavior","SurfaceMagnetismBehavior","ownerMesh","draggablesMeshes","sceneUnderstandingMeshes","attachedNode","_addObservables","draggableMeshes","faceCameraOnDragStart","enabled","_removeObservables","_onBeforeRenderObserver","_enabled","isMoving","_onDragObserver","onDragObservable","disableMovement","findAndUpdateTarget","HandleState","_hover","_drag","_scale","_lastTick","animationLength","hoverScale","baseScale","dragScale","_positionOffset","_updateInterpolationTarget","Date","now","_onBeforeRender","tick","scaleDiff","_targetScale","colorDiff","TmpColors","_targetColor","scaleToRef","addToRef","setColor3","drag","hover","ShaderMaterial","gizmo","_state","IDLE","_materials","_gizmo","createNode","handle","HOVER","_updateMaterial","DRAG","positionOffset","HandleMaterial","setDragBehavior","dragStartFn","dragFn","dragEndFn","dragBehavior","BaseSixDofDragBehavior","_dragBehavior","_dragStartObserver","onDragStartObservable","_draggingObserver","_dragEndObserver","onDragEndObservable","verticalBox","sideNode","isNearGrabbable","GizmoHandle","horizontalBox","angleNode","_boundingDimensions","_tmpQuaternion","Quaternion","_tmpVector","_corners","_sides","_boundingBoxGizmo","_handleSize","_attachedSlate","_existingSlateScale","fixedScreenSize","fixedScreenSizeDistanceFactor","updateScale","gizmoLayer","originalScene","attachedMesh","updateBoundingBox","onPickingObservable","_handleHovered","_handlesParent","rotationQuaternion","masksCorners","dimensions","origin","corner","CornerHandle","_assignDragBehaviorCorners","originStart","dimensionsStart","masks","_moveHandle","side","SideHandle","_assignDragBehaviorSides","_rootMesh","_keepAspectRatio","vector","aspectRatio","invertDiagonal","axis","dot","_clampDimensions","mask","keepAspectRatio","impact","multiplyInPlace","clampedDimensions","minDimensions","isCorner","offsetOriginMasked","offsetDimensionsMasked","addInPlace","moveFn","dragOrigin","toObjectFrame","dragPlaneNormal","attachedSlate","_followButton","isToggled","_handleDragged","normal","ref","projectToRef","_positionElements","_updatePivot","quaternionOrigin","directionOrigin","worldPivot","worldPlaneNormal","getAbsolutePivotPoint","GetAngleBetweenVectorsOnPlane","RotationAxisToRef","_attachedNodeChanged","PivotTools","_RemoveAndStorePivotPoint","originalParent","_update","RotationYawPitchRoll","boundingMinMax","_updateHandlesPosition","_updateHandlesScaling","_RestorePivotPoint","handleScaling","scaledWidth","scaledHeight","setAll","absolutePosition","distanceFromCamera","Gizmo","titleBarMargin","_dimensions","_titleBarHeight","_titleText","defaultDimensions","isToggleButton","_closeButton","_contentViewport","_contentDragBehavior","PointerDragBehavior","_defaultBehavior","newRatio","_titleBar","_titleBarTitle","_contentPlate","_titleTextComponent","_contentMaterial","albedoTexture","_resetContentPositionAndZoom","_applyContentViewport","_addControl","followButton","titleBar","titleBarTitle","contentPlate","backPlate","titleBarHeight","contentPlateHeight","rightHandScene","HolographicSlate","_DEFAULT_TEXT_RESOLUTION_Y","tex","uScale","vScale","uOffset","vOffset","TransformCoordinatesToRef","setPivotPoint","origin2","VertexData","BACKSIDE","frontUVs","FRONTSIDE","_attachContentPlateBehavior","ASSETS_BASE_URL","FOLLOW_ICON_FILENAME","CLOSE_ICON_FILENAME","followBehavior","recenter","moveAttached","useObjectOrientationForDragging","updateDragPlane","startViewport","worldDimensions","upWorld","rightWorld","projectedOffset","dragPlanePoint","_titleBarMaterial","SlateGizmo","DefaultBehavior","sixDofDragBehavior","_positionChangedObserver","onPositionChangedObservable","resetDefaultAspectAndPose","resetAspect","backward","Backward","pivot","FromLookDirectionLH","_currentMesh","_isPinned","_dragObserver","isPinned","_pinButton","_createPinButton","NearMenu","_ASSETS_BASE_URL","_PIN_ICON_FILENAME","ignoreCameraPitchAndRoll","pitchOffset","minimumDistance","defaultDistance","maximumDistance","_iteration","_scatterMapping","random","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","SKY_ENABLED","IRIDESCENCE_ENABLED","bevelFront","bevelFrontStretch","bevelBack","bevelBackStretch","radiusTopLeft","radiusTopRight","radiusBottomLeft","radiusBottomRight","bulgeEnabled","bulgeHeight","bulgeRadius","sunIntensity","sunTheta","sunPhi","indirectDiffuse","albedo","specular","shininess","sharpness","subsurface","leftGradientColor","rightGradientColor","reflection","frontReflect","edgeReflect","power","skyColor","horizonColor","groundColor","horizonPower","fuzz","minFuzz","clipFade","hueShift","saturationShift","valueShift","blobPosition","blobPosition2","blobTexture","leftIndexPosition","rightIndexPosition","leftIndexMiddlePosition","rightIndexMiddlePosition","decalScaleXY","decalFrontOnly","rimIntensity","rimHueShift","rimSaturationShift","rimValueShift","useGlobalLeftIndex","useGlobalRightIndex","globalLeftIndexTipProximity","globalRightIndexTipProximity","globaRightIndexTipPosition","globalLeftThumbTipPosition","globalRightThumbTipPosition","globalLeftIndexMiddlePosition","globalRightIndexMiddlePosition","_blueGradientTexture","MRDLSliderBarMaterial","BLUE_GRADIENT_TEXTURE_URL","_decalTexture","_reflectionMapTexture","_indirectEnvTexture","MRDLSliderBarMaterialDefines","setVector2","MRDLSliderThumbMaterial","MRDLSliderThumbMaterialDefines","IRIDESCENCE_ENABLE","iridescenceTint","gradientColor","topLeftGradientColor","topRightGradientColor","bottomLeftGradientColor","bottomRightGradientColor","edgePower","edgeLineGradientBlend","_iridescentMapTexture","MRDLBackplateMaterial","IRIDESCENT_MAP_TEXTURE_URL","MRDLBackplateMaterialDefines","sliderBackplateVisible","_sliderBackplateVisible","_sliderThumb","_convertToPosition","_sliderBar","SLIDER_SCALING","_sliderBarMaterial","_sliderThumbMaterial","_sliderBackplateMaterial","_sliderBackplate","sliderBackplate","Slider3D","sliderBackplateModel","sliderBarModel","sliderThumbModel","_createBehavior","pointerDragBehavior","dragAxis","Right","_draggedPosition","dragDistance","_convertToValue","start","_sphericalMapping","xAngle","extendSizes","bevelRadius","tuningMotion","motion","maxIntensity","intensityFadeInExponent","outerFuzzStart","outerFuzzEnd","innerColor","blendExponent","falloff","bias","MRDLBackglowMaterialDefines","MRDLBackglowMaterial","relativeToHeight","blobEnable","blobInnerFade","blobPulseMaxSize","blobEnable2","blobInnerFade2","gazeIntensity","gazeFocus","MRDLFrontplateMaterial","MRDLFrontplateMaterialDefines","fixedRadius","glowFraction","glowMax","glowFalloff","ALPHA_COMBINE","MRDLInnerquadMaterialDefines","MRDLInnerquadMaterial","textSizeInPixels","imageSizeInPixels","plateMaterialColor","frontPlateDepth","backPlateDepth","backGlowOffset","flatPlaneDepth","innerQuadRadius","innerQuadColor","innerQuadToggledColor","innerQuadHoverColor","innerQuadToggledHoverColor","_performEnterExitAnimation","_innerQuadMaterial","_pointerClickObserver","_backGlow","_performClickAnimation","_pointerEnterObserver","_pointerOutObserver","_toggleObserver","_innerQuad","Down","_frontPlateCollisionMesh","cornerRadius","_subtext","_backGlowMaterial","_getAspectRatio","_alignContentVertically","_alignContentHorizontally","totalPanelWidthInPixels","padding","contentContainer","imageContainer","textContainer","subtext","backPlateMesh","_createBackPlate","_createFrontPlate","innerQuadMesh","_createInnerQuad","backGlowMesh","_createBackGlow","MRTK_ASSET_BASE_URL","BACKPLATE_MODEL_FILENAME","backPlateModel","FRONTPLATE_MODEL_FILENAME","collisionPlate","_collisionPlate","frontPlateModel","INNERQUAD_MODEL_FILENAME","innerQuadModel","BACKGLOW_MODEL_FILENAME","backGlowModel","animationGroup","AnimationGroup","property","frame","values","animation","anim","Animation","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","animkeyFrames","inTangent","outTangent","interpolation","setKeys","addTargetedAnimation","speedRatio","play","frontMaterial","_createBackGlowMaterial","glowRadius","_createInnerQuadMaterial","_customControlScaling","LastCreatedScene","_sceneDisposeObserver","_utilityLayer","UtilityLayerRenderer","_CreateDefaultUtilityLayerFromScene","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","controlScaling","GUI3DManager","MRTK_REALISTIC_SCALING","isPointerUp","shouldRender","pickingInfo","originMesh","hostInformation","isMobile","materialName","globalObject","BABYLON","GUI"],"sourceRoot":""}